
GB_FREERTOS_STM32F103_GPIO_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003288  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08003398  08003398  00013398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003478  08003478  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08003478  08003478  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003478  08003478  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003478  08003478  00013478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800347c  0800347c  0001347c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08003480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010d0  20000080  08003500  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001150  08003500  00021150  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125ae  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b0e  00000000  00000000  00032657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  00035168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f08  00000000  00000000  00036168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b42  00000000  00000000  00037070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001030a  00000000  00000000  0004fbb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000918d8  00000000  00000000  0005febc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f1794  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004514  00000000  00000000  000f17e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	08003380 	.word	0x08003380

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	08003380 	.word	0x08003380

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000009c 	.word	0x2000009c
 800017c:	20000150 	.word	0x20000150

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b08e      	sub	sp, #56	; 0x38
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fa67 	bl	8000658 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f833 	bl	80001f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f89f 	bl	80002d0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000192:	f000 f873 	bl	800027c <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000196:	4b13      	ldr	r3, [pc, #76]	; (80001e4 <main+0x64>)
 8000198:	f107 041c 	add.w	r4, r7, #28
 800019c:	461d      	mov	r5, r3
 800019e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001aa:	f107 031c 	add.w	r3, r7, #28
 80001ae:	2100      	movs	r1, #0
 80001b0:	4618      	mov	r0, r3
 80001b2:	f001 fe0b 	bl	8001dcc <osThreadCreate>
 80001b6:	4603      	mov	r3, r0
 80001b8:	4a0b      	ldr	r2, [pc, #44]	; (80001e8 <main+0x68>)
 80001ba:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 80001bc:	4b0b      	ldr	r3, [pc, #44]	; (80001ec <main+0x6c>)
 80001be:	463c      	mov	r4, r7
 80001c0:	461d      	mov	r5, r3
 80001c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80001ce:	463b      	mov	r3, r7
 80001d0:	2100      	movs	r1, #0
 80001d2:	4618      	mov	r0, r3
 80001d4:	f001 fdfa 	bl	8001dcc <osThreadCreate>
 80001d8:	4603      	mov	r3, r0
 80001da:	4a05      	ldr	r2, [pc, #20]	; (80001f0 <main+0x70>)
 80001dc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001de:	f001 fdee 	bl	8001dbe <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e2:	e7fe      	b.n	80001e2 <main+0x62>
 80001e4:	080033b0 	.word	0x080033b0
 80001e8:	200010a0 	.word	0x200010a0
 80001ec:	080033cc 	.word	0x080033cc
 80001f0:	200010e8 	.word	0x200010e8

080001f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b090      	sub	sp, #64	; 0x40
 80001f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fa:	f107 0318 	add.w	r3, r7, #24
 80001fe:	2228      	movs	r2, #40	; 0x28
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f002 fff2 	bl	80031ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000208:	1d3b      	adds	r3, r7, #4
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]
 8000214:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000216:	2301      	movs	r3, #1
 8000218:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800021a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800021e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000220:	2300      	movs	r3, #0
 8000222:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000224:	2301      	movs	r3, #1
 8000226:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000228:	2302      	movs	r3, #2
 800022a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800022c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000230:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000232:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000236:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000238:	f107 0318 	add.w	r3, r7, #24
 800023c:	4618      	mov	r0, r3
 800023e:	f000 fcb9 	bl	8000bb4 <HAL_RCC_OscConfig>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d001      	beq.n	800024c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000248:	f000 f8da 	bl	8000400 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800024c:	230f      	movs	r3, #15
 800024e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000250:	2302      	movs	r3, #2
 8000252:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000258:	2300      	movs	r3, #0
 800025a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025c:	2300      	movs	r3, #0
 800025e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	2101      	movs	r1, #1
 8000264:	4618      	mov	r0, r3
 8000266:	f000 ff25 	bl	80010b4 <HAL_RCC_ClockConfig>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000270:	f000 f8c6 	bl	8000400 <Error_Handler>
  }
}
 8000274:	bf00      	nop
 8000276:	3740      	adds	r7, #64	; 0x40
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}

0800027c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000280:	4b11      	ldr	r3, [pc, #68]	; (80002c8 <MX_USART1_UART_Init+0x4c>)
 8000282:	4a12      	ldr	r2, [pc, #72]	; (80002cc <MX_USART1_UART_Init+0x50>)
 8000284:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000286:	4b10      	ldr	r3, [pc, #64]	; (80002c8 <MX_USART1_UART_Init+0x4c>)
 8000288:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800028c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800028e:	4b0e      	ldr	r3, [pc, #56]	; (80002c8 <MX_USART1_UART_Init+0x4c>)
 8000290:	2200      	movs	r2, #0
 8000292:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000294:	4b0c      	ldr	r3, [pc, #48]	; (80002c8 <MX_USART1_UART_Init+0x4c>)
 8000296:	2200      	movs	r2, #0
 8000298:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <MX_USART1_UART_Init+0x4c>)
 800029c:	2200      	movs	r2, #0
 800029e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002a0:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <MX_USART1_UART_Init+0x4c>)
 80002a2:	220c      	movs	r2, #12
 80002a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002a6:	4b08      	ldr	r3, [pc, #32]	; (80002c8 <MX_USART1_UART_Init+0x4c>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002ac:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <MX_USART1_UART_Init+0x4c>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002b2:	4805      	ldr	r0, [pc, #20]	; (80002c8 <MX_USART1_UART_Init+0x4c>)
 80002b4:	f001 fb12 	bl	80018dc <HAL_UART_Init>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002be:	f000 f89f 	bl	8000400 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	200010a4 	.word	0x200010a4
 80002cc:	40013800 	.word	0x40013800

080002d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b088      	sub	sp, #32
 80002d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d6:	f107 0310 	add.w	r3, r7, #16
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002e4:	4b1e      	ldr	r3, [pc, #120]	; (8000360 <MX_GPIO_Init+0x90>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	4a1d      	ldr	r2, [pc, #116]	; (8000360 <MX_GPIO_Init+0x90>)
 80002ea:	f043 0310 	orr.w	r3, r3, #16
 80002ee:	6193      	str	r3, [r2, #24]
 80002f0:	4b1b      	ldr	r3, [pc, #108]	; (8000360 <MX_GPIO_Init+0x90>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	f003 0310 	and.w	r3, r3, #16
 80002f8:	60fb      	str	r3, [r7, #12]
 80002fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002fc:	4b18      	ldr	r3, [pc, #96]	; (8000360 <MX_GPIO_Init+0x90>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a17      	ldr	r2, [pc, #92]	; (8000360 <MX_GPIO_Init+0x90>)
 8000302:	f043 0320 	orr.w	r3, r3, #32
 8000306:	6193      	str	r3, [r2, #24]
 8000308:	4b15      	ldr	r3, [pc, #84]	; (8000360 <MX_GPIO_Init+0x90>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f003 0320 	and.w	r3, r3, #32
 8000310:	60bb      	str	r3, [r7, #8]
 8000312:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000314:	4b12      	ldr	r3, [pc, #72]	; (8000360 <MX_GPIO_Init+0x90>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	4a11      	ldr	r2, [pc, #68]	; (8000360 <MX_GPIO_Init+0x90>)
 800031a:	f043 0304 	orr.w	r3, r3, #4
 800031e:	6193      	str	r3, [r2, #24]
 8000320:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <MX_GPIO_Init+0x90>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	f003 0304 	and.w	r3, r3, #4
 8000328:	607b      	str	r3, [r7, #4]
 800032a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800032c:	2200      	movs	r2, #0
 800032e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000332:	480c      	ldr	r0, [pc, #48]	; (8000364 <MX_GPIO_Init+0x94>)
 8000334:	f000 fc26 	bl	8000b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000338:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800033c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033e:	2301      	movs	r3, #1
 8000340:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000342:	2300      	movs	r3, #0
 8000344:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000346:	2302      	movs	r3, #2
 8000348:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800034a:	f107 0310 	add.w	r3, r7, #16
 800034e:	4619      	mov	r1, r3
 8000350:	4804      	ldr	r0, [pc, #16]	; (8000364 <MX_GPIO_Init+0x94>)
 8000352:	f000 fa93 	bl	800087c <HAL_GPIO_Init>

}
 8000356:	bf00      	nop
 8000358:	3720      	adds	r7, #32
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	40021000 	.word	0x40021000
 8000364:	40011000 	.word	0x40011000

08000368 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000370:	2200      	movs	r2, #0
 8000372:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000376:	4809      	ldr	r0, [pc, #36]	; (800039c <StartDefaultTask+0x34>)
 8000378:	f000 fc04 	bl	8000b84 <HAL_GPIO_WritePin>
		 osDelay(1000);
 800037c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000380:	f001 fd70 	bl	8001e64 <osDelay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000384:	2201      	movs	r2, #1
 8000386:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800038a:	4804      	ldr	r0, [pc, #16]	; (800039c <StartDefaultTask+0x34>)
 800038c:	f000 fbfa 	bl	8000b84 <HAL_GPIO_WritePin>
		 osDelay(1000);
 8000390:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000394:	f001 fd66 	bl	8001e64 <osDelay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000398:	e7ea      	b.n	8000370 <StartDefaultTask+0x8>
 800039a:	bf00      	nop
 800039c:	40011000 	.word	0x40011000

080003a0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit(&huart1,val,10,100);
 80003a8:	2364      	movs	r3, #100	; 0x64
 80003aa:	220a      	movs	r2, #10
 80003ac:	4908      	ldr	r1, [pc, #32]	; (80003d0 <StartTask02+0x30>)
 80003ae:	4809      	ldr	r0, [pc, #36]	; (80003d4 <StartTask02+0x34>)
 80003b0:	f001 fae1 	bl	8001976 <HAL_UART_Transmit>
	//  HAL_Delay(100);
	  osDelay(100);
 80003b4:	2064      	movs	r0, #100	; 0x64
 80003b6:	f001 fd55 	bl	8001e64 <osDelay>
	HAL_UART_Receive(&huart1, rxbuff, 5, 10000);
 80003ba:	f242 7310 	movw	r3, #10000	; 0x2710
 80003be:	2205      	movs	r2, #5
 80003c0:	4905      	ldr	r1, [pc, #20]	; (80003d8 <StartTask02+0x38>)
 80003c2:	4804      	ldr	r0, [pc, #16]	; (80003d4 <StartTask02+0x34>)
 80003c4:	f001 fb69 	bl	8001a9a <HAL_UART_Receive>
    osDelay(100);
 80003c8:	2064      	movs	r0, #100	; 0x64
 80003ca:	f001 fd4b 	bl	8001e64 <osDelay>
	  HAL_UART_Transmit(&huart1,val,10,100);
 80003ce:	e7eb      	b.n	80003a8 <StartTask02+0x8>
 80003d0:	20000000 	.word	0x20000000
 80003d4:	200010a4 	.word	0x200010a4
 80003d8:	200010ec 	.word	0x200010ec

080003dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a04      	ldr	r2, [pc, #16]	; (80003fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d101      	bne.n	80003f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003ee:	f000 f949 	bl	8000684 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003f2:	bf00      	nop
 80003f4:	3708      	adds	r7, #8
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	40012c00 	.word	0x40012c00

08000400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000404:	b672      	cpsid	i
}
 8000406:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000408:	e7fe      	b.n	8000408 <Error_Handler+0x8>
	...

0800040c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000412:	4b18      	ldr	r3, [pc, #96]	; (8000474 <HAL_MspInit+0x68>)
 8000414:	699b      	ldr	r3, [r3, #24]
 8000416:	4a17      	ldr	r2, [pc, #92]	; (8000474 <HAL_MspInit+0x68>)
 8000418:	f043 0301 	orr.w	r3, r3, #1
 800041c:	6193      	str	r3, [r2, #24]
 800041e:	4b15      	ldr	r3, [pc, #84]	; (8000474 <HAL_MspInit+0x68>)
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	f003 0301 	and.w	r3, r3, #1
 8000426:	60bb      	str	r3, [r7, #8]
 8000428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800042a:	4b12      	ldr	r3, [pc, #72]	; (8000474 <HAL_MspInit+0x68>)
 800042c:	69db      	ldr	r3, [r3, #28]
 800042e:	4a11      	ldr	r2, [pc, #68]	; (8000474 <HAL_MspInit+0x68>)
 8000430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000434:	61d3      	str	r3, [r2, #28]
 8000436:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <HAL_MspInit+0x68>)
 8000438:	69db      	ldr	r3, [r3, #28]
 800043a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000442:	2200      	movs	r2, #0
 8000444:	210f      	movs	r1, #15
 8000446:	f06f 0001 	mvn.w	r0, #1
 800044a:	f000 f9ec 	bl	8000826 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800044e:	4b0a      	ldr	r3, [pc, #40]	; (8000478 <HAL_MspInit+0x6c>)
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	4a04      	ldr	r2, [pc, #16]	; (8000478 <HAL_MspInit+0x6c>)
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046a:	bf00      	nop
 800046c:	3710      	adds	r7, #16
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	40021000 	.word	0x40021000
 8000478:	40010000 	.word	0x40010000

0800047c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b088      	sub	sp, #32
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000484:	f107 0310 	add.w	r3, r7, #16
 8000488:	2200      	movs	r2, #0
 800048a:	601a      	str	r2, [r3, #0]
 800048c:	605a      	str	r2, [r3, #4]
 800048e:	609a      	str	r2, [r3, #8]
 8000490:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4a1c      	ldr	r2, [pc, #112]	; (8000508 <HAL_UART_MspInit+0x8c>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d131      	bne.n	8000500 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800049c:	4b1b      	ldr	r3, [pc, #108]	; (800050c <HAL_UART_MspInit+0x90>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	4a1a      	ldr	r2, [pc, #104]	; (800050c <HAL_UART_MspInit+0x90>)
 80004a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004a6:	6193      	str	r3, [r2, #24]
 80004a8:	4b18      	ldr	r3, [pc, #96]	; (800050c <HAL_UART_MspInit+0x90>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004b0:	60fb      	str	r3, [r7, #12]
 80004b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b4:	4b15      	ldr	r3, [pc, #84]	; (800050c <HAL_UART_MspInit+0x90>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	4a14      	ldr	r2, [pc, #80]	; (800050c <HAL_UART_MspInit+0x90>)
 80004ba:	f043 0304 	orr.w	r3, r3, #4
 80004be:	6193      	str	r3, [r2, #24]
 80004c0:	4b12      	ldr	r3, [pc, #72]	; (800050c <HAL_UART_MspInit+0x90>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	f003 0304 	and.w	r3, r3, #4
 80004c8:	60bb      	str	r3, [r7, #8]
 80004ca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004d2:	2302      	movs	r3, #2
 80004d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004d6:	2303      	movs	r3, #3
 80004d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004da:	f107 0310 	add.w	r3, r7, #16
 80004de:	4619      	mov	r1, r3
 80004e0:	480b      	ldr	r0, [pc, #44]	; (8000510 <HAL_UART_MspInit+0x94>)
 80004e2:	f000 f9cb 	bl	800087c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004ec:	2300      	movs	r3, #0
 80004ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f0:	2300      	movs	r3, #0
 80004f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f4:	f107 0310 	add.w	r3, r7, #16
 80004f8:	4619      	mov	r1, r3
 80004fa:	4805      	ldr	r0, [pc, #20]	; (8000510 <HAL_UART_MspInit+0x94>)
 80004fc:	f000 f9be 	bl	800087c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000500:	bf00      	nop
 8000502:	3720      	adds	r7, #32
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	40013800 	.word	0x40013800
 800050c:	40021000 	.word	0x40021000
 8000510:	40010800 	.word	0x40010800

08000514 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08c      	sub	sp, #48	; 0x30
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800051c:	2300      	movs	r3, #0
 800051e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000520:	2300      	movs	r3, #0
 8000522:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000524:	2200      	movs	r2, #0
 8000526:	6879      	ldr	r1, [r7, #4]
 8000528:	2019      	movs	r0, #25
 800052a:	f000 f97c 	bl	8000826 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800052e:	2019      	movs	r0, #25
 8000530:	f000 f995 	bl	800085e <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000534:	4b1e      	ldr	r3, [pc, #120]	; (80005b0 <HAL_InitTick+0x9c>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	4a1d      	ldr	r2, [pc, #116]	; (80005b0 <HAL_InitTick+0x9c>)
 800053a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800053e:	6193      	str	r3, [r2, #24]
 8000540:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <HAL_InitTick+0x9c>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800054c:	f107 0210 	add.w	r2, r7, #16
 8000550:	f107 0314 	add.w	r3, r7, #20
 8000554:	4611      	mov	r1, r2
 8000556:	4618      	mov	r0, r3
 8000558:	f000 ff28 	bl	80013ac <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800055c:	f000 ff12 	bl	8001384 <HAL_RCC_GetPCLK2Freq>
 8000560:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000564:	4a13      	ldr	r2, [pc, #76]	; (80005b4 <HAL_InitTick+0xa0>)
 8000566:	fba2 2303 	umull	r2, r3, r2, r3
 800056a:	0c9b      	lsrs	r3, r3, #18
 800056c:	3b01      	subs	r3, #1
 800056e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000570:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <HAL_InitTick+0xa4>)
 8000572:	4a12      	ldr	r2, [pc, #72]	; (80005bc <HAL_InitTick+0xa8>)
 8000574:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000576:	4b10      	ldr	r3, [pc, #64]	; (80005b8 <HAL_InitTick+0xa4>)
 8000578:	f240 32e7 	movw	r2, #999	; 0x3e7
 800057c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800057e:	4a0e      	ldr	r2, [pc, #56]	; (80005b8 <HAL_InitTick+0xa4>)
 8000580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000582:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000584:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <HAL_InitTick+0xa4>)
 8000586:	2200      	movs	r2, #0
 8000588:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800058a:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <HAL_InitTick+0xa4>)
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000590:	4809      	ldr	r0, [pc, #36]	; (80005b8 <HAL_InitTick+0xa4>)
 8000592:	f000 ff59 	bl	8001448 <HAL_TIM_Base_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d104      	bne.n	80005a6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800059c:	4806      	ldr	r0, [pc, #24]	; (80005b8 <HAL_InitTick+0xa4>)
 800059e:	f000 ffab 	bl	80014f8 <HAL_TIM_Base_Start_IT>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e000      	b.n	80005a8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80005a6:	2301      	movs	r3, #1
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3730      	adds	r7, #48	; 0x30
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40021000 	.word	0x40021000
 80005b4:	431bde83 	.word	0x431bde83
 80005b8:	200010f8 	.word	0x200010f8
 80005bc:	40012c00 	.word	0x40012c00

080005c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005c4:	e7fe      	b.n	80005c4 <NMI_Handler+0x4>

080005c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005c6:	b480      	push	{r7}
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ca:	e7fe      	b.n	80005ca <HardFault_Handler+0x4>

080005cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005d0:	e7fe      	b.n	80005d0 <MemManage_Handler+0x4>

080005d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005d2:	b480      	push	{r7}
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005d6:	e7fe      	b.n	80005d6 <BusFault_Handler+0x4>

080005d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005dc:	e7fe      	b.n	80005dc <UsageFault_Handler+0x4>

080005de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005de:	b480      	push	{r7}
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005e2:	bf00      	nop
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bc80      	pop	{r7}
 80005e8:	4770      	bx	lr
	...

080005ec <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80005f0:	4802      	ldr	r0, [pc, #8]	; (80005fc <TIM1_UP_IRQHandler+0x10>)
 80005f2:	f000 ffd3 	bl	800159c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	200010f8 	.word	0x200010f8

08000600 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr

0800060c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800060c:	480c      	ldr	r0, [pc, #48]	; (8000640 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800060e:	490d      	ldr	r1, [pc, #52]	; (8000644 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000610:	4a0d      	ldr	r2, [pc, #52]	; (8000648 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000614:	e002      	b.n	800061c <LoopCopyDataInit>

08000616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800061a:	3304      	adds	r3, #4

0800061c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800061c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800061e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000620:	d3f9      	bcc.n	8000616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000622:	4a0a      	ldr	r2, [pc, #40]	; (800064c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000624:	4c0a      	ldr	r4, [pc, #40]	; (8000650 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000628:	e001      	b.n	800062e <LoopFillZerobss>

0800062a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800062a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800062c:	3204      	adds	r2, #4

0800062e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800062e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000630:	d3fb      	bcc.n	800062a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000632:	f7ff ffe5 	bl	8000600 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000636:	f002 fdb3 	bl	80031a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800063a:	f7ff fda1 	bl	8000180 <main>
  bx lr
 800063e:	4770      	bx	lr
  ldr r0, =_sdata
 8000640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000644:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000648:	08003480 	.word	0x08003480
  ldr r2, =_sbss
 800064c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000650:	20001150 	.word	0x20001150

08000654 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000654:	e7fe      	b.n	8000654 <ADC1_2_IRQHandler>
	...

08000658 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <HAL_Init+0x28>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a07      	ldr	r2, [pc, #28]	; (8000680 <HAL_Init+0x28>)
 8000662:	f043 0310 	orr.w	r3, r3, #16
 8000666:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000668:	2003      	movs	r0, #3
 800066a:	f000 f8d1 	bl	8000810 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800066e:	200f      	movs	r0, #15
 8000670:	f7ff ff50 	bl	8000514 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000674:	f7ff feca 	bl	800040c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000678:	2300      	movs	r3, #0
}
 800067a:	4618      	mov	r0, r3
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40022000 	.word	0x40022000

08000684 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000688:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <HAL_IncTick+0x1c>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	461a      	mov	r2, r3
 800068e:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <HAL_IncTick+0x20>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4413      	add	r3, r2
 8000694:	4a03      	ldr	r2, [pc, #12]	; (80006a4 <HAL_IncTick+0x20>)
 8000696:	6013      	str	r3, [r2, #0]
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr
 80006a0:	20000014 	.word	0x20000014
 80006a4:	20001140 	.word	0x20001140

080006a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  return uwTick;
 80006ac:	4b02      	ldr	r3, [pc, #8]	; (80006b8 <HAL_GetTick+0x10>)
 80006ae:	681b      	ldr	r3, [r3, #0]
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr
 80006b8:	20001140 	.word	0x20001140

080006bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	f003 0307 	and.w	r3, r3, #7
 80006ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <__NVIC_SetPriorityGrouping+0x44>)
 80006ce:	68db      	ldr	r3, [r3, #12]
 80006d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006d2:	68ba      	ldr	r2, [r7, #8]
 80006d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006d8:	4013      	ands	r3, r2
 80006da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ee:	4a04      	ldr	r2, [pc, #16]	; (8000700 <__NVIC_SetPriorityGrouping+0x44>)
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	60d3      	str	r3, [r2, #12]
}
 80006f4:	bf00      	nop
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc80      	pop	{r7}
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e000ed00 	.word	0xe000ed00

08000704 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000708:	4b04      	ldr	r3, [pc, #16]	; (800071c <__NVIC_GetPriorityGrouping+0x18>)
 800070a:	68db      	ldr	r3, [r3, #12]
 800070c:	0a1b      	lsrs	r3, r3, #8
 800070e:	f003 0307 	and.w	r3, r3, #7
}
 8000712:	4618      	mov	r0, r3
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800072a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072e:	2b00      	cmp	r3, #0
 8000730:	db0b      	blt.n	800074a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	f003 021f 	and.w	r2, r3, #31
 8000738:	4906      	ldr	r1, [pc, #24]	; (8000754 <__NVIC_EnableIRQ+0x34>)
 800073a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073e:	095b      	lsrs	r3, r3, #5
 8000740:	2001      	movs	r0, #1
 8000742:	fa00 f202 	lsl.w	r2, r0, r2
 8000746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr
 8000754:	e000e100 	.word	0xe000e100

08000758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	6039      	str	r1, [r7, #0]
 8000762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000768:	2b00      	cmp	r3, #0
 800076a:	db0a      	blt.n	8000782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	b2da      	uxtb	r2, r3
 8000770:	490c      	ldr	r1, [pc, #48]	; (80007a4 <__NVIC_SetPriority+0x4c>)
 8000772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000776:	0112      	lsls	r2, r2, #4
 8000778:	b2d2      	uxtb	r2, r2
 800077a:	440b      	add	r3, r1
 800077c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000780:	e00a      	b.n	8000798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	b2da      	uxtb	r2, r3
 8000786:	4908      	ldr	r1, [pc, #32]	; (80007a8 <__NVIC_SetPriority+0x50>)
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	f003 030f 	and.w	r3, r3, #15
 800078e:	3b04      	subs	r3, #4
 8000790:	0112      	lsls	r2, r2, #4
 8000792:	b2d2      	uxtb	r2, r2
 8000794:	440b      	add	r3, r1
 8000796:	761a      	strb	r2, [r3, #24]
}
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	e000e100 	.word	0xe000e100
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b089      	sub	sp, #36	; 0x24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f003 0307 	and.w	r3, r3, #7
 80007be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	f1c3 0307 	rsb	r3, r3, #7
 80007c6:	2b04      	cmp	r3, #4
 80007c8:	bf28      	it	cs
 80007ca:	2304      	movcs	r3, #4
 80007cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	3304      	adds	r3, #4
 80007d2:	2b06      	cmp	r3, #6
 80007d4:	d902      	bls.n	80007dc <NVIC_EncodePriority+0x30>
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3b03      	subs	r3, #3
 80007da:	e000      	b.n	80007de <NVIC_EncodePriority+0x32>
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e0:	f04f 32ff 	mov.w	r2, #4294967295
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ea:	43da      	mvns	r2, r3
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	401a      	ands	r2, r3
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007f4:	f04f 31ff 	mov.w	r1, #4294967295
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	fa01 f303 	lsl.w	r3, r1, r3
 80007fe:	43d9      	mvns	r1, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000804:	4313      	orrs	r3, r2
         );
}
 8000806:	4618      	mov	r0, r3
 8000808:	3724      	adds	r7, #36	; 0x24
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr

08000810 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f7ff ff4f 	bl	80006bc <__NVIC_SetPriorityGrouping>
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000826:	b580      	push	{r7, lr}
 8000828:	b086      	sub	sp, #24
 800082a:	af00      	add	r7, sp, #0
 800082c:	4603      	mov	r3, r0
 800082e:	60b9      	str	r1, [r7, #8]
 8000830:	607a      	str	r2, [r7, #4]
 8000832:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000838:	f7ff ff64 	bl	8000704 <__NVIC_GetPriorityGrouping>
 800083c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	68b9      	ldr	r1, [r7, #8]
 8000842:	6978      	ldr	r0, [r7, #20]
 8000844:	f7ff ffb2 	bl	80007ac <NVIC_EncodePriority>
 8000848:	4602      	mov	r2, r0
 800084a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800084e:	4611      	mov	r1, r2
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff81 	bl	8000758 <__NVIC_SetPriority>
}
 8000856:	bf00      	nop
 8000858:	3718      	adds	r7, #24
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	b082      	sub	sp, #8
 8000862:	af00      	add	r7, sp, #0
 8000864:	4603      	mov	r3, r0
 8000866:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff ff57 	bl	8000720 <__NVIC_EnableIRQ>
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800087c:	b480      	push	{r7}
 800087e:	b08b      	sub	sp, #44	; 0x2c
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800088a:	2300      	movs	r3, #0
 800088c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800088e:	e169      	b.n	8000b64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000890:	2201      	movs	r2, #1
 8000892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000894:	fa02 f303 	lsl.w	r3, r2, r3
 8000898:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	69fa      	ldr	r2, [r7, #28]
 80008a0:	4013      	ands	r3, r2
 80008a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008a4:	69ba      	ldr	r2, [r7, #24]
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	f040 8158 	bne.w	8000b5e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	4a9a      	ldr	r2, [pc, #616]	; (8000b1c <HAL_GPIO_Init+0x2a0>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d05e      	beq.n	8000976 <HAL_GPIO_Init+0xfa>
 80008b8:	4a98      	ldr	r2, [pc, #608]	; (8000b1c <HAL_GPIO_Init+0x2a0>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d875      	bhi.n	80009aa <HAL_GPIO_Init+0x12e>
 80008be:	4a98      	ldr	r2, [pc, #608]	; (8000b20 <HAL_GPIO_Init+0x2a4>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d058      	beq.n	8000976 <HAL_GPIO_Init+0xfa>
 80008c4:	4a96      	ldr	r2, [pc, #600]	; (8000b20 <HAL_GPIO_Init+0x2a4>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d86f      	bhi.n	80009aa <HAL_GPIO_Init+0x12e>
 80008ca:	4a96      	ldr	r2, [pc, #600]	; (8000b24 <HAL_GPIO_Init+0x2a8>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d052      	beq.n	8000976 <HAL_GPIO_Init+0xfa>
 80008d0:	4a94      	ldr	r2, [pc, #592]	; (8000b24 <HAL_GPIO_Init+0x2a8>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d869      	bhi.n	80009aa <HAL_GPIO_Init+0x12e>
 80008d6:	4a94      	ldr	r2, [pc, #592]	; (8000b28 <HAL_GPIO_Init+0x2ac>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d04c      	beq.n	8000976 <HAL_GPIO_Init+0xfa>
 80008dc:	4a92      	ldr	r2, [pc, #584]	; (8000b28 <HAL_GPIO_Init+0x2ac>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d863      	bhi.n	80009aa <HAL_GPIO_Init+0x12e>
 80008e2:	4a92      	ldr	r2, [pc, #584]	; (8000b2c <HAL_GPIO_Init+0x2b0>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d046      	beq.n	8000976 <HAL_GPIO_Init+0xfa>
 80008e8:	4a90      	ldr	r2, [pc, #576]	; (8000b2c <HAL_GPIO_Init+0x2b0>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d85d      	bhi.n	80009aa <HAL_GPIO_Init+0x12e>
 80008ee:	2b12      	cmp	r3, #18
 80008f0:	d82a      	bhi.n	8000948 <HAL_GPIO_Init+0xcc>
 80008f2:	2b12      	cmp	r3, #18
 80008f4:	d859      	bhi.n	80009aa <HAL_GPIO_Init+0x12e>
 80008f6:	a201      	add	r2, pc, #4	; (adr r2, 80008fc <HAL_GPIO_Init+0x80>)
 80008f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008fc:	08000977 	.word	0x08000977
 8000900:	08000951 	.word	0x08000951
 8000904:	08000963 	.word	0x08000963
 8000908:	080009a5 	.word	0x080009a5
 800090c:	080009ab 	.word	0x080009ab
 8000910:	080009ab 	.word	0x080009ab
 8000914:	080009ab 	.word	0x080009ab
 8000918:	080009ab 	.word	0x080009ab
 800091c:	080009ab 	.word	0x080009ab
 8000920:	080009ab 	.word	0x080009ab
 8000924:	080009ab 	.word	0x080009ab
 8000928:	080009ab 	.word	0x080009ab
 800092c:	080009ab 	.word	0x080009ab
 8000930:	080009ab 	.word	0x080009ab
 8000934:	080009ab 	.word	0x080009ab
 8000938:	080009ab 	.word	0x080009ab
 800093c:	080009ab 	.word	0x080009ab
 8000940:	08000959 	.word	0x08000959
 8000944:	0800096d 	.word	0x0800096d
 8000948:	4a79      	ldr	r2, [pc, #484]	; (8000b30 <HAL_GPIO_Init+0x2b4>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d013      	beq.n	8000976 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800094e:	e02c      	b.n	80009aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	623b      	str	r3, [r7, #32]
          break;
 8000956:	e029      	b.n	80009ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	3304      	adds	r3, #4
 800095e:	623b      	str	r3, [r7, #32]
          break;
 8000960:	e024      	b.n	80009ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	68db      	ldr	r3, [r3, #12]
 8000966:	3308      	adds	r3, #8
 8000968:	623b      	str	r3, [r7, #32]
          break;
 800096a:	e01f      	b.n	80009ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	330c      	adds	r3, #12
 8000972:	623b      	str	r3, [r7, #32]
          break;
 8000974:	e01a      	b.n	80009ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	689b      	ldr	r3, [r3, #8]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d102      	bne.n	8000984 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800097e:	2304      	movs	r3, #4
 8000980:	623b      	str	r3, [r7, #32]
          break;
 8000982:	e013      	b.n	80009ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d105      	bne.n	8000998 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800098c:	2308      	movs	r3, #8
 800098e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	69fa      	ldr	r2, [r7, #28]
 8000994:	611a      	str	r2, [r3, #16]
          break;
 8000996:	e009      	b.n	80009ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000998:	2308      	movs	r3, #8
 800099a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	69fa      	ldr	r2, [r7, #28]
 80009a0:	615a      	str	r2, [r3, #20]
          break;
 80009a2:	e003      	b.n	80009ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009a4:	2300      	movs	r3, #0
 80009a6:	623b      	str	r3, [r7, #32]
          break;
 80009a8:	e000      	b.n	80009ac <HAL_GPIO_Init+0x130>
          break;
 80009aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	2bff      	cmp	r3, #255	; 0xff
 80009b0:	d801      	bhi.n	80009b6 <HAL_GPIO_Init+0x13a>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	e001      	b.n	80009ba <HAL_GPIO_Init+0x13e>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	3304      	adds	r3, #4
 80009ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	2bff      	cmp	r3, #255	; 0xff
 80009c0:	d802      	bhi.n	80009c8 <HAL_GPIO_Init+0x14c>
 80009c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	e002      	b.n	80009ce <HAL_GPIO_Init+0x152>
 80009c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ca:	3b08      	subs	r3, #8
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	210f      	movs	r1, #15
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	fa01 f303 	lsl.w	r3, r1, r3
 80009dc:	43db      	mvns	r3, r3
 80009de:	401a      	ands	r2, r3
 80009e0:	6a39      	ldr	r1, [r7, #32]
 80009e2:	693b      	ldr	r3, [r7, #16]
 80009e4:	fa01 f303 	lsl.w	r3, r1, r3
 80009e8:	431a      	orrs	r2, r3
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	f000 80b1 	beq.w	8000b5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009fc:	4b4d      	ldr	r3, [pc, #308]	; (8000b34 <HAL_GPIO_Init+0x2b8>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	4a4c      	ldr	r2, [pc, #304]	; (8000b34 <HAL_GPIO_Init+0x2b8>)
 8000a02:	f043 0301 	orr.w	r3, r3, #1
 8000a06:	6193      	str	r3, [r2, #24]
 8000a08:	4b4a      	ldr	r3, [pc, #296]	; (8000b34 <HAL_GPIO_Init+0x2b8>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	f003 0301 	and.w	r3, r3, #1
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a14:	4a48      	ldr	r2, [pc, #288]	; (8000b38 <HAL_GPIO_Init+0x2bc>)
 8000a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a18:	089b      	lsrs	r3, r3, #2
 8000a1a:	3302      	adds	r3, #2
 8000a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a24:	f003 0303 	and.w	r3, r3, #3
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	220f      	movs	r2, #15
 8000a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a30:	43db      	mvns	r3, r3
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	4013      	ands	r3, r2
 8000a36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4a40      	ldr	r2, [pc, #256]	; (8000b3c <HAL_GPIO_Init+0x2c0>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d013      	beq.n	8000a68 <HAL_GPIO_Init+0x1ec>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a3f      	ldr	r2, [pc, #252]	; (8000b40 <HAL_GPIO_Init+0x2c4>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d00d      	beq.n	8000a64 <HAL_GPIO_Init+0x1e8>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a3e      	ldr	r2, [pc, #248]	; (8000b44 <HAL_GPIO_Init+0x2c8>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d007      	beq.n	8000a60 <HAL_GPIO_Init+0x1e4>
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a3d      	ldr	r2, [pc, #244]	; (8000b48 <HAL_GPIO_Init+0x2cc>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d101      	bne.n	8000a5c <HAL_GPIO_Init+0x1e0>
 8000a58:	2303      	movs	r3, #3
 8000a5a:	e006      	b.n	8000a6a <HAL_GPIO_Init+0x1ee>
 8000a5c:	2304      	movs	r3, #4
 8000a5e:	e004      	b.n	8000a6a <HAL_GPIO_Init+0x1ee>
 8000a60:	2302      	movs	r3, #2
 8000a62:	e002      	b.n	8000a6a <HAL_GPIO_Init+0x1ee>
 8000a64:	2301      	movs	r3, #1
 8000a66:	e000      	b.n	8000a6a <HAL_GPIO_Init+0x1ee>
 8000a68:	2300      	movs	r3, #0
 8000a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a6c:	f002 0203 	and.w	r2, r2, #3
 8000a70:	0092      	lsls	r2, r2, #2
 8000a72:	4093      	lsls	r3, r2
 8000a74:	68fa      	ldr	r2, [r7, #12]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a7a:	492f      	ldr	r1, [pc, #188]	; (8000b38 <HAL_GPIO_Init+0x2bc>)
 8000a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a7e:	089b      	lsrs	r3, r3, #2
 8000a80:	3302      	adds	r3, #2
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d006      	beq.n	8000aa2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a94:	4b2d      	ldr	r3, [pc, #180]	; (8000b4c <HAL_GPIO_Init+0x2d0>)
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	492c      	ldr	r1, [pc, #176]	; (8000b4c <HAL_GPIO_Init+0x2d0>)
 8000a9a:	69bb      	ldr	r3, [r7, #24]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	600b      	str	r3, [r1, #0]
 8000aa0:	e006      	b.n	8000ab0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000aa2:	4b2a      	ldr	r3, [pc, #168]	; (8000b4c <HAL_GPIO_Init+0x2d0>)
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	4928      	ldr	r1, [pc, #160]	; (8000b4c <HAL_GPIO_Init+0x2d0>)
 8000aac:	4013      	ands	r3, r2
 8000aae:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d006      	beq.n	8000aca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000abc:	4b23      	ldr	r3, [pc, #140]	; (8000b4c <HAL_GPIO_Init+0x2d0>)
 8000abe:	685a      	ldr	r2, [r3, #4]
 8000ac0:	4922      	ldr	r1, [pc, #136]	; (8000b4c <HAL_GPIO_Init+0x2d0>)
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	604b      	str	r3, [r1, #4]
 8000ac8:	e006      	b.n	8000ad8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000aca:	4b20      	ldr	r3, [pc, #128]	; (8000b4c <HAL_GPIO_Init+0x2d0>)
 8000acc:	685a      	ldr	r2, [r3, #4]
 8000ace:	69bb      	ldr	r3, [r7, #24]
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	491e      	ldr	r1, [pc, #120]	; (8000b4c <HAL_GPIO_Init+0x2d0>)
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d006      	beq.n	8000af2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ae4:	4b19      	ldr	r3, [pc, #100]	; (8000b4c <HAL_GPIO_Init+0x2d0>)
 8000ae6:	689a      	ldr	r2, [r3, #8]
 8000ae8:	4918      	ldr	r1, [pc, #96]	; (8000b4c <HAL_GPIO_Init+0x2d0>)
 8000aea:	69bb      	ldr	r3, [r7, #24]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	608b      	str	r3, [r1, #8]
 8000af0:	e006      	b.n	8000b00 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000af2:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <HAL_GPIO_Init+0x2d0>)
 8000af4:	689a      	ldr	r2, [r3, #8]
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	43db      	mvns	r3, r3
 8000afa:	4914      	ldr	r1, [pc, #80]	; (8000b4c <HAL_GPIO_Init+0x2d0>)
 8000afc:	4013      	ands	r3, r2
 8000afe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d021      	beq.n	8000b50 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <HAL_GPIO_Init+0x2d0>)
 8000b0e:	68da      	ldr	r2, [r3, #12]
 8000b10:	490e      	ldr	r1, [pc, #56]	; (8000b4c <HAL_GPIO_Init+0x2d0>)
 8000b12:	69bb      	ldr	r3, [r7, #24]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	60cb      	str	r3, [r1, #12]
 8000b18:	e021      	b.n	8000b5e <HAL_GPIO_Init+0x2e2>
 8000b1a:	bf00      	nop
 8000b1c:	10320000 	.word	0x10320000
 8000b20:	10310000 	.word	0x10310000
 8000b24:	10220000 	.word	0x10220000
 8000b28:	10210000 	.word	0x10210000
 8000b2c:	10120000 	.word	0x10120000
 8000b30:	10110000 	.word	0x10110000
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40010000 	.word	0x40010000
 8000b3c:	40010800 	.word	0x40010800
 8000b40:	40010c00 	.word	0x40010c00
 8000b44:	40011000 	.word	0x40011000
 8000b48:	40011400 	.word	0x40011400
 8000b4c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b50:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <HAL_GPIO_Init+0x304>)
 8000b52:	68da      	ldr	r2, [r3, #12]
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	43db      	mvns	r3, r3
 8000b58:	4909      	ldr	r1, [pc, #36]	; (8000b80 <HAL_GPIO_Init+0x304>)
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b60:	3301      	adds	r3, #1
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f47f ae8e 	bne.w	8000890 <HAL_GPIO_Init+0x14>
  }
}
 8000b74:	bf00      	nop
 8000b76:	bf00      	nop
 8000b78:	372c      	adds	r7, #44	; 0x2c
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr
 8000b80:	40010400 	.word	0x40010400

08000b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	460b      	mov	r3, r1
 8000b8e:	807b      	strh	r3, [r7, #2]
 8000b90:	4613      	mov	r3, r2
 8000b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b94:	787b      	ldrb	r3, [r7, #1]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d003      	beq.n	8000ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b9a:	887a      	ldrh	r2, [r7, #2]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ba0:	e003      	b.n	8000baa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ba2:	887b      	ldrh	r3, [r7, #2]
 8000ba4:	041a      	lsls	r2, r3, #16
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	611a      	str	r2, [r3, #16]
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr

08000bb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d101      	bne.n	8000bc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e26c      	b.n	80010a0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	f000 8087 	beq.w	8000ce2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bd4:	4b92      	ldr	r3, [pc, #584]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f003 030c 	and.w	r3, r3, #12
 8000bdc:	2b04      	cmp	r3, #4
 8000bde:	d00c      	beq.n	8000bfa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000be0:	4b8f      	ldr	r3, [pc, #572]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f003 030c 	and.w	r3, r3, #12
 8000be8:	2b08      	cmp	r3, #8
 8000bea:	d112      	bne.n	8000c12 <HAL_RCC_OscConfig+0x5e>
 8000bec:	4b8c      	ldr	r3, [pc, #560]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bf8:	d10b      	bne.n	8000c12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bfa:	4b89      	ldr	r3, [pc, #548]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d06c      	beq.n	8000ce0 <HAL_RCC_OscConfig+0x12c>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d168      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e246      	b.n	80010a0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c1a:	d106      	bne.n	8000c2a <HAL_RCC_OscConfig+0x76>
 8000c1c:	4b80      	ldr	r3, [pc, #512]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a7f      	ldr	r2, [pc, #508]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c26:	6013      	str	r3, [r2, #0]
 8000c28:	e02e      	b.n	8000c88 <HAL_RCC_OscConfig+0xd4>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d10c      	bne.n	8000c4c <HAL_RCC_OscConfig+0x98>
 8000c32:	4b7b      	ldr	r3, [pc, #492]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a7a      	ldr	r2, [pc, #488]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c3c:	6013      	str	r3, [r2, #0]
 8000c3e:	4b78      	ldr	r3, [pc, #480]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a77      	ldr	r2, [pc, #476]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c48:	6013      	str	r3, [r2, #0]
 8000c4a:	e01d      	b.n	8000c88 <HAL_RCC_OscConfig+0xd4>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c54:	d10c      	bne.n	8000c70 <HAL_RCC_OscConfig+0xbc>
 8000c56:	4b72      	ldr	r3, [pc, #456]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a71      	ldr	r2, [pc, #452]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c60:	6013      	str	r3, [r2, #0]
 8000c62:	4b6f      	ldr	r3, [pc, #444]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a6e      	ldr	r2, [pc, #440]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c6c:	6013      	str	r3, [r2, #0]
 8000c6e:	e00b      	b.n	8000c88 <HAL_RCC_OscConfig+0xd4>
 8000c70:	4b6b      	ldr	r3, [pc, #428]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a6a      	ldr	r2, [pc, #424]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c7a:	6013      	str	r3, [r2, #0]
 8000c7c:	4b68      	ldr	r3, [pc, #416]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a67      	ldr	r2, [pc, #412]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d013      	beq.n	8000cb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c90:	f7ff fd0a 	bl	80006a8 <HAL_GetTick>
 8000c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c96:	e008      	b.n	8000caa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c98:	f7ff fd06 	bl	80006a8 <HAL_GetTick>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	2b64      	cmp	r3, #100	; 0x64
 8000ca4:	d901      	bls.n	8000caa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	e1fa      	b.n	80010a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000caa:	4b5d      	ldr	r3, [pc, #372]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d0f0      	beq.n	8000c98 <HAL_RCC_OscConfig+0xe4>
 8000cb6:	e014      	b.n	8000ce2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cb8:	f7ff fcf6 	bl	80006a8 <HAL_GetTick>
 8000cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cbe:	e008      	b.n	8000cd2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cc0:	f7ff fcf2 	bl	80006a8 <HAL_GetTick>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	2b64      	cmp	r3, #100	; 0x64
 8000ccc:	d901      	bls.n	8000cd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	e1e6      	b.n	80010a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cd2:	4b53      	ldr	r3, [pc, #332]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d1f0      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x10c>
 8000cde:	e000      	b.n	8000ce2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d063      	beq.n	8000db6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cee:	4b4c      	ldr	r3, [pc, #304]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f003 030c 	and.w	r3, r3, #12
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d00b      	beq.n	8000d12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cfa:	4b49      	ldr	r3, [pc, #292]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f003 030c 	and.w	r3, r3, #12
 8000d02:	2b08      	cmp	r3, #8
 8000d04:	d11c      	bne.n	8000d40 <HAL_RCC_OscConfig+0x18c>
 8000d06:	4b46      	ldr	r3, [pc, #280]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d116      	bne.n	8000d40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d12:	4b43      	ldr	r3, [pc, #268]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d005      	beq.n	8000d2a <HAL_RCC_OscConfig+0x176>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	691b      	ldr	r3, [r3, #16]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d001      	beq.n	8000d2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e1ba      	b.n	80010a0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d2a:	4b3d      	ldr	r3, [pc, #244]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	695b      	ldr	r3, [r3, #20]
 8000d36:	00db      	lsls	r3, r3, #3
 8000d38:	4939      	ldr	r1, [pc, #228]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d3e:	e03a      	b.n	8000db6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	691b      	ldr	r3, [r3, #16]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d020      	beq.n	8000d8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d48:	4b36      	ldr	r3, [pc, #216]	; (8000e24 <HAL_RCC_OscConfig+0x270>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d4e:	f7ff fcab 	bl	80006a8 <HAL_GetTick>
 8000d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d54:	e008      	b.n	8000d68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d56:	f7ff fca7 	bl	80006a8 <HAL_GetTick>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	1ad3      	subs	r3, r2, r3
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d901      	bls.n	8000d68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d64:	2303      	movs	r3, #3
 8000d66:	e19b      	b.n	80010a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d68:	4b2d      	ldr	r3, [pc, #180]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f003 0302 	and.w	r3, r3, #2
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d0f0      	beq.n	8000d56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d74:	4b2a      	ldr	r3, [pc, #168]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	695b      	ldr	r3, [r3, #20]
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	4927      	ldr	r1, [pc, #156]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000d84:	4313      	orrs	r3, r2
 8000d86:	600b      	str	r3, [r1, #0]
 8000d88:	e015      	b.n	8000db6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d8a:	4b26      	ldr	r3, [pc, #152]	; (8000e24 <HAL_RCC_OscConfig+0x270>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d90:	f7ff fc8a 	bl	80006a8 <HAL_GetTick>
 8000d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d96:	e008      	b.n	8000daa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d98:	f7ff fc86 	bl	80006a8 <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d901      	bls.n	8000daa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000da6:	2303      	movs	r3, #3
 8000da8:	e17a      	b.n	80010a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000daa:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d1f0      	bne.n	8000d98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f003 0308 	and.w	r3, r3, #8
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d03a      	beq.n	8000e38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	699b      	ldr	r3, [r3, #24]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d019      	beq.n	8000dfe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dca:	4b17      	ldr	r3, [pc, #92]	; (8000e28 <HAL_RCC_OscConfig+0x274>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dd0:	f7ff fc6a 	bl	80006a8 <HAL_GetTick>
 8000dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dd6:	e008      	b.n	8000dea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dd8:	f7ff fc66 	bl	80006a8 <HAL_GetTick>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d901      	bls.n	8000dea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000de6:	2303      	movs	r3, #3
 8000de8:	e15a      	b.n	80010a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dea:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d0f0      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000df6:	2001      	movs	r0, #1
 8000df8:	f000 fb08 	bl	800140c <RCC_Delay>
 8000dfc:	e01c      	b.n	8000e38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <HAL_RCC_OscConfig+0x274>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e04:	f7ff fc50 	bl	80006a8 <HAL_GetTick>
 8000e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e0a:	e00f      	b.n	8000e2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e0c:	f7ff fc4c 	bl	80006a8 <HAL_GetTick>
 8000e10:	4602      	mov	r2, r0
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d908      	bls.n	8000e2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	e140      	b.n	80010a0 <HAL_RCC_OscConfig+0x4ec>
 8000e1e:	bf00      	nop
 8000e20:	40021000 	.word	0x40021000
 8000e24:	42420000 	.word	0x42420000
 8000e28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e2c:	4b9e      	ldr	r3, [pc, #632]	; (80010a8 <HAL_RCC_OscConfig+0x4f4>)
 8000e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e30:	f003 0302 	and.w	r3, r3, #2
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d1e9      	bne.n	8000e0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f003 0304 	and.w	r3, r3, #4
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	f000 80a6 	beq.w	8000f92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e46:	2300      	movs	r3, #0
 8000e48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e4a:	4b97      	ldr	r3, [pc, #604]	; (80010a8 <HAL_RCC_OscConfig+0x4f4>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d10d      	bne.n	8000e72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e56:	4b94      	ldr	r3, [pc, #592]	; (80010a8 <HAL_RCC_OscConfig+0x4f4>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	4a93      	ldr	r2, [pc, #588]	; (80010a8 <HAL_RCC_OscConfig+0x4f4>)
 8000e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e60:	61d3      	str	r3, [r2, #28]
 8000e62:	4b91      	ldr	r3, [pc, #580]	; (80010a8 <HAL_RCC_OscConfig+0x4f4>)
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e72:	4b8e      	ldr	r3, [pc, #568]	; (80010ac <HAL_RCC_OscConfig+0x4f8>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d118      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e7e:	4b8b      	ldr	r3, [pc, #556]	; (80010ac <HAL_RCC_OscConfig+0x4f8>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a8a      	ldr	r2, [pc, #552]	; (80010ac <HAL_RCC_OscConfig+0x4f8>)
 8000e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e8a:	f7ff fc0d 	bl	80006a8 <HAL_GetTick>
 8000e8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e90:	e008      	b.n	8000ea4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e92:	f7ff fc09 	bl	80006a8 <HAL_GetTick>
 8000e96:	4602      	mov	r2, r0
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	2b64      	cmp	r3, #100	; 0x64
 8000e9e:	d901      	bls.n	8000ea4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	e0fd      	b.n	80010a0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ea4:	4b81      	ldr	r3, [pc, #516]	; (80010ac <HAL_RCC_OscConfig+0x4f8>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d0f0      	beq.n	8000e92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d106      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x312>
 8000eb8:	4b7b      	ldr	r3, [pc, #492]	; (80010a8 <HAL_RCC_OscConfig+0x4f4>)
 8000eba:	6a1b      	ldr	r3, [r3, #32]
 8000ebc:	4a7a      	ldr	r2, [pc, #488]	; (80010a8 <HAL_RCC_OscConfig+0x4f4>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	6213      	str	r3, [r2, #32]
 8000ec4:	e02d      	b.n	8000f22 <HAL_RCC_OscConfig+0x36e>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	68db      	ldr	r3, [r3, #12]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d10c      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x334>
 8000ece:	4b76      	ldr	r3, [pc, #472]	; (80010a8 <HAL_RCC_OscConfig+0x4f4>)
 8000ed0:	6a1b      	ldr	r3, [r3, #32]
 8000ed2:	4a75      	ldr	r2, [pc, #468]	; (80010a8 <HAL_RCC_OscConfig+0x4f4>)
 8000ed4:	f023 0301 	bic.w	r3, r3, #1
 8000ed8:	6213      	str	r3, [r2, #32]
 8000eda:	4b73      	ldr	r3, [pc, #460]	; (80010a8 <HAL_RCC_OscConfig+0x4f4>)
 8000edc:	6a1b      	ldr	r3, [r3, #32]
 8000ede:	4a72      	ldr	r2, [pc, #456]	; (80010a8 <HAL_RCC_OscConfig+0x4f4>)
 8000ee0:	f023 0304 	bic.w	r3, r3, #4
 8000ee4:	6213      	str	r3, [r2, #32]
 8000ee6:	e01c      	b.n	8000f22 <HAL_RCC_OscConfig+0x36e>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	2b05      	cmp	r3, #5
 8000eee:	d10c      	bne.n	8000f0a <HAL_RCC_OscConfig+0x356>
 8000ef0:	4b6d      	ldr	r3, [pc, #436]	; (80010a8 <HAL_RCC_OscConfig+0x4f4>)
 8000ef2:	6a1b      	ldr	r3, [r3, #32]
 8000ef4:	4a6c      	ldr	r2, [pc, #432]	; (80010a8 <HAL_RCC_OscConfig+0x4f4>)
 8000ef6:	f043 0304 	orr.w	r3, r3, #4
 8000efa:	6213      	str	r3, [r2, #32]
 8000efc:	4b6a      	ldr	r3, [pc, #424]	; (80010a8 <HAL_RCC_OscConfig+0x4f4>)
 8000efe:	6a1b      	ldr	r3, [r3, #32]
 8000f00:	4a69      	ldr	r2, [pc, #420]	; (80010a8 <HAL_RCC_OscConfig+0x4f4>)
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	6213      	str	r3, [r2, #32]
 8000f08:	e00b      	b.n	8000f22 <HAL_RCC_OscConfig+0x36e>
 8000f0a:	4b67      	ldr	r3, [pc, #412]	; (80010a8 <HAL_RCC_OscConfig+0x4f4>)
 8000f0c:	6a1b      	ldr	r3, [r3, #32]
 8000f0e:	4a66      	ldr	r2, [pc, #408]	; (80010a8 <HAL_RCC_OscConfig+0x4f4>)
 8000f10:	f023 0301 	bic.w	r3, r3, #1
 8000f14:	6213      	str	r3, [r2, #32]
 8000f16:	4b64      	ldr	r3, [pc, #400]	; (80010a8 <HAL_RCC_OscConfig+0x4f4>)
 8000f18:	6a1b      	ldr	r3, [r3, #32]
 8000f1a:	4a63      	ldr	r2, [pc, #396]	; (80010a8 <HAL_RCC_OscConfig+0x4f4>)
 8000f1c:	f023 0304 	bic.w	r3, r3, #4
 8000f20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d015      	beq.n	8000f56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f2a:	f7ff fbbd 	bl	80006a8 <HAL_GetTick>
 8000f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f30:	e00a      	b.n	8000f48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f32:	f7ff fbb9 	bl	80006a8 <HAL_GetTick>
 8000f36:	4602      	mov	r2, r0
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d901      	bls.n	8000f48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f44:	2303      	movs	r3, #3
 8000f46:	e0ab      	b.n	80010a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f48:	4b57      	ldr	r3, [pc, #348]	; (80010a8 <HAL_RCC_OscConfig+0x4f4>)
 8000f4a:	6a1b      	ldr	r3, [r3, #32]
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d0ee      	beq.n	8000f32 <HAL_RCC_OscConfig+0x37e>
 8000f54:	e014      	b.n	8000f80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f56:	f7ff fba7 	bl	80006a8 <HAL_GetTick>
 8000f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f5c:	e00a      	b.n	8000f74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f5e:	f7ff fba3 	bl	80006a8 <HAL_GetTick>
 8000f62:	4602      	mov	r2, r0
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d901      	bls.n	8000f74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f70:	2303      	movs	r3, #3
 8000f72:	e095      	b.n	80010a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f74:	4b4c      	ldr	r3, [pc, #304]	; (80010a8 <HAL_RCC_OscConfig+0x4f4>)
 8000f76:	6a1b      	ldr	r3, [r3, #32]
 8000f78:	f003 0302 	and.w	r3, r3, #2
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1ee      	bne.n	8000f5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f80:	7dfb      	ldrb	r3, [r7, #23]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d105      	bne.n	8000f92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f86:	4b48      	ldr	r3, [pc, #288]	; (80010a8 <HAL_RCC_OscConfig+0x4f4>)
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	4a47      	ldr	r2, [pc, #284]	; (80010a8 <HAL_RCC_OscConfig+0x4f4>)
 8000f8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f000 8081 	beq.w	800109e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f9c:	4b42      	ldr	r3, [pc, #264]	; (80010a8 <HAL_RCC_OscConfig+0x4f4>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 030c 	and.w	r3, r3, #12
 8000fa4:	2b08      	cmp	r3, #8
 8000fa6:	d061      	beq.n	800106c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	69db      	ldr	r3, [r3, #28]
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d146      	bne.n	800103e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fb0:	4b3f      	ldr	r3, [pc, #252]	; (80010b0 <HAL_RCC_OscConfig+0x4fc>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb6:	f7ff fb77 	bl	80006a8 <HAL_GetTick>
 8000fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fbc:	e008      	b.n	8000fd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fbe:	f7ff fb73 	bl	80006a8 <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d901      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	e067      	b.n	80010a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fd0:	4b35      	ldr	r3, [pc, #212]	; (80010a8 <HAL_RCC_OscConfig+0x4f4>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1f0      	bne.n	8000fbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6a1b      	ldr	r3, [r3, #32]
 8000fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fe4:	d108      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fe6:	4b30      	ldr	r3, [pc, #192]	; (80010a8 <HAL_RCC_OscConfig+0x4f4>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	492d      	ldr	r1, [pc, #180]	; (80010a8 <HAL_RCC_OscConfig+0x4f4>)
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ff8:	4b2b      	ldr	r3, [pc, #172]	; (80010a8 <HAL_RCC_OscConfig+0x4f4>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6a19      	ldr	r1, [r3, #32]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001008:	430b      	orrs	r3, r1
 800100a:	4927      	ldr	r1, [pc, #156]	; (80010a8 <HAL_RCC_OscConfig+0x4f4>)
 800100c:	4313      	orrs	r3, r2
 800100e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001010:	4b27      	ldr	r3, [pc, #156]	; (80010b0 <HAL_RCC_OscConfig+0x4fc>)
 8001012:	2201      	movs	r2, #1
 8001014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001016:	f7ff fb47 	bl	80006a8 <HAL_GetTick>
 800101a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800101c:	e008      	b.n	8001030 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800101e:	f7ff fb43 	bl	80006a8 <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d901      	bls.n	8001030 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e037      	b.n	80010a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001030:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <HAL_RCC_OscConfig+0x4f4>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d0f0      	beq.n	800101e <HAL_RCC_OscConfig+0x46a>
 800103c:	e02f      	b.n	800109e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800103e:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <HAL_RCC_OscConfig+0x4fc>)
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001044:	f7ff fb30 	bl	80006a8 <HAL_GetTick>
 8001048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800104a:	e008      	b.n	800105e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800104c:	f7ff fb2c 	bl	80006a8 <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	2b02      	cmp	r3, #2
 8001058:	d901      	bls.n	800105e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800105a:	2303      	movs	r3, #3
 800105c:	e020      	b.n	80010a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800105e:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_RCC_OscConfig+0x4f4>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1f0      	bne.n	800104c <HAL_RCC_OscConfig+0x498>
 800106a:	e018      	b.n	800109e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	69db      	ldr	r3, [r3, #28]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d101      	bne.n	8001078 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e013      	b.n	80010a0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001078:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <HAL_RCC_OscConfig+0x4f4>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a1b      	ldr	r3, [r3, #32]
 8001088:	429a      	cmp	r2, r3
 800108a:	d106      	bne.n	800109a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001096:	429a      	cmp	r2, r3
 8001098:	d001      	beq.n	800109e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e000      	b.n	80010a0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800109e:	2300      	movs	r3, #0
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40021000 	.word	0x40021000
 80010ac:	40007000 	.word	0x40007000
 80010b0:	42420060 	.word	0x42420060

080010b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d101      	bne.n	80010c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e0d0      	b.n	800126a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010c8:	4b6a      	ldr	r3, [pc, #424]	; (8001274 <HAL_RCC_ClockConfig+0x1c0>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 0307 	and.w	r3, r3, #7
 80010d0:	683a      	ldr	r2, [r7, #0]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d910      	bls.n	80010f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010d6:	4b67      	ldr	r3, [pc, #412]	; (8001274 <HAL_RCC_ClockConfig+0x1c0>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f023 0207 	bic.w	r2, r3, #7
 80010de:	4965      	ldr	r1, [pc, #404]	; (8001274 <HAL_RCC_ClockConfig+0x1c0>)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010e6:	4b63      	ldr	r3, [pc, #396]	; (8001274 <HAL_RCC_ClockConfig+0x1c0>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	683a      	ldr	r2, [r7, #0]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d001      	beq.n	80010f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e0b8      	b.n	800126a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d020      	beq.n	8001146 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0304 	and.w	r3, r3, #4
 800110c:	2b00      	cmp	r3, #0
 800110e:	d005      	beq.n	800111c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001110:	4b59      	ldr	r3, [pc, #356]	; (8001278 <HAL_RCC_ClockConfig+0x1c4>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	4a58      	ldr	r2, [pc, #352]	; (8001278 <HAL_RCC_ClockConfig+0x1c4>)
 8001116:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800111a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0308 	and.w	r3, r3, #8
 8001124:	2b00      	cmp	r3, #0
 8001126:	d005      	beq.n	8001134 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001128:	4b53      	ldr	r3, [pc, #332]	; (8001278 <HAL_RCC_ClockConfig+0x1c4>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	4a52      	ldr	r2, [pc, #328]	; (8001278 <HAL_RCC_ClockConfig+0x1c4>)
 800112e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001132:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001134:	4b50      	ldr	r3, [pc, #320]	; (8001278 <HAL_RCC_ClockConfig+0x1c4>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	494d      	ldr	r1, [pc, #308]	; (8001278 <HAL_RCC_ClockConfig+0x1c4>)
 8001142:	4313      	orrs	r3, r2
 8001144:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	2b00      	cmp	r3, #0
 8001150:	d040      	beq.n	80011d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d107      	bne.n	800116a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115a:	4b47      	ldr	r3, [pc, #284]	; (8001278 <HAL_RCC_ClockConfig+0x1c4>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d115      	bne.n	8001192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e07f      	b.n	800126a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	2b02      	cmp	r3, #2
 8001170:	d107      	bne.n	8001182 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001172:	4b41      	ldr	r3, [pc, #260]	; (8001278 <HAL_RCC_ClockConfig+0x1c4>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d109      	bne.n	8001192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e073      	b.n	800126a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001182:	4b3d      	ldr	r3, [pc, #244]	; (8001278 <HAL_RCC_ClockConfig+0x1c4>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e06b      	b.n	800126a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001192:	4b39      	ldr	r3, [pc, #228]	; (8001278 <HAL_RCC_ClockConfig+0x1c4>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f023 0203 	bic.w	r2, r3, #3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	4936      	ldr	r1, [pc, #216]	; (8001278 <HAL_RCC_ClockConfig+0x1c4>)
 80011a0:	4313      	orrs	r3, r2
 80011a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011a4:	f7ff fa80 	bl	80006a8 <HAL_GetTick>
 80011a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011aa:	e00a      	b.n	80011c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011ac:	f7ff fa7c 	bl	80006a8 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e053      	b.n	800126a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011c2:	4b2d      	ldr	r3, [pc, #180]	; (8001278 <HAL_RCC_ClockConfig+0x1c4>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 020c 	and.w	r2, r3, #12
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d1eb      	bne.n	80011ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011d4:	4b27      	ldr	r3, [pc, #156]	; (8001274 <HAL_RCC_ClockConfig+0x1c0>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0307 	and.w	r3, r3, #7
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d210      	bcs.n	8001204 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011e2:	4b24      	ldr	r3, [pc, #144]	; (8001274 <HAL_RCC_ClockConfig+0x1c0>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f023 0207 	bic.w	r2, r3, #7
 80011ea:	4922      	ldr	r1, [pc, #136]	; (8001274 <HAL_RCC_ClockConfig+0x1c0>)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011f2:	4b20      	ldr	r3, [pc, #128]	; (8001274 <HAL_RCC_ClockConfig+0x1c0>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	683a      	ldr	r2, [r7, #0]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d001      	beq.n	8001204 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e032      	b.n	800126a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0304 	and.w	r3, r3, #4
 800120c:	2b00      	cmp	r3, #0
 800120e:	d008      	beq.n	8001222 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001210:	4b19      	ldr	r3, [pc, #100]	; (8001278 <HAL_RCC_ClockConfig+0x1c4>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	4916      	ldr	r1, [pc, #88]	; (8001278 <HAL_RCC_ClockConfig+0x1c4>)
 800121e:	4313      	orrs	r3, r2
 8001220:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0308 	and.w	r3, r3, #8
 800122a:	2b00      	cmp	r3, #0
 800122c:	d009      	beq.n	8001242 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800122e:	4b12      	ldr	r3, [pc, #72]	; (8001278 <HAL_RCC_ClockConfig+0x1c4>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	490e      	ldr	r1, [pc, #56]	; (8001278 <HAL_RCC_ClockConfig+0x1c4>)
 800123e:	4313      	orrs	r3, r2
 8001240:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001242:	f000 f821 	bl	8001288 <HAL_RCC_GetSysClockFreq>
 8001246:	4602      	mov	r2, r0
 8001248:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <HAL_RCC_ClockConfig+0x1c4>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	091b      	lsrs	r3, r3, #4
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	490a      	ldr	r1, [pc, #40]	; (800127c <HAL_RCC_ClockConfig+0x1c8>)
 8001254:	5ccb      	ldrb	r3, [r1, r3]
 8001256:	fa22 f303 	lsr.w	r3, r2, r3
 800125a:	4a09      	ldr	r2, [pc, #36]	; (8001280 <HAL_RCC_ClockConfig+0x1cc>)
 800125c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <HAL_RCC_ClockConfig+0x1d0>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff f956 	bl	8000514 <HAL_InitTick>

  return HAL_OK;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40022000 	.word	0x40022000
 8001278:	40021000 	.word	0x40021000
 800127c:	08003400 	.word	0x08003400
 8001280:	2000000c 	.word	0x2000000c
 8001284:	20000010 	.word	0x20000010

08001288 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001288:	b490      	push	{r4, r7}
 800128a:	b08a      	sub	sp, #40	; 0x28
 800128c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800128e:	4b2a      	ldr	r3, [pc, #168]	; (8001338 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001290:	1d3c      	adds	r4, r7, #4
 8001292:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001294:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001298:	f240 2301 	movw	r3, #513	; 0x201
 800129c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
 80012a2:	2300      	movs	r3, #0
 80012a4:	61bb      	str	r3, [r7, #24]
 80012a6:	2300      	movs	r3, #0
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012b2:	4b22      	ldr	r3, [pc, #136]	; (800133c <HAL_RCC_GetSysClockFreq+0xb4>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f003 030c 	and.w	r3, r3, #12
 80012be:	2b04      	cmp	r3, #4
 80012c0:	d002      	beq.n	80012c8 <HAL_RCC_GetSysClockFreq+0x40>
 80012c2:	2b08      	cmp	r3, #8
 80012c4:	d003      	beq.n	80012ce <HAL_RCC_GetSysClockFreq+0x46>
 80012c6:	e02d      	b.n	8001324 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012c8:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <HAL_RCC_GetSysClockFreq+0xb8>)
 80012ca:	623b      	str	r3, [r7, #32]
      break;
 80012cc:	e02d      	b.n	800132a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	0c9b      	lsrs	r3, r3, #18
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012da:	4413      	add	r3, r2
 80012dc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80012e0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d013      	beq.n	8001314 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012ec:	4b13      	ldr	r3, [pc, #76]	; (800133c <HAL_RCC_GetSysClockFreq+0xb4>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	0c5b      	lsrs	r3, r3, #17
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012fa:	4413      	add	r3, r2
 80012fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001300:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	4a0e      	ldr	r2, [pc, #56]	; (8001340 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001306:	fb02 f203 	mul.w	r2, r2, r3
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
 8001312:	e004      	b.n	800131e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	4a0b      	ldr	r2, [pc, #44]	; (8001344 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001318:	fb02 f303 	mul.w	r3, r2, r3
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001320:	623b      	str	r3, [r7, #32]
      break;
 8001322:	e002      	b.n	800132a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001326:	623b      	str	r3, [r7, #32]
      break;
 8001328:	bf00      	nop
    }
  }
  return sysclockfreq;
 800132a:	6a3b      	ldr	r3, [r7, #32]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3728      	adds	r7, #40	; 0x28
 8001330:	46bd      	mov	sp, r7
 8001332:	bc90      	pop	{r4, r7}
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	080033e8 	.word	0x080033e8
 800133c:	40021000 	.word	0x40021000
 8001340:	007a1200 	.word	0x007a1200
 8001344:	003d0900 	.word	0x003d0900

08001348 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800134c:	4b02      	ldr	r3, [pc, #8]	; (8001358 <HAL_RCC_GetHCLKFreq+0x10>)
 800134e:	681b      	ldr	r3, [r3, #0]
}
 8001350:	4618      	mov	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr
 8001358:	2000000c 	.word	0x2000000c

0800135c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001360:	f7ff fff2 	bl	8001348 <HAL_RCC_GetHCLKFreq>
 8001364:	4602      	mov	r2, r0
 8001366:	4b05      	ldr	r3, [pc, #20]	; (800137c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	0a1b      	lsrs	r3, r3, #8
 800136c:	f003 0307 	and.w	r3, r3, #7
 8001370:	4903      	ldr	r1, [pc, #12]	; (8001380 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001372:	5ccb      	ldrb	r3, [r1, r3]
 8001374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001378:	4618      	mov	r0, r3
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40021000 	.word	0x40021000
 8001380:	08003410 	.word	0x08003410

08001384 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001388:	f7ff ffde 	bl	8001348 <HAL_RCC_GetHCLKFreq>
 800138c:	4602      	mov	r2, r0
 800138e:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	0adb      	lsrs	r3, r3, #11
 8001394:	f003 0307 	and.w	r3, r3, #7
 8001398:	4903      	ldr	r1, [pc, #12]	; (80013a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800139a:	5ccb      	ldrb	r3, [r1, r3]
 800139c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40021000 	.word	0x40021000
 80013a8:	08003410 	.word	0x08003410

080013ac <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	220f      	movs	r2, #15
 80013ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <HAL_RCC_GetClockConfig+0x58>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 0203 	and.w	r2, r3, #3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013c8:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <HAL_RCC_GetClockConfig+0x58>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <HAL_RCC_GetClockConfig+0x58>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <HAL_RCC_GetClockConfig+0x58>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	08db      	lsrs	r3, r3, #3
 80013e6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_RCC_GetClockConfig+0x5c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0207 	and.w	r2, r3, #7
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr
 8001404:	40021000 	.word	0x40021000
 8001408:	40022000 	.word	0x40022000

0800140c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001414:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <RCC_Delay+0x34>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a0a      	ldr	r2, [pc, #40]	; (8001444 <RCC_Delay+0x38>)
 800141a:	fba2 2303 	umull	r2, r3, r2, r3
 800141e:	0a5b      	lsrs	r3, r3, #9
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	fb02 f303 	mul.w	r3, r2, r3
 8001426:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001428:	bf00      	nop
  }
  while (Delay --);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	1e5a      	subs	r2, r3, #1
 800142e:	60fa      	str	r2, [r7, #12]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1f9      	bne.n	8001428 <RCC_Delay+0x1c>
}
 8001434:	bf00      	nop
 8001436:	bf00      	nop
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr
 8001440:	2000000c 	.word	0x2000000c
 8001444:	10624dd3 	.word	0x10624dd3

08001448 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e041      	b.n	80014de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2b00      	cmp	r3, #0
 8001464:	d106      	bne.n	8001474 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f000 f839 	bl	80014e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2202      	movs	r2, #2
 8001478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3304      	adds	r3, #4
 8001484:	4619      	mov	r1, r3
 8001486:	4610      	mov	r0, r2
 8001488:	f000 f9b4 	bl	80017f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2201      	movs	r2, #1
 80014b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2201      	movs	r2, #1
 80014d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2201      	movs	r2, #1
 80014d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr

080014f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2b01      	cmp	r3, #1
 800150a:	d001      	beq.n	8001510 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e03a      	b.n	8001586 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2202      	movs	r2, #2
 8001514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	68da      	ldr	r2, [r3, #12]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f042 0201 	orr.w	r2, r2, #1
 8001526:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a18      	ldr	r2, [pc, #96]	; (8001590 <HAL_TIM_Base_Start_IT+0x98>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d00e      	beq.n	8001550 <HAL_TIM_Base_Start_IT+0x58>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800153a:	d009      	beq.n	8001550 <HAL_TIM_Base_Start_IT+0x58>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a14      	ldr	r2, [pc, #80]	; (8001594 <HAL_TIM_Base_Start_IT+0x9c>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d004      	beq.n	8001550 <HAL_TIM_Base_Start_IT+0x58>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a13      	ldr	r2, [pc, #76]	; (8001598 <HAL_TIM_Base_Start_IT+0xa0>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d111      	bne.n	8001574 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2b06      	cmp	r3, #6
 8001560:	d010      	beq.n	8001584 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f042 0201 	orr.w	r2, r2, #1
 8001570:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001572:	e007      	b.n	8001584 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f042 0201 	orr.w	r2, r2, #1
 8001582:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr
 8001590:	40012c00 	.word	0x40012c00
 8001594:	40000400 	.word	0x40000400
 8001598:	40000800 	.word	0x40000800

0800159c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d122      	bne.n	80015f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d11b      	bne.n	80015f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f06f 0202 	mvn.w	r2, #2
 80015c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2201      	movs	r2, #1
 80015ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f000 f8ed 	bl	80017be <HAL_TIM_IC_CaptureCallback>
 80015e4:	e005      	b.n	80015f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 f8e0 	bl	80017ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f000 f8ef 	bl	80017d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	2b04      	cmp	r3, #4
 8001604:	d122      	bne.n	800164c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b04      	cmp	r3, #4
 8001612:	d11b      	bne.n	800164c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f06f 0204 	mvn.w	r2, #4
 800161c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2202      	movs	r2, #2
 8001622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 f8c3 	bl	80017be <HAL_TIM_IC_CaptureCallback>
 8001638:	e005      	b.n	8001646 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 f8b6 	bl	80017ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f000 f8c5 	bl	80017d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	2b08      	cmp	r3, #8
 8001658:	d122      	bne.n	80016a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	f003 0308 	and.w	r3, r3, #8
 8001664:	2b08      	cmp	r3, #8
 8001666:	d11b      	bne.n	80016a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f06f 0208 	mvn.w	r2, #8
 8001670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2204      	movs	r2, #4
 8001676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	f003 0303 	and.w	r3, r3, #3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 f899 	bl	80017be <HAL_TIM_IC_CaptureCallback>
 800168c:	e005      	b.n	800169a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 f88c 	bl	80017ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f000 f89b 	bl	80017d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	f003 0310 	and.w	r3, r3, #16
 80016aa:	2b10      	cmp	r3, #16
 80016ac:	d122      	bne.n	80016f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	f003 0310 	and.w	r3, r3, #16
 80016b8:	2b10      	cmp	r3, #16
 80016ba:	d11b      	bne.n	80016f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f06f 0210 	mvn.w	r2, #16
 80016c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2208      	movs	r2, #8
 80016ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 f86f 	bl	80017be <HAL_TIM_IC_CaptureCallback>
 80016e0:	e005      	b.n	80016ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 f862 	bl	80017ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 f871 	bl	80017d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d10e      	bne.n	8001720 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	2b01      	cmp	r3, #1
 800170e:	d107      	bne.n	8001720 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f06f 0201 	mvn.w	r2, #1
 8001718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7fe fe5e 	bl	80003dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800172a:	2b80      	cmp	r3, #128	; 0x80
 800172c:	d10e      	bne.n	800174c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001738:	2b80      	cmp	r3, #128	; 0x80
 800173a:	d107      	bne.n	800174c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 f8bf 	bl	80018ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001756:	2b40      	cmp	r3, #64	; 0x40
 8001758:	d10e      	bne.n	8001778 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001764:	2b40      	cmp	r3, #64	; 0x40
 8001766:	d107      	bne.n	8001778 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 f835 	bl	80017e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	f003 0320 	and.w	r3, r3, #32
 8001782:	2b20      	cmp	r3, #32
 8001784:	d10e      	bne.n	80017a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	f003 0320 	and.w	r3, r3, #32
 8001790:	2b20      	cmp	r3, #32
 8001792:	d107      	bne.n	80017a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f06f 0220 	mvn.w	r2, #32
 800179c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f000 f88a 	bl	80018b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr

080017be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80017be:	b480      	push	{r7}
 80017c0:	b083      	sub	sp, #12
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr

080017e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr

080017f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a29      	ldr	r2, [pc, #164]	; (80018ac <TIM_Base_SetConfig+0xb8>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d00b      	beq.n	8001824 <TIM_Base_SetConfig+0x30>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001812:	d007      	beq.n	8001824 <TIM_Base_SetConfig+0x30>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a26      	ldr	r2, [pc, #152]	; (80018b0 <TIM_Base_SetConfig+0xbc>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d003      	beq.n	8001824 <TIM_Base_SetConfig+0x30>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a25      	ldr	r2, [pc, #148]	; (80018b4 <TIM_Base_SetConfig+0xc0>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d108      	bne.n	8001836 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800182a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	68fa      	ldr	r2, [r7, #12]
 8001832:	4313      	orrs	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a1c      	ldr	r2, [pc, #112]	; (80018ac <TIM_Base_SetConfig+0xb8>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d00b      	beq.n	8001856 <TIM_Base_SetConfig+0x62>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001844:	d007      	beq.n	8001856 <TIM_Base_SetConfig+0x62>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a19      	ldr	r2, [pc, #100]	; (80018b0 <TIM_Base_SetConfig+0xbc>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d003      	beq.n	8001856 <TIM_Base_SetConfig+0x62>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a18      	ldr	r2, [pc, #96]	; (80018b4 <TIM_Base_SetConfig+0xc0>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d108      	bne.n	8001868 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800185c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	4313      	orrs	r3, r2
 8001866:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	4313      	orrs	r3, r2
 8001874:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a07      	ldr	r2, [pc, #28]	; (80018ac <TIM_Base_SetConfig+0xb8>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d103      	bne.n	800189c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	691a      	ldr	r2, [r3, #16]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	615a      	str	r2, [r3, #20]
}
 80018a2:	bf00      	nop
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr
 80018ac:	40012c00 	.word	0x40012c00
 80018b0:	40000400 	.word	0x40000400
 80018b4:	40000800 	.word	0x40000800

080018b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr

080018ca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr

080018dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e03f      	b.n	800196e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d106      	bne.n	8001908 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7fe fdba 	bl	800047c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2224      	movs	r2, #36	; 0x24
 800190c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68da      	ldr	r2, [r3, #12]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800191e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 f9a7 	bl	8001c74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	691a      	ldr	r2, [r3, #16]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001934:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	695a      	ldr	r2, [r3, #20]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001944:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68da      	ldr	r2, [r3, #12]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001954:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2220      	movs	r2, #32
 8001960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2220      	movs	r2, #32
 8001968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b08a      	sub	sp, #40	; 0x28
 800197a:	af02      	add	r7, sp, #8
 800197c:	60f8      	str	r0, [r7, #12]
 800197e:	60b9      	str	r1, [r7, #8]
 8001980:	603b      	str	r3, [r7, #0]
 8001982:	4613      	mov	r3, r2
 8001984:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b20      	cmp	r3, #32
 8001994:	d17c      	bne.n	8001a90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d002      	beq.n	80019a2 <HAL_UART_Transmit+0x2c>
 800199c:	88fb      	ldrh	r3, [r7, #6]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e075      	b.n	8001a92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d101      	bne.n	80019b4 <HAL_UART_Transmit+0x3e>
 80019b0:	2302      	movs	r3, #2
 80019b2:	e06e      	b.n	8001a92 <HAL_UART_Transmit+0x11c>
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2200      	movs	r2, #0
 80019c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2221      	movs	r2, #33	; 0x21
 80019c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80019ca:	f7fe fe6d 	bl	80006a8 <HAL_GetTick>
 80019ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	88fa      	ldrh	r2, [r7, #6]
 80019d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	88fa      	ldrh	r2, [r7, #6]
 80019da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019e4:	d108      	bne.n	80019f8 <HAL_UART_Transmit+0x82>
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d104      	bne.n	80019f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	61bb      	str	r3, [r7, #24]
 80019f6:	e003      	b.n	8001a00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001a08:	e02a      	b.n	8001a60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	2200      	movs	r2, #0
 8001a12:	2180      	movs	r1, #128	; 0x80
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	f000 f8e2 	bl	8001bde <UART_WaitOnFlagUntilTimeout>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e036      	b.n	8001a92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d10b      	bne.n	8001a42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	3302      	adds	r3, #2
 8001a3e:	61bb      	str	r3, [r7, #24]
 8001a40:	e007      	b.n	8001a52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	781a      	ldrb	r2, [r3, #0]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1cf      	bne.n	8001a0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	2200      	movs	r2, #0
 8001a72:	2140      	movs	r1, #64	; 0x40
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f000 f8b2 	bl	8001bde <UART_WaitOnFlagUntilTimeout>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e006      	b.n	8001a92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2220      	movs	r2, #32
 8001a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	e000      	b.n	8001a92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001a90:	2302      	movs	r3, #2
  }
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3720      	adds	r7, #32
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b08a      	sub	sp, #40	; 0x28
 8001a9e:	af02      	add	r7, sp, #8
 8001aa0:	60f8      	str	r0, [r7, #12]
 8001aa2:	60b9      	str	r1, [r7, #8]
 8001aa4:	603b      	str	r3, [r7, #0]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b20      	cmp	r3, #32
 8001ab8:	f040 808c 	bne.w	8001bd4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d002      	beq.n	8001ac8 <HAL_UART_Receive+0x2e>
 8001ac2:	88fb      	ldrh	r3, [r7, #6]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e084      	b.n	8001bd6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d101      	bne.n	8001ada <HAL_UART_Receive+0x40>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e07d      	b.n	8001bd6 <HAL_UART_Receive+0x13c>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2222      	movs	r2, #34	; 0x22
 8001aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2200      	movs	r2, #0
 8001af4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001af6:	f7fe fdd7 	bl	80006a8 <HAL_GetTick>
 8001afa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	88fa      	ldrh	r2, [r7, #6]
 8001b00:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	88fa      	ldrh	r2, [r7, #6]
 8001b06:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b10:	d108      	bne.n	8001b24 <HAL_UART_Receive+0x8a>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d104      	bne.n	8001b24 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	61bb      	str	r3, [r7, #24]
 8001b22:	e003      	b.n	8001b2c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001b34:	e043      	b.n	8001bbe <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2120      	movs	r1, #32
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f000 f84c 	bl	8001bde <UART_WaitOnFlagUntilTimeout>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e042      	b.n	8001bd6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10c      	bne.n	8001b70 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	3302      	adds	r3, #2
 8001b6c:	61bb      	str	r3, [r7, #24]
 8001b6e:	e01f      	b.n	8001bb0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b78:	d007      	beq.n	8001b8a <HAL_UART_Receive+0xf0>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10a      	bne.n	8001b98 <HAL_UART_Receive+0xfe>
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d106      	bne.n	8001b98 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	701a      	strb	r2, [r3, #0]
 8001b96:	e008      	b.n	8001baa <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	3301      	adds	r3, #1
 8001bae:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1b6      	bne.n	8001b36 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2220      	movs	r2, #32
 8001bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	e000      	b.n	8001bd6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001bd4:	2302      	movs	r3, #2
  }
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3720      	adds	r7, #32
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b084      	sub	sp, #16
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	60f8      	str	r0, [r7, #12]
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	603b      	str	r3, [r7, #0]
 8001bea:	4613      	mov	r3, r2
 8001bec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bee:	e02c      	b.n	8001c4a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf6:	d028      	beq.n	8001c4a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d007      	beq.n	8001c0e <UART_WaitOnFlagUntilTimeout+0x30>
 8001bfe:	f7fe fd53 	bl	80006a8 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d21d      	bcs.n	8001c4a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68da      	ldr	r2, [r3, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001c1c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	695a      	ldr	r2, [r3, #20]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f022 0201 	bic.w	r2, r2, #1
 8001c2c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2220      	movs	r2, #32
 8001c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2220      	movs	r2, #32
 8001c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e00f      	b.n	8001c6a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	4013      	ands	r3, r2
 8001c54:	68ba      	ldr	r2, [r7, #8]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	bf0c      	ite	eq
 8001c5a:	2301      	moveq	r3, #1
 8001c5c:	2300      	movne	r3, #0
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	461a      	mov	r2, r3
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d0c3      	beq.n	8001bf0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
	...

08001c74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689a      	ldr	r2, [r3, #8]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001cae:	f023 030c 	bic.w	r3, r3, #12
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	6812      	ldr	r2, [r2, #0]
 8001cb6:	68b9      	ldr	r1, [r7, #8]
 8001cb8:	430b      	orrs	r3, r1
 8001cba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699a      	ldr	r2, [r3, #24]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a2c      	ldr	r2, [pc, #176]	; (8001d88 <UART_SetConfig+0x114>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d103      	bne.n	8001ce4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001cdc:	f7ff fb52 	bl	8001384 <HAL_RCC_GetPCLK2Freq>
 8001ce0:	60f8      	str	r0, [r7, #12]
 8001ce2:	e002      	b.n	8001cea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001ce4:	f7ff fb3a 	bl	800135c <HAL_RCC_GetPCLK1Freq>
 8001ce8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	4613      	mov	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	009a      	lsls	r2, r3, #2
 8001cf4:	441a      	add	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d00:	4a22      	ldr	r2, [pc, #136]	; (8001d8c <UART_SetConfig+0x118>)
 8001d02:	fba2 2303 	umull	r2, r3, r2, r3
 8001d06:	095b      	lsrs	r3, r3, #5
 8001d08:	0119      	lsls	r1, r3, #4
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	009a      	lsls	r2, r3, #2
 8001d14:	441a      	add	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d20:	4b1a      	ldr	r3, [pc, #104]	; (8001d8c <UART_SetConfig+0x118>)
 8001d22:	fba3 0302 	umull	r0, r3, r3, r2
 8001d26:	095b      	lsrs	r3, r3, #5
 8001d28:	2064      	movs	r0, #100	; 0x64
 8001d2a:	fb00 f303 	mul.w	r3, r0, r3
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	011b      	lsls	r3, r3, #4
 8001d32:	3332      	adds	r3, #50	; 0x32
 8001d34:	4a15      	ldr	r2, [pc, #84]	; (8001d8c <UART_SetConfig+0x118>)
 8001d36:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3a:	095b      	lsrs	r3, r3, #5
 8001d3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d40:	4419      	add	r1, r3
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	009a      	lsls	r2, r3, #2
 8001d4c:	441a      	add	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d58:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <UART_SetConfig+0x118>)
 8001d5a:	fba3 0302 	umull	r0, r3, r3, r2
 8001d5e:	095b      	lsrs	r3, r3, #5
 8001d60:	2064      	movs	r0, #100	; 0x64
 8001d62:	fb00 f303 	mul.w	r3, r0, r3
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	011b      	lsls	r3, r3, #4
 8001d6a:	3332      	adds	r3, #50	; 0x32
 8001d6c:	4a07      	ldr	r2, [pc, #28]	; (8001d8c <UART_SetConfig+0x118>)
 8001d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d72:	095b      	lsrs	r3, r3, #5
 8001d74:	f003 020f 	and.w	r2, r3, #15
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	440a      	add	r2, r1
 8001d7e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001d80:	bf00      	nop
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40013800 	.word	0x40013800
 8001d8c:	51eb851f 	.word	0x51eb851f

08001d90 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001d9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001da2:	2b84      	cmp	r3, #132	; 0x84
 8001da4:	d005      	beq.n	8001db2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001da6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	4413      	add	r3, r2
 8001dae:	3303      	adds	r3, #3
 8001db0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001db2:	68fb      	ldr	r3, [r7, #12]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr

08001dbe <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001dc2:	f000 fae7 	bl	8002394 <vTaskStartScheduler>
  
  return osOK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dce:	b089      	sub	sp, #36	; 0x24
 8001dd0:	af04      	add	r7, sp, #16
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d020      	beq.n	8001e20 <osThreadCreate+0x54>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d01c      	beq.n	8001e20 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685c      	ldr	r4, [r3, #4]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681d      	ldr	r5, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	691e      	ldr	r6, [r3, #16]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff ffc9 	bl	8001d90 <makeFreeRtosPriority>
 8001dfe:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e08:	9202      	str	r2, [sp, #8]
 8001e0a:	9301      	str	r3, [sp, #4]
 8001e0c:	9100      	str	r1, [sp, #0]
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	4632      	mov	r2, r6
 8001e12:	4629      	mov	r1, r5
 8001e14:	4620      	mov	r0, r4
 8001e16:	f000 f8e8 	bl	8001fea <xTaskCreateStatic>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	e01c      	b.n	8001e5a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685c      	ldr	r4, [r3, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e2c:	b29e      	uxth	r6, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff ffab 	bl	8001d90 <makeFreeRtosPriority>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	f107 030c 	add.w	r3, r7, #12
 8001e40:	9301      	str	r3, [sp, #4]
 8001e42:	9200      	str	r2, [sp, #0]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	4632      	mov	r2, r6
 8001e48:	4629      	mov	r1, r5
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	f000 f929 	bl	80020a2 <xTaskCreate>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d001      	beq.n	8001e5a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	e000      	b.n	8001e5c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e64 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <osDelay+0x16>
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	e000      	b.n	8001e7c <osDelay+0x18>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f000 fa55 	bl	800232c <vTaskDelay>
  
  return osOK;
 8001e82:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f103 0208 	add.w	r2, r3, #8
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f103 0208 	add.w	r2, r3, #8
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f103 0208 	add.w	r2, r3, #8
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr

08001eca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bc80      	pop	{r7}
 8001ee0:	4770      	bx	lr

08001ee2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b085      	sub	sp, #20
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
 8001eea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	1c5a      	adds	r2, r3, #1
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	601a      	str	r2, [r3, #0]
}
 8001f1e:	bf00      	nop
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr

08001f28 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f3e:	d103      	bne.n	8001f48 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	e00c      	b.n	8001f62 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3308      	adds	r3, #8
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	e002      	b.n	8001f56 <vListInsert+0x2e>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68ba      	ldr	r2, [r7, #8]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d2f6      	bcs.n	8001f50 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	1c5a      	adds	r2, r3, #1
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	601a      	str	r2, [r3, #0]
}
 8001f8e:	bf00      	nop
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr

08001f98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6892      	ldr	r2, [r2, #8]
 8001fae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6852      	ldr	r2, [r2, #4]
 8001fb8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d103      	bne.n	8001fcc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	1e5a      	subs	r2, r3, #1
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr

08001fea <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b08e      	sub	sp, #56	; 0x38
 8001fee:	af04      	add	r7, sp, #16
 8001ff0:	60f8      	str	r0, [r7, #12]
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	607a      	str	r2, [r7, #4]
 8001ff6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10a      	bne.n	8002014 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002002:	f383 8811 	msr	BASEPRI, r3
 8002006:	f3bf 8f6f 	isb	sy
 800200a:	f3bf 8f4f 	dsb	sy
 800200e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002010:	bf00      	nop
 8002012:	e7fe      	b.n	8002012 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10a      	bne.n	8002030 <xTaskCreateStatic+0x46>
	__asm volatile
 800201a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800201e:	f383 8811 	msr	BASEPRI, r3
 8002022:	f3bf 8f6f 	isb	sy
 8002026:	f3bf 8f4f 	dsb	sy
 800202a:	61fb      	str	r3, [r7, #28]
}
 800202c:	bf00      	nop
 800202e:	e7fe      	b.n	800202e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002030:	23b4      	movs	r3, #180	; 0xb4
 8002032:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	2bb4      	cmp	r3, #180	; 0xb4
 8002038:	d00a      	beq.n	8002050 <xTaskCreateStatic+0x66>
	__asm volatile
 800203a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800203e:	f383 8811 	msr	BASEPRI, r3
 8002042:	f3bf 8f6f 	isb	sy
 8002046:	f3bf 8f4f 	dsb	sy
 800204a:	61bb      	str	r3, [r7, #24]
}
 800204c:	bf00      	nop
 800204e:	e7fe      	b.n	800204e <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002052:	2b00      	cmp	r3, #0
 8002054:	d01e      	beq.n	8002094 <xTaskCreateStatic+0xaa>
 8002056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002058:	2b00      	cmp	r3, #0
 800205a:	d01b      	beq.n	8002094 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800205c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002064:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	2202      	movs	r2, #2
 800206a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800206e:	2300      	movs	r3, #0
 8002070:	9303      	str	r3, [sp, #12]
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	9302      	str	r3, [sp, #8]
 8002076:	f107 0314 	add.w	r3, r7, #20
 800207a:	9301      	str	r3, [sp, #4]
 800207c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 f850 	bl	800212c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800208c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800208e:	f000 f8e3 	bl	8002258 <prvAddNewTaskToReadyList>
 8002092:	e001      	b.n	8002098 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002098:	697b      	ldr	r3, [r7, #20]
	}
 800209a:	4618      	mov	r0, r3
 800209c:	3728      	adds	r7, #40	; 0x28
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b08c      	sub	sp, #48	; 0x30
 80020a6:	af04      	add	r7, sp, #16
 80020a8:	60f8      	str	r0, [r7, #12]
 80020aa:	60b9      	str	r1, [r7, #8]
 80020ac:	603b      	str	r3, [r7, #0]
 80020ae:	4613      	mov	r3, r2
 80020b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020b2:	88fb      	ldrh	r3, [r7, #6]
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4618      	mov	r0, r3
 80020b8:	f000 fe9a 	bl	8002df0 <pvPortMalloc>
 80020bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00e      	beq.n	80020e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80020c4:	20b4      	movs	r0, #180	; 0xb4
 80020c6:	f000 fe93 	bl	8002df0 <pvPortMalloc>
 80020ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	631a      	str	r2, [r3, #48]	; 0x30
 80020d8:	e005      	b.n	80020e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80020da:	6978      	ldr	r0, [r7, #20]
 80020dc:	f000 ff4c 	bl	8002f78 <vPortFree>
 80020e0:	e001      	b.n	80020e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d017      	beq.n	800211c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80020f4:	88fa      	ldrh	r2, [r7, #6]
 80020f6:	2300      	movs	r3, #0
 80020f8:	9303      	str	r3, [sp, #12]
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	9302      	str	r3, [sp, #8]
 80020fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002100:	9301      	str	r3, [sp, #4]
 8002102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	68b9      	ldr	r1, [r7, #8]
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f000 f80e 	bl	800212c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002110:	69f8      	ldr	r0, [r7, #28]
 8002112:	f000 f8a1 	bl	8002258 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002116:	2301      	movs	r3, #1
 8002118:	61bb      	str	r3, [r7, #24]
 800211a:	e002      	b.n	8002122 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800211c:	f04f 33ff 	mov.w	r3, #4294967295
 8002120:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002122:	69bb      	ldr	r3, [r7, #24]
	}
 8002124:	4618      	mov	r0, r3
 8002126:	3720      	adds	r7, #32
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b088      	sub	sp, #32
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
 8002138:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800213a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800213c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002144:	3b01      	subs	r3, #1
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	f023 0307 	bic.w	r3, r3, #7
 8002152:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00a      	beq.n	8002174 <prvInitialiseNewTask+0x48>
	__asm volatile
 800215e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002162:	f383 8811 	msr	BASEPRI, r3
 8002166:	f3bf 8f6f 	isb	sy
 800216a:	f3bf 8f4f 	dsb	sy
 800216e:	617b      	str	r3, [r7, #20]
}
 8002170:	bf00      	nop
 8002172:	e7fe      	b.n	8002172 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002174:	2300      	movs	r3, #0
 8002176:	61fb      	str	r3, [r7, #28]
 8002178:	e012      	b.n	80021a0 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	4413      	add	r3, r2
 8002180:	7819      	ldrb	r1, [r3, #0]
 8002182:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	4413      	add	r3, r2
 8002188:	3334      	adds	r3, #52	; 0x34
 800218a:	460a      	mov	r2, r1
 800218c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	4413      	add	r3, r2
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d006      	beq.n	80021a8 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3301      	adds	r3, #1
 800219e:	61fb      	str	r3, [r7, #28]
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	2b0f      	cmp	r3, #15
 80021a4:	d9e9      	bls.n	800217a <prvInitialiseNewTask+0x4e>
 80021a6:	e000      	b.n	80021aa <prvInitialiseNewTask+0x7e>
		{
			break;
 80021a8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80021aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80021b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b4:	2b06      	cmp	r3, #6
 80021b6:	d901      	bls.n	80021bc <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80021b8:	2306      	movs	r3, #6
 80021ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80021bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80021c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021c6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80021c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ca:	2200      	movs	r2, #0
 80021cc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80021ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d0:	3304      	adds	r3, #4
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff fe79 	bl	8001eca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80021d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021da:	3318      	adds	r3, #24
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff fe74 	bl	8001eca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80021e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ea:	f1c3 0207 	rsb	r2, r3, #7
 80021ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80021f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80021f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021fa:	2200      	movs	r2, #0
 80021fc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002202:	2200      	movs	r2, #0
 8002204:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220a:	334c      	adds	r3, #76	; 0x4c
 800220c:	2260      	movs	r2, #96	; 0x60
 800220e:	2100      	movs	r1, #0
 8002210:	4618      	mov	r0, r3
 8002212:	f000 ffeb 	bl	80031ec <memset>
 8002216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002218:	4a0c      	ldr	r2, [pc, #48]	; (800224c <prvInitialiseNewTask+0x120>)
 800221a:	651a      	str	r2, [r3, #80]	; 0x50
 800221c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800221e:	4a0c      	ldr	r2, [pc, #48]	; (8002250 <prvInitialiseNewTask+0x124>)
 8002220:	655a      	str	r2, [r3, #84]	; 0x54
 8002222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002224:	4a0b      	ldr	r2, [pc, #44]	; (8002254 <prvInitialiseNewTask+0x128>)
 8002226:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	68f9      	ldr	r1, [r7, #12]
 800222c:	69b8      	ldr	r0, [r7, #24]
 800222e:	f000 fc29 	bl	8002a84 <pxPortInitialiseStack>
 8002232:	4602      	mov	r2, r0
 8002234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002236:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800223a:	2b00      	cmp	r3, #0
 800223c:	d002      	beq.n	8002244 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800223e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002242:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002244:	bf00      	nop
 8002246:	3720      	adds	r7, #32
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	08003438 	.word	0x08003438
 8002250:	08003458 	.word	0x08003458
 8002254:	08003418 	.word	0x08003418

08002258 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002260:	f000 fd04 	bl	8002c6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002264:	4b2a      	ldr	r3, [pc, #168]	; (8002310 <prvAddNewTaskToReadyList+0xb8>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	3301      	adds	r3, #1
 800226a:	4a29      	ldr	r2, [pc, #164]	; (8002310 <prvAddNewTaskToReadyList+0xb8>)
 800226c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800226e:	4b29      	ldr	r3, [pc, #164]	; (8002314 <prvAddNewTaskToReadyList+0xbc>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d109      	bne.n	800228a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002276:	4a27      	ldr	r2, [pc, #156]	; (8002314 <prvAddNewTaskToReadyList+0xbc>)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800227c:	4b24      	ldr	r3, [pc, #144]	; (8002310 <prvAddNewTaskToReadyList+0xb8>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d110      	bne.n	80022a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002284:	f000 fad2 	bl	800282c <prvInitialiseTaskLists>
 8002288:	e00d      	b.n	80022a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800228a:	4b23      	ldr	r3, [pc, #140]	; (8002318 <prvAddNewTaskToReadyList+0xc0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d109      	bne.n	80022a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002292:	4b20      	ldr	r3, [pc, #128]	; (8002314 <prvAddNewTaskToReadyList+0xbc>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229c:	429a      	cmp	r2, r3
 800229e:	d802      	bhi.n	80022a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80022a0:	4a1c      	ldr	r2, [pc, #112]	; (8002314 <prvAddNewTaskToReadyList+0xbc>)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80022a6:	4b1d      	ldr	r3, [pc, #116]	; (800231c <prvAddNewTaskToReadyList+0xc4>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	3301      	adds	r3, #1
 80022ac:	4a1b      	ldr	r2, [pc, #108]	; (800231c <prvAddNewTaskToReadyList+0xc4>)
 80022ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b4:	2201      	movs	r2, #1
 80022b6:	409a      	lsls	r2, r3
 80022b8:	4b19      	ldr	r3, [pc, #100]	; (8002320 <prvAddNewTaskToReadyList+0xc8>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4313      	orrs	r3, r2
 80022be:	4a18      	ldr	r2, [pc, #96]	; (8002320 <prvAddNewTaskToReadyList+0xc8>)
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022c6:	4613      	mov	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4a15      	ldr	r2, [pc, #84]	; (8002324 <prvAddNewTaskToReadyList+0xcc>)
 80022d0:	441a      	add	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3304      	adds	r3, #4
 80022d6:	4619      	mov	r1, r3
 80022d8:	4610      	mov	r0, r2
 80022da:	f7ff fe02 	bl	8001ee2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80022de:	f000 fcf5 	bl	8002ccc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80022e2:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <prvAddNewTaskToReadyList+0xc0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00e      	beq.n	8002308 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80022ea:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <prvAddNewTaskToReadyList+0xbc>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d207      	bcs.n	8002308 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <prvAddNewTaskToReadyList+0xd0>)
 80022fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	f3bf 8f4f 	dsb	sy
 8002304:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002308:	bf00      	nop
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	20000450 	.word	0x20000450
 8002314:	20000350 	.word	0x20000350
 8002318:	2000045c 	.word	0x2000045c
 800231c:	2000046c 	.word	0x2000046c
 8002320:	20000458 	.word	0x20000458
 8002324:	20000354 	.word	0x20000354
 8002328:	e000ed04 	.word	0xe000ed04

0800232c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002334:	2300      	movs	r3, #0
 8002336:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d017      	beq.n	800236e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800233e:	4b13      	ldr	r3, [pc, #76]	; (800238c <vTaskDelay+0x60>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00a      	beq.n	800235c <vTaskDelay+0x30>
	__asm volatile
 8002346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800234a:	f383 8811 	msr	BASEPRI, r3
 800234e:	f3bf 8f6f 	isb	sy
 8002352:	f3bf 8f4f 	dsb	sy
 8002356:	60bb      	str	r3, [r7, #8]
}
 8002358:	bf00      	nop
 800235a:	e7fe      	b.n	800235a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800235c:	f000 f884 	bl	8002468 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002360:	2100      	movs	r1, #0
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 fb28 	bl	80029b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002368:	f000 f88c 	bl	8002484 <xTaskResumeAll>
 800236c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d107      	bne.n	8002384 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002374:	4b06      	ldr	r3, [pc, #24]	; (8002390 <vTaskDelay+0x64>)
 8002376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	f3bf 8f4f 	dsb	sy
 8002380:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002384:	bf00      	nop
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20000478 	.word	0x20000478
 8002390:	e000ed04 	.word	0xe000ed04

08002394 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b08a      	sub	sp, #40	; 0x28
 8002398:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800239a:	2300      	movs	r3, #0
 800239c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80023a2:	463a      	mov	r2, r7
 80023a4:	1d39      	adds	r1, r7, #4
 80023a6:	f107 0308 	add.w	r3, r7, #8
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fd fed0 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80023b0:	6839      	ldr	r1, [r7, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	9202      	str	r2, [sp, #8]
 80023b8:	9301      	str	r3, [sp, #4]
 80023ba:	2300      	movs	r3, #0
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	2300      	movs	r3, #0
 80023c0:	460a      	mov	r2, r1
 80023c2:	4921      	ldr	r1, [pc, #132]	; (8002448 <vTaskStartScheduler+0xb4>)
 80023c4:	4821      	ldr	r0, [pc, #132]	; (800244c <vTaskStartScheduler+0xb8>)
 80023c6:	f7ff fe10 	bl	8001fea <xTaskCreateStatic>
 80023ca:	4603      	mov	r3, r0
 80023cc:	4a20      	ldr	r2, [pc, #128]	; (8002450 <vTaskStartScheduler+0xbc>)
 80023ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80023d0:	4b1f      	ldr	r3, [pc, #124]	; (8002450 <vTaskStartScheduler+0xbc>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d002      	beq.n	80023de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80023d8:	2301      	movs	r3, #1
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	e001      	b.n	80023e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80023de:	2300      	movs	r3, #0
 80023e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d11b      	bne.n	8002420 <vTaskStartScheduler+0x8c>
	__asm volatile
 80023e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ec:	f383 8811 	msr	BASEPRI, r3
 80023f0:	f3bf 8f6f 	isb	sy
 80023f4:	f3bf 8f4f 	dsb	sy
 80023f8:	613b      	str	r3, [r7, #16]
}
 80023fa:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80023fc:	4b15      	ldr	r3, [pc, #84]	; (8002454 <vTaskStartScheduler+0xc0>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	334c      	adds	r3, #76	; 0x4c
 8002402:	4a15      	ldr	r2, [pc, #84]	; (8002458 <vTaskStartScheduler+0xc4>)
 8002404:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002406:	4b15      	ldr	r3, [pc, #84]	; (800245c <vTaskStartScheduler+0xc8>)
 8002408:	f04f 32ff 	mov.w	r2, #4294967295
 800240c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800240e:	4b14      	ldr	r3, [pc, #80]	; (8002460 <vTaskStartScheduler+0xcc>)
 8002410:	2201      	movs	r2, #1
 8002412:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002414:	4b13      	ldr	r3, [pc, #76]	; (8002464 <vTaskStartScheduler+0xd0>)
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800241a:	f000 fbb5 	bl	8002b88 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800241e:	e00e      	b.n	800243e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002426:	d10a      	bne.n	800243e <vTaskStartScheduler+0xaa>
	__asm volatile
 8002428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800242c:	f383 8811 	msr	BASEPRI, r3
 8002430:	f3bf 8f6f 	isb	sy
 8002434:	f3bf 8f4f 	dsb	sy
 8002438:	60fb      	str	r3, [r7, #12]
}
 800243a:	bf00      	nop
 800243c:	e7fe      	b.n	800243c <vTaskStartScheduler+0xa8>
}
 800243e:	bf00      	nop
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	080033f8 	.word	0x080033f8
 800244c:	080027fd 	.word	0x080027fd
 8002450:	20000474 	.word	0x20000474
 8002454:	20000350 	.word	0x20000350
 8002458:	2000001c 	.word	0x2000001c
 800245c:	20000470 	.word	0x20000470
 8002460:	2000045c 	.word	0x2000045c
 8002464:	20000454 	.word	0x20000454

08002468 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800246c:	4b04      	ldr	r3, [pc, #16]	; (8002480 <vTaskSuspendAll+0x18>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	3301      	adds	r3, #1
 8002472:	4a03      	ldr	r2, [pc, #12]	; (8002480 <vTaskSuspendAll+0x18>)
 8002474:	6013      	str	r3, [r2, #0]
}
 8002476:	bf00      	nop
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	20000478 	.word	0x20000478

08002484 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800248a:	2300      	movs	r3, #0
 800248c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800248e:	2300      	movs	r3, #0
 8002490:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002492:	4b41      	ldr	r3, [pc, #260]	; (8002598 <xTaskResumeAll+0x114>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10a      	bne.n	80024b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800249a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800249e:	f383 8811 	msr	BASEPRI, r3
 80024a2:	f3bf 8f6f 	isb	sy
 80024a6:	f3bf 8f4f 	dsb	sy
 80024aa:	603b      	str	r3, [r7, #0]
}
 80024ac:	bf00      	nop
 80024ae:	e7fe      	b.n	80024ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80024b0:	f000 fbdc 	bl	8002c6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80024b4:	4b38      	ldr	r3, [pc, #224]	; (8002598 <xTaskResumeAll+0x114>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	3b01      	subs	r3, #1
 80024ba:	4a37      	ldr	r2, [pc, #220]	; (8002598 <xTaskResumeAll+0x114>)
 80024bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024be:	4b36      	ldr	r3, [pc, #216]	; (8002598 <xTaskResumeAll+0x114>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d161      	bne.n	800258a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80024c6:	4b35      	ldr	r3, [pc, #212]	; (800259c <xTaskResumeAll+0x118>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d05d      	beq.n	800258a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80024ce:	e02e      	b.n	800252e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80024d0:	4b33      	ldr	r3, [pc, #204]	; (80025a0 <xTaskResumeAll+0x11c>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	3318      	adds	r3, #24
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff fd5b 	bl	8001f98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	3304      	adds	r3, #4
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff fd56 	bl	8001f98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f0:	2201      	movs	r2, #1
 80024f2:	409a      	lsls	r2, r3
 80024f4:	4b2b      	ldr	r3, [pc, #172]	; (80025a4 <xTaskResumeAll+0x120>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	4a2a      	ldr	r2, [pc, #168]	; (80025a4 <xTaskResumeAll+0x120>)
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002502:	4613      	mov	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4413      	add	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4a27      	ldr	r2, [pc, #156]	; (80025a8 <xTaskResumeAll+0x124>)
 800250c:	441a      	add	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	3304      	adds	r3, #4
 8002512:	4619      	mov	r1, r3
 8002514:	4610      	mov	r0, r2
 8002516:	f7ff fce4 	bl	8001ee2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800251e:	4b23      	ldr	r3, [pc, #140]	; (80025ac <xTaskResumeAll+0x128>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002524:	429a      	cmp	r2, r3
 8002526:	d302      	bcc.n	800252e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002528:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <xTaskResumeAll+0x12c>)
 800252a:	2201      	movs	r2, #1
 800252c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800252e:	4b1c      	ldr	r3, [pc, #112]	; (80025a0 <xTaskResumeAll+0x11c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1cc      	bne.n	80024d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800253c:	f000 fa18 	bl	8002970 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002540:	4b1c      	ldr	r3, [pc, #112]	; (80025b4 <xTaskResumeAll+0x130>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d010      	beq.n	800256e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800254c:	f000 f836 	bl	80025bc <xTaskIncrementTick>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002556:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <xTaskResumeAll+0x12c>)
 8002558:	2201      	movs	r2, #1
 800255a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3b01      	subs	r3, #1
 8002560:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1f1      	bne.n	800254c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002568:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <xTaskResumeAll+0x130>)
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800256e:	4b10      	ldr	r3, [pc, #64]	; (80025b0 <xTaskResumeAll+0x12c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d009      	beq.n	800258a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002576:	2301      	movs	r3, #1
 8002578:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800257a:	4b0f      	ldr	r3, [pc, #60]	; (80025b8 <xTaskResumeAll+0x134>)
 800257c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	f3bf 8f4f 	dsb	sy
 8002586:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800258a:	f000 fb9f 	bl	8002ccc <vPortExitCritical>

	return xAlreadyYielded;
 800258e:	68bb      	ldr	r3, [r7, #8]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	20000478 	.word	0x20000478
 800259c:	20000450 	.word	0x20000450
 80025a0:	20000410 	.word	0x20000410
 80025a4:	20000458 	.word	0x20000458
 80025a8:	20000354 	.word	0x20000354
 80025ac:	20000350 	.word	0x20000350
 80025b0:	20000464 	.word	0x20000464
 80025b4:	20000460 	.word	0x20000460
 80025b8:	e000ed04 	.word	0xe000ed04

080025bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80025c2:	2300      	movs	r3, #0
 80025c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025c6:	4b51      	ldr	r3, [pc, #324]	; (800270c <xTaskIncrementTick+0x150>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f040 808d 	bne.w	80026ea <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80025d0:	4b4f      	ldr	r3, [pc, #316]	; (8002710 <xTaskIncrementTick+0x154>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	3301      	adds	r3, #1
 80025d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80025d8:	4a4d      	ldr	r2, [pc, #308]	; (8002710 <xTaskIncrementTick+0x154>)
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d120      	bne.n	8002626 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80025e4:	4b4b      	ldr	r3, [pc, #300]	; (8002714 <xTaskIncrementTick+0x158>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00a      	beq.n	8002604 <xTaskIncrementTick+0x48>
	__asm volatile
 80025ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f2:	f383 8811 	msr	BASEPRI, r3
 80025f6:	f3bf 8f6f 	isb	sy
 80025fa:	f3bf 8f4f 	dsb	sy
 80025fe:	603b      	str	r3, [r7, #0]
}
 8002600:	bf00      	nop
 8002602:	e7fe      	b.n	8002602 <xTaskIncrementTick+0x46>
 8002604:	4b43      	ldr	r3, [pc, #268]	; (8002714 <xTaskIncrementTick+0x158>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	4b43      	ldr	r3, [pc, #268]	; (8002718 <xTaskIncrementTick+0x15c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a41      	ldr	r2, [pc, #260]	; (8002714 <xTaskIncrementTick+0x158>)
 8002610:	6013      	str	r3, [r2, #0]
 8002612:	4a41      	ldr	r2, [pc, #260]	; (8002718 <xTaskIncrementTick+0x15c>)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6013      	str	r3, [r2, #0]
 8002618:	4b40      	ldr	r3, [pc, #256]	; (800271c <xTaskIncrementTick+0x160>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	3301      	adds	r3, #1
 800261e:	4a3f      	ldr	r2, [pc, #252]	; (800271c <xTaskIncrementTick+0x160>)
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	f000 f9a5 	bl	8002970 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002626:	4b3e      	ldr	r3, [pc, #248]	; (8002720 <xTaskIncrementTick+0x164>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	429a      	cmp	r2, r3
 800262e:	d34d      	bcc.n	80026cc <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002630:	4b38      	ldr	r3, [pc, #224]	; (8002714 <xTaskIncrementTick+0x158>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <xTaskIncrementTick+0x82>
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <xTaskIncrementTick+0x84>
 800263e:	2300      	movs	r3, #0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d004      	beq.n	800264e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002644:	4b36      	ldr	r3, [pc, #216]	; (8002720 <xTaskIncrementTick+0x164>)
 8002646:	f04f 32ff 	mov.w	r2, #4294967295
 800264a:	601a      	str	r2, [r3, #0]
					break;
 800264c:	e03e      	b.n	80026cc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800264e:	4b31      	ldr	r3, [pc, #196]	; (8002714 <xTaskIncrementTick+0x158>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	429a      	cmp	r2, r3
 8002664:	d203      	bcs.n	800266e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002666:	4a2e      	ldr	r2, [pc, #184]	; (8002720 <xTaskIncrementTick+0x164>)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6013      	str	r3, [r2, #0]
						break;
 800266c:	e02e      	b.n	80026cc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	3304      	adds	r3, #4
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff fc90 	bl	8001f98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267c:	2b00      	cmp	r3, #0
 800267e:	d004      	beq.n	800268a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	3318      	adds	r3, #24
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff fc87 	bl	8001f98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268e:	2201      	movs	r2, #1
 8002690:	409a      	lsls	r2, r3
 8002692:	4b24      	ldr	r3, [pc, #144]	; (8002724 <xTaskIncrementTick+0x168>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4313      	orrs	r3, r2
 8002698:	4a22      	ldr	r2, [pc, #136]	; (8002724 <xTaskIncrementTick+0x168>)
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a0:	4613      	mov	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4a1f      	ldr	r2, [pc, #124]	; (8002728 <xTaskIncrementTick+0x16c>)
 80026aa:	441a      	add	r2, r3
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	3304      	adds	r3, #4
 80026b0:	4619      	mov	r1, r3
 80026b2:	4610      	mov	r0, r2
 80026b4:	f7ff fc15 	bl	8001ee2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026bc:	4b1b      	ldr	r3, [pc, #108]	; (800272c <xTaskIncrementTick+0x170>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d3b4      	bcc.n	8002630 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80026c6:	2301      	movs	r3, #1
 80026c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026ca:	e7b1      	b.n	8002630 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80026cc:	4b17      	ldr	r3, [pc, #92]	; (800272c <xTaskIncrementTick+0x170>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026d2:	4915      	ldr	r1, [pc, #84]	; (8002728 <xTaskIncrementTick+0x16c>)
 80026d4:	4613      	mov	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d907      	bls.n	80026f4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80026e4:	2301      	movs	r3, #1
 80026e6:	617b      	str	r3, [r7, #20]
 80026e8:	e004      	b.n	80026f4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80026ea:	4b11      	ldr	r3, [pc, #68]	; (8002730 <xTaskIncrementTick+0x174>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	3301      	adds	r3, #1
 80026f0:	4a0f      	ldr	r2, [pc, #60]	; (8002730 <xTaskIncrementTick+0x174>)
 80026f2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80026f4:	4b0f      	ldr	r3, [pc, #60]	; (8002734 <xTaskIncrementTick+0x178>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80026fc:	2301      	movs	r3, #1
 80026fe:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002700:	697b      	ldr	r3, [r7, #20]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	20000478 	.word	0x20000478
 8002710:	20000454 	.word	0x20000454
 8002714:	20000408 	.word	0x20000408
 8002718:	2000040c 	.word	0x2000040c
 800271c:	20000468 	.word	0x20000468
 8002720:	20000470 	.word	0x20000470
 8002724:	20000458 	.word	0x20000458
 8002728:	20000354 	.word	0x20000354
 800272c:	20000350 	.word	0x20000350
 8002730:	20000460 	.word	0x20000460
 8002734:	20000464 	.word	0x20000464

08002738 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002738:	b480      	push	{r7}
 800273a:	b087      	sub	sp, #28
 800273c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800273e:	4b29      	ldr	r3, [pc, #164]	; (80027e4 <vTaskSwitchContext+0xac>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002746:	4b28      	ldr	r3, [pc, #160]	; (80027e8 <vTaskSwitchContext+0xb0>)
 8002748:	2201      	movs	r2, #1
 800274a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800274c:	e044      	b.n	80027d8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800274e:	4b26      	ldr	r3, [pc, #152]	; (80027e8 <vTaskSwitchContext+0xb0>)
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002754:	4b25      	ldr	r3, [pc, #148]	; (80027ec <vTaskSwitchContext+0xb4>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	fab3 f383 	clz	r3, r3
 8002760:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002762:	7afb      	ldrb	r3, [r7, #11]
 8002764:	f1c3 031f 	rsb	r3, r3, #31
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	4921      	ldr	r1, [pc, #132]	; (80027f0 <vTaskSwitchContext+0xb8>)
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	4613      	mov	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	440b      	add	r3, r1
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10a      	bne.n	8002794 <vTaskSwitchContext+0x5c>
	__asm volatile
 800277e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002782:	f383 8811 	msr	BASEPRI, r3
 8002786:	f3bf 8f6f 	isb	sy
 800278a:	f3bf 8f4f 	dsb	sy
 800278e:	607b      	str	r3, [r7, #4]
}
 8002790:	bf00      	nop
 8002792:	e7fe      	b.n	8002792 <vTaskSwitchContext+0x5a>
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	4613      	mov	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4a14      	ldr	r2, [pc, #80]	; (80027f0 <vTaskSwitchContext+0xb8>)
 80027a0:	4413      	add	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	605a      	str	r2, [r3, #4]
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	3308      	adds	r3, #8
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d104      	bne.n	80027c4 <vTaskSwitchContext+0x8c>
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	605a      	str	r2, [r3, #4]
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	4a0a      	ldr	r2, [pc, #40]	; (80027f4 <vTaskSwitchContext+0xbc>)
 80027cc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80027ce:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <vTaskSwitchContext+0xbc>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	334c      	adds	r3, #76	; 0x4c
 80027d4:	4a08      	ldr	r2, [pc, #32]	; (80027f8 <vTaskSwitchContext+0xc0>)
 80027d6:	6013      	str	r3, [r2, #0]
}
 80027d8:	bf00      	nop
 80027da:	371c      	adds	r7, #28
 80027dc:	46bd      	mov	sp, r7
 80027de:	bc80      	pop	{r7}
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	20000478 	.word	0x20000478
 80027e8:	20000464 	.word	0x20000464
 80027ec:	20000458 	.word	0x20000458
 80027f0:	20000354 	.word	0x20000354
 80027f4:	20000350 	.word	0x20000350
 80027f8:	2000001c 	.word	0x2000001c

080027fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002804:	f000 f852 	bl	80028ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002808:	4b06      	ldr	r3, [pc, #24]	; (8002824 <prvIdleTask+0x28>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d9f9      	bls.n	8002804 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002810:	4b05      	ldr	r3, [pc, #20]	; (8002828 <prvIdleTask+0x2c>)
 8002812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	f3bf 8f4f 	dsb	sy
 800281c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002820:	e7f0      	b.n	8002804 <prvIdleTask+0x8>
 8002822:	bf00      	nop
 8002824:	20000354 	.word	0x20000354
 8002828:	e000ed04 	.word	0xe000ed04

0800282c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002832:	2300      	movs	r3, #0
 8002834:	607b      	str	r3, [r7, #4]
 8002836:	e00c      	b.n	8002852 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	4613      	mov	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4a12      	ldr	r2, [pc, #72]	; (800288c <prvInitialiseTaskLists+0x60>)
 8002844:	4413      	add	r3, r2
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff fb20 	bl	8001e8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3301      	adds	r3, #1
 8002850:	607b      	str	r3, [r7, #4]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b06      	cmp	r3, #6
 8002856:	d9ef      	bls.n	8002838 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002858:	480d      	ldr	r0, [pc, #52]	; (8002890 <prvInitialiseTaskLists+0x64>)
 800285a:	f7ff fb17 	bl	8001e8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800285e:	480d      	ldr	r0, [pc, #52]	; (8002894 <prvInitialiseTaskLists+0x68>)
 8002860:	f7ff fb14 	bl	8001e8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002864:	480c      	ldr	r0, [pc, #48]	; (8002898 <prvInitialiseTaskLists+0x6c>)
 8002866:	f7ff fb11 	bl	8001e8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800286a:	480c      	ldr	r0, [pc, #48]	; (800289c <prvInitialiseTaskLists+0x70>)
 800286c:	f7ff fb0e 	bl	8001e8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002870:	480b      	ldr	r0, [pc, #44]	; (80028a0 <prvInitialiseTaskLists+0x74>)
 8002872:	f7ff fb0b 	bl	8001e8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002876:	4b0b      	ldr	r3, [pc, #44]	; (80028a4 <prvInitialiseTaskLists+0x78>)
 8002878:	4a05      	ldr	r2, [pc, #20]	; (8002890 <prvInitialiseTaskLists+0x64>)
 800287a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800287c:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <prvInitialiseTaskLists+0x7c>)
 800287e:	4a05      	ldr	r2, [pc, #20]	; (8002894 <prvInitialiseTaskLists+0x68>)
 8002880:	601a      	str	r2, [r3, #0]
}
 8002882:	bf00      	nop
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20000354 	.word	0x20000354
 8002890:	200003e0 	.word	0x200003e0
 8002894:	200003f4 	.word	0x200003f4
 8002898:	20000410 	.word	0x20000410
 800289c:	20000424 	.word	0x20000424
 80028a0:	2000043c 	.word	0x2000043c
 80028a4:	20000408 	.word	0x20000408
 80028a8:	2000040c 	.word	0x2000040c

080028ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80028b2:	e019      	b.n	80028e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80028b4:	f000 f9da 	bl	8002c6c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80028b8:	4b10      	ldr	r3, [pc, #64]	; (80028fc <prvCheckTasksWaitingTermination+0x50>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3304      	adds	r3, #4
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff fb67 	bl	8001f98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80028ca:	4b0d      	ldr	r3, [pc, #52]	; (8002900 <prvCheckTasksWaitingTermination+0x54>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	4a0b      	ldr	r2, [pc, #44]	; (8002900 <prvCheckTasksWaitingTermination+0x54>)
 80028d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80028d4:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <prvCheckTasksWaitingTermination+0x58>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	3b01      	subs	r3, #1
 80028da:	4a0a      	ldr	r2, [pc, #40]	; (8002904 <prvCheckTasksWaitingTermination+0x58>)
 80028dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80028de:	f000 f9f5 	bl	8002ccc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f810 	bl	8002908 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80028e8:	4b06      	ldr	r3, [pc, #24]	; (8002904 <prvCheckTasksWaitingTermination+0x58>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1e1      	bne.n	80028b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80028f0:	bf00      	nop
 80028f2:	bf00      	nop
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20000424 	.word	0x20000424
 8002900:	20000450 	.word	0x20000450
 8002904:	20000438 	.word	0x20000438

08002908 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	334c      	adds	r3, #76	; 0x4c
 8002914:	4618      	mov	r0, r3
 8002916:	f000 fc7f 	bl	8003218 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002920:	2b00      	cmp	r3, #0
 8002922:	d108      	bne.n	8002936 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002928:	4618      	mov	r0, r3
 800292a:	f000 fb25 	bl	8002f78 <vPortFree>
				vPortFree( pxTCB );
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 fb22 	bl	8002f78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002934:	e018      	b.n	8002968 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800293c:	2b01      	cmp	r3, #1
 800293e:	d103      	bne.n	8002948 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 fb19 	bl	8002f78 <vPortFree>
	}
 8002946:	e00f      	b.n	8002968 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800294e:	2b02      	cmp	r3, #2
 8002950:	d00a      	beq.n	8002968 <prvDeleteTCB+0x60>
	__asm volatile
 8002952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002956:	f383 8811 	msr	BASEPRI, r3
 800295a:	f3bf 8f6f 	isb	sy
 800295e:	f3bf 8f4f 	dsb	sy
 8002962:	60fb      	str	r3, [r7, #12]
}
 8002964:	bf00      	nop
 8002966:	e7fe      	b.n	8002966 <prvDeleteTCB+0x5e>
	}
 8002968:	bf00      	nop
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002976:	4b0e      	ldr	r3, [pc, #56]	; (80029b0 <prvResetNextTaskUnblockTime+0x40>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <prvResetNextTaskUnblockTime+0x14>
 8002980:	2301      	movs	r3, #1
 8002982:	e000      	b.n	8002986 <prvResetNextTaskUnblockTime+0x16>
 8002984:	2300      	movs	r3, #0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d004      	beq.n	8002994 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800298a:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <prvResetNextTaskUnblockTime+0x44>)
 800298c:	f04f 32ff 	mov.w	r2, #4294967295
 8002990:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002992:	e008      	b.n	80029a6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002994:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <prvResetNextTaskUnblockTime+0x40>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	4a04      	ldr	r2, [pc, #16]	; (80029b4 <prvResetNextTaskUnblockTime+0x44>)
 80029a4:	6013      	str	r3, [r2, #0]
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr
 80029b0:	20000408 	.word	0x20000408
 80029b4:	20000470 	.word	0x20000470

080029b8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80029c2:	4b29      	ldr	r3, [pc, #164]	; (8002a68 <prvAddCurrentTaskToDelayedList+0xb0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80029c8:	4b28      	ldr	r3, [pc, #160]	; (8002a6c <prvAddCurrentTaskToDelayedList+0xb4>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	3304      	adds	r3, #4
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff fae2 	bl	8001f98 <uxListRemove>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10b      	bne.n	80029f2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80029da:	4b24      	ldr	r3, [pc, #144]	; (8002a6c <prvAddCurrentTaskToDelayedList+0xb4>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e0:	2201      	movs	r2, #1
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	43da      	mvns	r2, r3
 80029e8:	4b21      	ldr	r3, [pc, #132]	; (8002a70 <prvAddCurrentTaskToDelayedList+0xb8>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4013      	ands	r3, r2
 80029ee:	4a20      	ldr	r2, [pc, #128]	; (8002a70 <prvAddCurrentTaskToDelayedList+0xb8>)
 80029f0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f8:	d10a      	bne.n	8002a10 <prvAddCurrentTaskToDelayedList+0x58>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d007      	beq.n	8002a10 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a00:	4b1a      	ldr	r3, [pc, #104]	; (8002a6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	3304      	adds	r3, #4
 8002a06:	4619      	mov	r1, r3
 8002a08:	481a      	ldr	r0, [pc, #104]	; (8002a74 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002a0a:	f7ff fa6a 	bl	8001ee2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002a0e:	e026      	b.n	8002a5e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4413      	add	r3, r2
 8002a16:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002a18:	4b14      	ldr	r3, [pc, #80]	; (8002a6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68ba      	ldr	r2, [r7, #8]
 8002a1e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002a20:	68ba      	ldr	r2, [r7, #8]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d209      	bcs.n	8002a3c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a28:	4b13      	ldr	r3, [pc, #76]	; (8002a78 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	4b0f      	ldr	r3, [pc, #60]	; (8002a6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	3304      	adds	r3, #4
 8002a32:	4619      	mov	r1, r3
 8002a34:	4610      	mov	r0, r2
 8002a36:	f7ff fa77 	bl	8001f28 <vListInsert>
}
 8002a3a:	e010      	b.n	8002a5e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a3c:	4b0f      	ldr	r3, [pc, #60]	; (8002a7c <prvAddCurrentTaskToDelayedList+0xc4>)
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	4b0a      	ldr	r3, [pc, #40]	; (8002a6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	3304      	adds	r3, #4
 8002a46:	4619      	mov	r1, r3
 8002a48:	4610      	mov	r0, r2
 8002a4a:	f7ff fa6d 	bl	8001f28 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002a4e:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d202      	bcs.n	8002a5e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002a58:	4a09      	ldr	r2, [pc, #36]	; (8002a80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	6013      	str	r3, [r2, #0]
}
 8002a5e:	bf00      	nop
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20000454 	.word	0x20000454
 8002a6c:	20000350 	.word	0x20000350
 8002a70:	20000458 	.word	0x20000458
 8002a74:	2000043c 	.word	0x2000043c
 8002a78:	2000040c 	.word	0x2000040c
 8002a7c:	20000408 	.word	0x20000408
 8002a80:	20000470 	.word	0x20000470

08002a84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	3b04      	subs	r3, #4
 8002a94:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	3b04      	subs	r3, #4
 8002aa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f023 0201 	bic.w	r2, r3, #1
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	3b04      	subs	r3, #4
 8002ab2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002ab4:	4a08      	ldr	r2, [pc, #32]	; (8002ad8 <pxPortInitialiseStack+0x54>)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	3b14      	subs	r3, #20
 8002abe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	3b20      	subs	r3, #32
 8002aca:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002acc:	68fb      	ldr	r3, [r7, #12]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr
 8002ad8:	08002add 	.word	0x08002add

08002adc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002ae6:	4b12      	ldr	r3, [pc, #72]	; (8002b30 <prvTaskExitError+0x54>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aee:	d00a      	beq.n	8002b06 <prvTaskExitError+0x2a>
	__asm volatile
 8002af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af4:	f383 8811 	msr	BASEPRI, r3
 8002af8:	f3bf 8f6f 	isb	sy
 8002afc:	f3bf 8f4f 	dsb	sy
 8002b00:	60fb      	str	r3, [r7, #12]
}
 8002b02:	bf00      	nop
 8002b04:	e7fe      	b.n	8002b04 <prvTaskExitError+0x28>
	__asm volatile
 8002b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0a:	f383 8811 	msr	BASEPRI, r3
 8002b0e:	f3bf 8f6f 	isb	sy
 8002b12:	f3bf 8f4f 	dsb	sy
 8002b16:	60bb      	str	r3, [r7, #8]
}
 8002b18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002b1a:	bf00      	nop
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0fc      	beq.n	8002b1c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002b22:	bf00      	nop
 8002b24:	bf00      	nop
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bc80      	pop	{r7}
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	20000018 	.word	0x20000018
	...

08002b40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002b40:	4b07      	ldr	r3, [pc, #28]	; (8002b60 <pxCurrentTCBConst2>)
 8002b42:	6819      	ldr	r1, [r3, #0]
 8002b44:	6808      	ldr	r0, [r1, #0]
 8002b46:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002b4a:	f380 8809 	msr	PSP, r0
 8002b4e:	f3bf 8f6f 	isb	sy
 8002b52:	f04f 0000 	mov.w	r0, #0
 8002b56:	f380 8811 	msr	BASEPRI, r0
 8002b5a:	f04e 0e0d 	orr.w	lr, lr, #13
 8002b5e:	4770      	bx	lr

08002b60 <pxCurrentTCBConst2>:
 8002b60:	20000350 	.word	0x20000350
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002b64:	bf00      	nop
 8002b66:	bf00      	nop

08002b68 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002b68:	4806      	ldr	r0, [pc, #24]	; (8002b84 <prvPortStartFirstTask+0x1c>)
 8002b6a:	6800      	ldr	r0, [r0, #0]
 8002b6c:	6800      	ldr	r0, [r0, #0]
 8002b6e:	f380 8808 	msr	MSP, r0
 8002b72:	b662      	cpsie	i
 8002b74:	b661      	cpsie	f
 8002b76:	f3bf 8f4f 	dsb	sy
 8002b7a:	f3bf 8f6f 	isb	sy
 8002b7e:	df00      	svc	0
 8002b80:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002b82:	bf00      	nop
 8002b84:	e000ed08 	.word	0xe000ed08

08002b88 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002b8e:	4b32      	ldr	r3, [pc, #200]	; (8002c58 <xPortStartScheduler+0xd0>)
 8002b90:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	22ff      	movs	r2, #255	; 0xff
 8002b9e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002ba8:	78fb      	ldrb	r3, [r7, #3]
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	4b2a      	ldr	r3, [pc, #168]	; (8002c5c <xPortStartScheduler+0xd4>)
 8002bb4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002bb6:	4b2a      	ldr	r3, [pc, #168]	; (8002c60 <xPortStartScheduler+0xd8>)
 8002bb8:	2207      	movs	r2, #7
 8002bba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002bbc:	e009      	b.n	8002bd2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8002bbe:	4b28      	ldr	r3, [pc, #160]	; (8002c60 <xPortStartScheduler+0xd8>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	4a26      	ldr	r2, [pc, #152]	; (8002c60 <xPortStartScheduler+0xd8>)
 8002bc6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002bc8:	78fb      	ldrb	r3, [r7, #3]
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002bd2:	78fb      	ldrb	r3, [r7, #3]
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bda:	2b80      	cmp	r3, #128	; 0x80
 8002bdc:	d0ef      	beq.n	8002bbe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002bde:	4b20      	ldr	r3, [pc, #128]	; (8002c60 <xPortStartScheduler+0xd8>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f1c3 0307 	rsb	r3, r3, #7
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d00a      	beq.n	8002c00 <xPortStartScheduler+0x78>
	__asm volatile
 8002bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bee:	f383 8811 	msr	BASEPRI, r3
 8002bf2:	f3bf 8f6f 	isb	sy
 8002bf6:	f3bf 8f4f 	dsb	sy
 8002bfa:	60bb      	str	r3, [r7, #8]
}
 8002bfc:	bf00      	nop
 8002bfe:	e7fe      	b.n	8002bfe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002c00:	4b17      	ldr	r3, [pc, #92]	; (8002c60 <xPortStartScheduler+0xd8>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	021b      	lsls	r3, r3, #8
 8002c06:	4a16      	ldr	r2, [pc, #88]	; (8002c60 <xPortStartScheduler+0xd8>)
 8002c08:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002c0a:	4b15      	ldr	r3, [pc, #84]	; (8002c60 <xPortStartScheduler+0xd8>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c12:	4a13      	ldr	r2, [pc, #76]	; (8002c60 <xPortStartScheduler+0xd8>)
 8002c14:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002c1e:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <xPortStartScheduler+0xdc>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a10      	ldr	r2, [pc, #64]	; (8002c64 <xPortStartScheduler+0xdc>)
 8002c24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c28:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002c2a:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <xPortStartScheduler+0xdc>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a0d      	ldr	r2, [pc, #52]	; (8002c64 <xPortStartScheduler+0xdc>)
 8002c30:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002c34:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002c36:	f000 f8b9 	bl	8002dac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002c3a:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <xPortStartScheduler+0xe0>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002c40:	f7ff ff92 	bl	8002b68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002c44:	f7ff fd78 	bl	8002738 <vTaskSwitchContext>
	prvTaskExitError();
 8002c48:	f7ff ff48 	bl	8002adc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	e000e400 	.word	0xe000e400
 8002c5c:	2000047c 	.word	0x2000047c
 8002c60:	20000480 	.word	0x20000480
 8002c64:	e000ed20 	.word	0xe000ed20
 8002c68:	20000018 	.word	0x20000018

08002c6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
	__asm volatile
 8002c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c76:	f383 8811 	msr	BASEPRI, r3
 8002c7a:	f3bf 8f6f 	isb	sy
 8002c7e:	f3bf 8f4f 	dsb	sy
 8002c82:	607b      	str	r3, [r7, #4]
}
 8002c84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002c86:	4b0f      	ldr	r3, [pc, #60]	; (8002cc4 <vPortEnterCritical+0x58>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	4a0d      	ldr	r2, [pc, #52]	; (8002cc4 <vPortEnterCritical+0x58>)
 8002c8e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002c90:	4b0c      	ldr	r3, [pc, #48]	; (8002cc4 <vPortEnterCritical+0x58>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d10f      	bne.n	8002cb8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002c98:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <vPortEnterCritical+0x5c>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00a      	beq.n	8002cb8 <vPortEnterCritical+0x4c>
	__asm volatile
 8002ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca6:	f383 8811 	msr	BASEPRI, r3
 8002caa:	f3bf 8f6f 	isb	sy
 8002cae:	f3bf 8f4f 	dsb	sy
 8002cb2:	603b      	str	r3, [r7, #0]
}
 8002cb4:	bf00      	nop
 8002cb6:	e7fe      	b.n	8002cb6 <vPortEnterCritical+0x4a>
	}
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	20000018 	.word	0x20000018
 8002cc8:	e000ed04 	.word	0xe000ed04

08002ccc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002cd2:	4b11      	ldr	r3, [pc, #68]	; (8002d18 <vPortExitCritical+0x4c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10a      	bne.n	8002cf0 <vPortExitCritical+0x24>
	__asm volatile
 8002cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cde:	f383 8811 	msr	BASEPRI, r3
 8002ce2:	f3bf 8f6f 	isb	sy
 8002ce6:	f3bf 8f4f 	dsb	sy
 8002cea:	607b      	str	r3, [r7, #4]
}
 8002cec:	bf00      	nop
 8002cee:	e7fe      	b.n	8002cee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002cf0:	4b09      	ldr	r3, [pc, #36]	; (8002d18 <vPortExitCritical+0x4c>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	4a08      	ldr	r2, [pc, #32]	; (8002d18 <vPortExitCritical+0x4c>)
 8002cf8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002cfa:	4b07      	ldr	r3, [pc, #28]	; (8002d18 <vPortExitCritical+0x4c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d105      	bne.n	8002d0e <vPortExitCritical+0x42>
 8002d02:	2300      	movs	r3, #0
 8002d04:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002d0c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr
 8002d18:	20000018 	.word	0x20000018
 8002d1c:	00000000 	.word	0x00000000

08002d20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002d20:	f3ef 8009 	mrs	r0, PSP
 8002d24:	f3bf 8f6f 	isb	sy
 8002d28:	4b0d      	ldr	r3, [pc, #52]	; (8002d60 <pxCurrentTCBConst>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002d30:	6010      	str	r0, [r2, #0]
 8002d32:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002d36:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002d3a:	f380 8811 	msr	BASEPRI, r0
 8002d3e:	f7ff fcfb 	bl	8002738 <vTaskSwitchContext>
 8002d42:	f04f 0000 	mov.w	r0, #0
 8002d46:	f380 8811 	msr	BASEPRI, r0
 8002d4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002d4e:	6819      	ldr	r1, [r3, #0]
 8002d50:	6808      	ldr	r0, [r1, #0]
 8002d52:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002d56:	f380 8809 	msr	PSP, r0
 8002d5a:	f3bf 8f6f 	isb	sy
 8002d5e:	4770      	bx	lr

08002d60 <pxCurrentTCBConst>:
 8002d60:	20000350 	.word	0x20000350
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002d64:	bf00      	nop
 8002d66:	bf00      	nop

08002d68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
	__asm volatile
 8002d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d72:	f383 8811 	msr	BASEPRI, r3
 8002d76:	f3bf 8f6f 	isb	sy
 8002d7a:	f3bf 8f4f 	dsb	sy
 8002d7e:	607b      	str	r3, [r7, #4]
}
 8002d80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002d82:	f7ff fc1b 	bl	80025bc <xTaskIncrementTick>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002d8c:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <SysTick_Handler+0x40>)
 8002d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	2300      	movs	r3, #0
 8002d96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	f383 8811 	msr	BASEPRI, r3
}
 8002d9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002da0:	bf00      	nop
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	e000ed04 	.word	0xe000ed04

08002dac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002db0:	4b0a      	ldr	r3, [pc, #40]	; (8002ddc <vPortSetupTimerInterrupt+0x30>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002db6:	4b0a      	ldr	r3, [pc, #40]	; (8002de0 <vPortSetupTimerInterrupt+0x34>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002dbc:	4b09      	ldr	r3, [pc, #36]	; (8002de4 <vPortSetupTimerInterrupt+0x38>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a09      	ldr	r2, [pc, #36]	; (8002de8 <vPortSetupTimerInterrupt+0x3c>)
 8002dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc6:	099b      	lsrs	r3, r3, #6
 8002dc8:	4a08      	ldr	r2, [pc, #32]	; (8002dec <vPortSetupTimerInterrupt+0x40>)
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002dce:	4b03      	ldr	r3, [pc, #12]	; (8002ddc <vPortSetupTimerInterrupt+0x30>)
 8002dd0:	2207      	movs	r2, #7
 8002dd2:	601a      	str	r2, [r3, #0]
}
 8002dd4:	bf00      	nop
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr
 8002ddc:	e000e010 	.word	0xe000e010
 8002de0:	e000e018 	.word	0xe000e018
 8002de4:	2000000c 	.word	0x2000000c
 8002de8:	10624dd3 	.word	0x10624dd3
 8002dec:	e000e014 	.word	0xe000e014

08002df0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b08a      	sub	sp, #40	; 0x28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002dfc:	f7ff fb34 	bl	8002468 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002e00:	4b58      	ldr	r3, [pc, #352]	; (8002f64 <pvPortMalloc+0x174>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002e08:	f000 f910 	bl	800302c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002e0c:	4b56      	ldr	r3, [pc, #344]	; (8002f68 <pvPortMalloc+0x178>)
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4013      	ands	r3, r2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f040 808e 	bne.w	8002f36 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d01d      	beq.n	8002e5c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002e20:	2208      	movs	r2, #8
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4413      	add	r3, r2
 8002e26:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d014      	beq.n	8002e5c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f023 0307 	bic.w	r3, r3, #7
 8002e38:	3308      	adds	r3, #8
 8002e3a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <pvPortMalloc+0x6c>
	__asm volatile
 8002e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4a:	f383 8811 	msr	BASEPRI, r3
 8002e4e:	f3bf 8f6f 	isb	sy
 8002e52:	f3bf 8f4f 	dsb	sy
 8002e56:	617b      	str	r3, [r7, #20]
}
 8002e58:	bf00      	nop
 8002e5a:	e7fe      	b.n	8002e5a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d069      	beq.n	8002f36 <pvPortMalloc+0x146>
 8002e62:	4b42      	ldr	r3, [pc, #264]	; (8002f6c <pvPortMalloc+0x17c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d864      	bhi.n	8002f36 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002e6c:	4b40      	ldr	r3, [pc, #256]	; (8002f70 <pvPortMalloc+0x180>)
 8002e6e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002e70:	4b3f      	ldr	r3, [pc, #252]	; (8002f70 <pvPortMalloc+0x180>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002e76:	e004      	b.n	8002e82 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d903      	bls.n	8002e94 <pvPortMalloc+0xa4>
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1f1      	bne.n	8002e78 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002e94:	4b33      	ldr	r3, [pc, #204]	; (8002f64 <pvPortMalloc+0x174>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d04b      	beq.n	8002f36 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2208      	movs	r2, #8
 8002ea4:	4413      	add	r3, r2
 8002ea6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	1ad2      	subs	r2, r2, r3
 8002eb8:	2308      	movs	r3, #8
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d91f      	bls.n	8002f00 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00a      	beq.n	8002ee8 <pvPortMalloc+0xf8>
	__asm volatile
 8002ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed6:	f383 8811 	msr	BASEPRI, r3
 8002eda:	f3bf 8f6f 	isb	sy
 8002ede:	f3bf 8f4f 	dsb	sy
 8002ee2:	613b      	str	r3, [r7, #16]
}
 8002ee4:	bf00      	nop
 8002ee6:	e7fe      	b.n	8002ee6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	1ad2      	subs	r2, r2, r3
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002efa:	69b8      	ldr	r0, [r7, #24]
 8002efc:	f000 f8f8 	bl	80030f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002f00:	4b1a      	ldr	r3, [pc, #104]	; (8002f6c <pvPortMalloc+0x17c>)
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	4a18      	ldr	r2, [pc, #96]	; (8002f6c <pvPortMalloc+0x17c>)
 8002f0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002f0e:	4b17      	ldr	r3, [pc, #92]	; (8002f6c <pvPortMalloc+0x17c>)
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	4b18      	ldr	r3, [pc, #96]	; (8002f74 <pvPortMalloc+0x184>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d203      	bcs.n	8002f22 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002f1a:	4b14      	ldr	r3, [pc, #80]	; (8002f6c <pvPortMalloc+0x17c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a15      	ldr	r2, [pc, #84]	; (8002f74 <pvPortMalloc+0x184>)
 8002f20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	4b10      	ldr	r3, [pc, #64]	; (8002f68 <pvPortMalloc+0x178>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f32:	2200      	movs	r2, #0
 8002f34:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002f36:	f7ff faa5 	bl	8002484 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00a      	beq.n	8002f5a <pvPortMalloc+0x16a>
	__asm volatile
 8002f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f48:	f383 8811 	msr	BASEPRI, r3
 8002f4c:	f3bf 8f6f 	isb	sy
 8002f50:	f3bf 8f4f 	dsb	sy
 8002f54:	60fb      	str	r3, [r7, #12]
}
 8002f56:	bf00      	nop
 8002f58:	e7fe      	b.n	8002f58 <pvPortMalloc+0x168>
	return pvReturn;
 8002f5a:	69fb      	ldr	r3, [r7, #28]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3728      	adds	r7, #40	; 0x28
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	2000108c 	.word	0x2000108c
 8002f68:	20001098 	.word	0x20001098
 8002f6c:	20001090 	.word	0x20001090
 8002f70:	20001084 	.word	0x20001084
 8002f74:	20001094 	.word	0x20001094

08002f78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d048      	beq.n	800301c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002f8a:	2308      	movs	r3, #8
 8002f8c:	425b      	negs	r3, r3
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	4413      	add	r3, r2
 8002f92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	4b21      	ldr	r3, [pc, #132]	; (8003024 <vPortFree+0xac>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10a      	bne.n	8002fbc <vPortFree+0x44>
	__asm volatile
 8002fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002faa:	f383 8811 	msr	BASEPRI, r3
 8002fae:	f3bf 8f6f 	isb	sy
 8002fb2:	f3bf 8f4f 	dsb	sy
 8002fb6:	60fb      	str	r3, [r7, #12]
}
 8002fb8:	bf00      	nop
 8002fba:	e7fe      	b.n	8002fba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00a      	beq.n	8002fda <vPortFree+0x62>
	__asm volatile
 8002fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc8:	f383 8811 	msr	BASEPRI, r3
 8002fcc:	f3bf 8f6f 	isb	sy
 8002fd0:	f3bf 8f4f 	dsb	sy
 8002fd4:	60bb      	str	r3, [r7, #8]
}
 8002fd6:	bf00      	nop
 8002fd8:	e7fe      	b.n	8002fd8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	4b11      	ldr	r3, [pc, #68]	; (8003024 <vPortFree+0xac>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d019      	beq.n	800301c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d115      	bne.n	800301c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <vPortFree+0xac>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	401a      	ands	r2, r3
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003000:	f7ff fa32 	bl	8002468 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	4b07      	ldr	r3, [pc, #28]	; (8003028 <vPortFree+0xb0>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4413      	add	r3, r2
 800300e:	4a06      	ldr	r2, [pc, #24]	; (8003028 <vPortFree+0xb0>)
 8003010:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003012:	6938      	ldr	r0, [r7, #16]
 8003014:	f000 f86c 	bl	80030f0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003018:	f7ff fa34 	bl	8002484 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800301c:	bf00      	nop
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	20001098 	.word	0x20001098
 8003028:	20001090 	.word	0x20001090

0800302c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003032:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003036:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003038:	4b27      	ldr	r3, [pc, #156]	; (80030d8 <prvHeapInit+0xac>)
 800303a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00c      	beq.n	8003060 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	3307      	adds	r3, #7
 800304a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f023 0307 	bic.w	r3, r3, #7
 8003052:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003054:	68ba      	ldr	r2, [r7, #8]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	4a1f      	ldr	r2, [pc, #124]	; (80030d8 <prvHeapInit+0xac>)
 800305c:	4413      	add	r3, r2
 800305e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003064:	4a1d      	ldr	r2, [pc, #116]	; (80030dc <prvHeapInit+0xb0>)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800306a:	4b1c      	ldr	r3, [pc, #112]	; (80030dc <prvHeapInit+0xb0>)
 800306c:	2200      	movs	r2, #0
 800306e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68ba      	ldr	r2, [r7, #8]
 8003074:	4413      	add	r3, r2
 8003076:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003078:	2208      	movs	r2, #8
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	1a9b      	subs	r3, r3, r2
 800307e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f023 0307 	bic.w	r3, r3, #7
 8003086:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4a15      	ldr	r2, [pc, #84]	; (80030e0 <prvHeapInit+0xb4>)
 800308c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800308e:	4b14      	ldr	r3, [pc, #80]	; (80030e0 <prvHeapInit+0xb4>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2200      	movs	r2, #0
 8003094:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003096:	4b12      	ldr	r3, [pc, #72]	; (80030e0 <prvHeapInit+0xb4>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2200      	movs	r2, #0
 800309c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	1ad2      	subs	r2, r2, r3
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80030ac:	4b0c      	ldr	r3, [pc, #48]	; (80030e0 <prvHeapInit+0xb4>)
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	4a0a      	ldr	r2, [pc, #40]	; (80030e4 <prvHeapInit+0xb8>)
 80030ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	4a09      	ldr	r2, [pc, #36]	; (80030e8 <prvHeapInit+0xbc>)
 80030c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80030c4:	4b09      	ldr	r3, [pc, #36]	; (80030ec <prvHeapInit+0xc0>)
 80030c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80030ca:	601a      	str	r2, [r3, #0]
}
 80030cc:	bf00      	nop
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bc80      	pop	{r7}
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	20000484 	.word	0x20000484
 80030dc:	20001084 	.word	0x20001084
 80030e0:	2000108c 	.word	0x2000108c
 80030e4:	20001094 	.word	0x20001094
 80030e8:	20001090 	.word	0x20001090
 80030ec:	20001098 	.word	0x20001098

080030f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80030f8:	4b27      	ldr	r3, [pc, #156]	; (8003198 <prvInsertBlockIntoFreeList+0xa8>)
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	e002      	b.n	8003104 <prvInsertBlockIntoFreeList+0x14>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	429a      	cmp	r2, r3
 800310c:	d8f7      	bhi.n	80030fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	4413      	add	r3, r2
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	429a      	cmp	r2, r3
 800311e:	d108      	bne.n	8003132 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	441a      	add	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	441a      	add	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d118      	bne.n	8003178 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	4b14      	ldr	r3, [pc, #80]	; (800319c <prvInsertBlockIntoFreeList+0xac>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	429a      	cmp	r2, r3
 8003150:	d00d      	beq.n	800316e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	441a      	add	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	e008      	b.n	8003180 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800316e:	4b0b      	ldr	r3, [pc, #44]	; (800319c <prvInsertBlockIntoFreeList+0xac>)
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	e003      	b.n	8003180 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	429a      	cmp	r2, r3
 8003186:	d002      	beq.n	800318e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800318e:	bf00      	nop
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr
 8003198:	20001084 	.word	0x20001084
 800319c:	2000108c 	.word	0x2000108c

080031a0 <__libc_init_array>:
 80031a0:	b570      	push	{r4, r5, r6, lr}
 80031a2:	2600      	movs	r6, #0
 80031a4:	4d0c      	ldr	r5, [pc, #48]	; (80031d8 <__libc_init_array+0x38>)
 80031a6:	4c0d      	ldr	r4, [pc, #52]	; (80031dc <__libc_init_array+0x3c>)
 80031a8:	1b64      	subs	r4, r4, r5
 80031aa:	10a4      	asrs	r4, r4, #2
 80031ac:	42a6      	cmp	r6, r4
 80031ae:	d109      	bne.n	80031c4 <__libc_init_array+0x24>
 80031b0:	f000 f8e6 	bl	8003380 <_init>
 80031b4:	2600      	movs	r6, #0
 80031b6:	4d0a      	ldr	r5, [pc, #40]	; (80031e0 <__libc_init_array+0x40>)
 80031b8:	4c0a      	ldr	r4, [pc, #40]	; (80031e4 <__libc_init_array+0x44>)
 80031ba:	1b64      	subs	r4, r4, r5
 80031bc:	10a4      	asrs	r4, r4, #2
 80031be:	42a6      	cmp	r6, r4
 80031c0:	d105      	bne.n	80031ce <__libc_init_array+0x2e>
 80031c2:	bd70      	pop	{r4, r5, r6, pc}
 80031c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80031c8:	4798      	blx	r3
 80031ca:	3601      	adds	r6, #1
 80031cc:	e7ee      	b.n	80031ac <__libc_init_array+0xc>
 80031ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80031d2:	4798      	blx	r3
 80031d4:	3601      	adds	r6, #1
 80031d6:	e7f2      	b.n	80031be <__libc_init_array+0x1e>
 80031d8:	08003478 	.word	0x08003478
 80031dc:	08003478 	.word	0x08003478
 80031e0:	08003478 	.word	0x08003478
 80031e4:	0800347c 	.word	0x0800347c

080031e8 <__retarget_lock_acquire_recursive>:
 80031e8:	4770      	bx	lr

080031ea <__retarget_lock_release_recursive>:
 80031ea:	4770      	bx	lr

080031ec <memset>:
 80031ec:	4603      	mov	r3, r0
 80031ee:	4402      	add	r2, r0
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d100      	bne.n	80031f6 <memset+0xa>
 80031f4:	4770      	bx	lr
 80031f6:	f803 1b01 	strb.w	r1, [r3], #1
 80031fa:	e7f9      	b.n	80031f0 <memset+0x4>

080031fc <cleanup_glue>:
 80031fc:	b538      	push	{r3, r4, r5, lr}
 80031fe:	460c      	mov	r4, r1
 8003200:	6809      	ldr	r1, [r1, #0]
 8003202:	4605      	mov	r5, r0
 8003204:	b109      	cbz	r1, 800320a <cleanup_glue+0xe>
 8003206:	f7ff fff9 	bl	80031fc <cleanup_glue>
 800320a:	4621      	mov	r1, r4
 800320c:	4628      	mov	r0, r5
 800320e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003212:	f000 b869 	b.w	80032e8 <_free_r>
	...

08003218 <_reclaim_reent>:
 8003218:	4b2c      	ldr	r3, [pc, #176]	; (80032cc <_reclaim_reent+0xb4>)
 800321a:	b570      	push	{r4, r5, r6, lr}
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4604      	mov	r4, r0
 8003220:	4283      	cmp	r3, r0
 8003222:	d051      	beq.n	80032c8 <_reclaim_reent+0xb0>
 8003224:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003226:	b143      	cbz	r3, 800323a <_reclaim_reent+0x22>
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d14a      	bne.n	80032c4 <_reclaim_reent+0xac>
 800322e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003230:	6819      	ldr	r1, [r3, #0]
 8003232:	b111      	cbz	r1, 800323a <_reclaim_reent+0x22>
 8003234:	4620      	mov	r0, r4
 8003236:	f000 f857 	bl	80032e8 <_free_r>
 800323a:	6961      	ldr	r1, [r4, #20]
 800323c:	b111      	cbz	r1, 8003244 <_reclaim_reent+0x2c>
 800323e:	4620      	mov	r0, r4
 8003240:	f000 f852 	bl	80032e8 <_free_r>
 8003244:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003246:	b111      	cbz	r1, 800324e <_reclaim_reent+0x36>
 8003248:	4620      	mov	r0, r4
 800324a:	f000 f84d 	bl	80032e8 <_free_r>
 800324e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003250:	b111      	cbz	r1, 8003258 <_reclaim_reent+0x40>
 8003252:	4620      	mov	r0, r4
 8003254:	f000 f848 	bl	80032e8 <_free_r>
 8003258:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800325a:	b111      	cbz	r1, 8003262 <_reclaim_reent+0x4a>
 800325c:	4620      	mov	r0, r4
 800325e:	f000 f843 	bl	80032e8 <_free_r>
 8003262:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003264:	b111      	cbz	r1, 800326c <_reclaim_reent+0x54>
 8003266:	4620      	mov	r0, r4
 8003268:	f000 f83e 	bl	80032e8 <_free_r>
 800326c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800326e:	b111      	cbz	r1, 8003276 <_reclaim_reent+0x5e>
 8003270:	4620      	mov	r0, r4
 8003272:	f000 f839 	bl	80032e8 <_free_r>
 8003276:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003278:	b111      	cbz	r1, 8003280 <_reclaim_reent+0x68>
 800327a:	4620      	mov	r0, r4
 800327c:	f000 f834 	bl	80032e8 <_free_r>
 8003280:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003282:	b111      	cbz	r1, 800328a <_reclaim_reent+0x72>
 8003284:	4620      	mov	r0, r4
 8003286:	f000 f82f 	bl	80032e8 <_free_r>
 800328a:	69a3      	ldr	r3, [r4, #24]
 800328c:	b1e3      	cbz	r3, 80032c8 <_reclaim_reent+0xb0>
 800328e:	4620      	mov	r0, r4
 8003290:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003292:	4798      	blx	r3
 8003294:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003296:	b1b9      	cbz	r1, 80032c8 <_reclaim_reent+0xb0>
 8003298:	4620      	mov	r0, r4
 800329a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800329e:	f7ff bfad 	b.w	80031fc <cleanup_glue>
 80032a2:	5949      	ldr	r1, [r1, r5]
 80032a4:	b941      	cbnz	r1, 80032b8 <_reclaim_reent+0xa0>
 80032a6:	3504      	adds	r5, #4
 80032a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032aa:	2d80      	cmp	r5, #128	; 0x80
 80032ac:	68d9      	ldr	r1, [r3, #12]
 80032ae:	d1f8      	bne.n	80032a2 <_reclaim_reent+0x8a>
 80032b0:	4620      	mov	r0, r4
 80032b2:	f000 f819 	bl	80032e8 <_free_r>
 80032b6:	e7ba      	b.n	800322e <_reclaim_reent+0x16>
 80032b8:	680e      	ldr	r6, [r1, #0]
 80032ba:	4620      	mov	r0, r4
 80032bc:	f000 f814 	bl	80032e8 <_free_r>
 80032c0:	4631      	mov	r1, r6
 80032c2:	e7ef      	b.n	80032a4 <_reclaim_reent+0x8c>
 80032c4:	2500      	movs	r5, #0
 80032c6:	e7ef      	b.n	80032a8 <_reclaim_reent+0x90>
 80032c8:	bd70      	pop	{r4, r5, r6, pc}
 80032ca:	bf00      	nop
 80032cc:	2000001c 	.word	0x2000001c

080032d0 <__malloc_lock>:
 80032d0:	4801      	ldr	r0, [pc, #4]	; (80032d8 <__malloc_lock+0x8>)
 80032d2:	f7ff bf89 	b.w	80031e8 <__retarget_lock_acquire_recursive>
 80032d6:	bf00      	nop
 80032d8:	20001148 	.word	0x20001148

080032dc <__malloc_unlock>:
 80032dc:	4801      	ldr	r0, [pc, #4]	; (80032e4 <__malloc_unlock+0x8>)
 80032de:	f7ff bf84 	b.w	80031ea <__retarget_lock_release_recursive>
 80032e2:	bf00      	nop
 80032e4:	20001148 	.word	0x20001148

080032e8 <_free_r>:
 80032e8:	b538      	push	{r3, r4, r5, lr}
 80032ea:	4605      	mov	r5, r0
 80032ec:	2900      	cmp	r1, #0
 80032ee:	d043      	beq.n	8003378 <_free_r+0x90>
 80032f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032f4:	1f0c      	subs	r4, r1, #4
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	bfb8      	it	lt
 80032fa:	18e4      	addlt	r4, r4, r3
 80032fc:	f7ff ffe8 	bl	80032d0 <__malloc_lock>
 8003300:	4a1e      	ldr	r2, [pc, #120]	; (800337c <_free_r+0x94>)
 8003302:	6813      	ldr	r3, [r2, #0]
 8003304:	4610      	mov	r0, r2
 8003306:	b933      	cbnz	r3, 8003316 <_free_r+0x2e>
 8003308:	6063      	str	r3, [r4, #4]
 800330a:	6014      	str	r4, [r2, #0]
 800330c:	4628      	mov	r0, r5
 800330e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003312:	f7ff bfe3 	b.w	80032dc <__malloc_unlock>
 8003316:	42a3      	cmp	r3, r4
 8003318:	d90a      	bls.n	8003330 <_free_r+0x48>
 800331a:	6821      	ldr	r1, [r4, #0]
 800331c:	1862      	adds	r2, r4, r1
 800331e:	4293      	cmp	r3, r2
 8003320:	bf01      	itttt	eq
 8003322:	681a      	ldreq	r2, [r3, #0]
 8003324:	685b      	ldreq	r3, [r3, #4]
 8003326:	1852      	addeq	r2, r2, r1
 8003328:	6022      	streq	r2, [r4, #0]
 800332a:	6063      	str	r3, [r4, #4]
 800332c:	6004      	str	r4, [r0, #0]
 800332e:	e7ed      	b.n	800330c <_free_r+0x24>
 8003330:	461a      	mov	r2, r3
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	b10b      	cbz	r3, 800333a <_free_r+0x52>
 8003336:	42a3      	cmp	r3, r4
 8003338:	d9fa      	bls.n	8003330 <_free_r+0x48>
 800333a:	6811      	ldr	r1, [r2, #0]
 800333c:	1850      	adds	r0, r2, r1
 800333e:	42a0      	cmp	r0, r4
 8003340:	d10b      	bne.n	800335a <_free_r+0x72>
 8003342:	6820      	ldr	r0, [r4, #0]
 8003344:	4401      	add	r1, r0
 8003346:	1850      	adds	r0, r2, r1
 8003348:	4283      	cmp	r3, r0
 800334a:	6011      	str	r1, [r2, #0]
 800334c:	d1de      	bne.n	800330c <_free_r+0x24>
 800334e:	6818      	ldr	r0, [r3, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	4401      	add	r1, r0
 8003354:	6011      	str	r1, [r2, #0]
 8003356:	6053      	str	r3, [r2, #4]
 8003358:	e7d8      	b.n	800330c <_free_r+0x24>
 800335a:	d902      	bls.n	8003362 <_free_r+0x7a>
 800335c:	230c      	movs	r3, #12
 800335e:	602b      	str	r3, [r5, #0]
 8003360:	e7d4      	b.n	800330c <_free_r+0x24>
 8003362:	6820      	ldr	r0, [r4, #0]
 8003364:	1821      	adds	r1, r4, r0
 8003366:	428b      	cmp	r3, r1
 8003368:	bf01      	itttt	eq
 800336a:	6819      	ldreq	r1, [r3, #0]
 800336c:	685b      	ldreq	r3, [r3, #4]
 800336e:	1809      	addeq	r1, r1, r0
 8003370:	6021      	streq	r1, [r4, #0]
 8003372:	6063      	str	r3, [r4, #4]
 8003374:	6054      	str	r4, [r2, #4]
 8003376:	e7c9      	b.n	800330c <_free_r+0x24>
 8003378:	bd38      	pop	{r3, r4, r5, pc}
 800337a:	bf00      	nop
 800337c:	2000109c 	.word	0x2000109c

08003380 <_init>:
 8003380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003382:	bf00      	nop
 8003384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003386:	bc08      	pop	{r3}
 8003388:	469e      	mov	lr, r3
 800338a:	4770      	bx	lr

0800338c <_fini>:
 800338c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800338e:	bf00      	nop
 8003390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003392:	bc08      	pop	{r3}
 8003394:	469e      	mov	lr, r3
 8003396:	4770      	bx	lr
