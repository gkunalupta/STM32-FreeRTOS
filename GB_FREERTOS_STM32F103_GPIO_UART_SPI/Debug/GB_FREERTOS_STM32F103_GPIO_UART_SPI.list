
GB_FREERTOS_STM32F103_GPIO_UART_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004078  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08004188  08004188  00014188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042c4  080042c4  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080042c4  080042c4  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042c4  080042c4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042c4  080042c4  000142c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042c8  080042c8  000142c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080042cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000159c  20000078  08004344  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001614  08004344  00021614  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c8a  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f62  00000000  00000000  00034d2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  00037c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001170  00000000  00000000  00038f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019211  00000000  00000000  0003a088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000129e4  00000000  00000000  00053299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009374c  00000000  00000000  00065c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f93c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fec  00000000  00000000  000f941c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08004170 	.word	0x08004170

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08004170 	.word	0x08004170

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000094 	.word	0x20000094
 800017c:	20000148 	.word	0x20000148

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b096      	sub	sp, #88	; 0x58
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fb49 	bl	800081c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f84d 	bl	8000228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f8ef 	bl	8000370 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000192:	f000 f88d 	bl	80002b0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000196:	f000 f8c1 	bl	800031c <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(Task1, StartDefaultTask, osPriorityNormal, 0, 128);
 800019a:	4b1d      	ldr	r3, [pc, #116]	; (8000210 <main+0x90>)
 800019c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80001a0:	461d      	mov	r5, r3
 80001a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 80001ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80001b2:	2100      	movs	r1, #0
 80001b4:	4618      	mov	r0, r3
 80001b6:	f002 fd07 	bl	8002bc8 <osThreadCreate>
 80001ba:	4603      	mov	r3, r0
 80001bc:	4a15      	ldr	r2, [pc, #84]	; (8000214 <main+0x94>)
 80001be:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 80001c0:	4b15      	ldr	r3, [pc, #84]	; (8000218 <main+0x98>)
 80001c2:	f107 0420 	add.w	r4, r7, #32
 80001c6:	461d      	mov	r5, r3
 80001c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80001d4:	f107 0320 	add.w	r3, r7, #32
 80001d8:	2100      	movs	r1, #0
 80001da:	4618      	mov	r0, r3
 80001dc:	f002 fcf4 	bl	8002bc8 <osThreadCreate>
 80001e0:	4603      	mov	r3, r0
 80001e2:	4a0e      	ldr	r2, [pc, #56]	; (800021c <main+0x9c>)
 80001e4:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 128);
 80001e6:	4b0e      	ldr	r3, [pc, #56]	; (8000220 <main+0xa0>)
 80001e8:	1d3c      	adds	r4, r7, #4
 80001ea:	461d      	mov	r5, r3
 80001ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 80001f8:	1d3b      	adds	r3, r7, #4
 80001fa:	2100      	movs	r1, #0
 80001fc:	4618      	mov	r0, r3
 80001fe:	f002 fce3 	bl	8002bc8 <osThreadCreate>
 8000202:	4603      	mov	r3, r0
 8000204:	4a07      	ldr	r2, [pc, #28]	; (8000224 <main+0xa4>)
 8000206:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000208:	f002 fcd7 	bl	8002bba <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800020c:	e7fe      	b.n	800020c <main+0x8c>
 800020e:	bf00      	nop
 8000210:	080041cc 	.word	0x080041cc
 8000214:	20001100 	.word	0x20001100
 8000218:	080041e8 	.word	0x080041e8
 800021c:	20001148 	.word	0x20001148
 8000220:	08004204 	.word	0x08004204
 8000224:	2000155c 	.word	0x2000155c

08000228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b090      	sub	sp, #64	; 0x40
 800022c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022e:	f107 0318 	add.w	r3, r7, #24
 8000232:	2228      	movs	r2, #40	; 0x28
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f003 fed0 	bl	8003fdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	605a      	str	r2, [r3, #4]
 8000244:	609a      	str	r2, [r3, #8]
 8000246:	60da      	str	r2, [r3, #12]
 8000248:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800024a:	2301      	movs	r3, #1
 800024c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800024e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000252:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000258:	2301      	movs	r3, #1
 800025a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025c:	2302      	movs	r3, #2
 800025e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000260:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000264:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000266:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800026a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026c:	f107 0318 	add.w	r3, r7, #24
 8000270:	4618      	mov	r0, r3
 8000272:	f000 fda5 	bl	8000dc0 <HAL_RCC_OscConfig>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800027c:	f000 f958 	bl	8000530 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000280:	230f      	movs	r3, #15
 8000282:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000284:	2302      	movs	r3, #2
 8000286:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	2101      	movs	r1, #1
 8000298:	4618      	mov	r0, r3
 800029a:	f001 f811 	bl	80012c0 <HAL_RCC_ClockConfig>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80002a4:	f000 f944 	bl	8000530 <Error_Handler>
  }
}
 80002a8:	bf00      	nop
 80002aa:	3740      	adds	r7, #64	; 0x40
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}

080002b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002b4:	4b17      	ldr	r3, [pc, #92]	; (8000314 <MX_SPI1_Init+0x64>)
 80002b6:	4a18      	ldr	r2, [pc, #96]	; (8000318 <MX_SPI1_Init+0x68>)
 80002b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002ba:	4b16      	ldr	r3, [pc, #88]	; (8000314 <MX_SPI1_Init+0x64>)
 80002bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002c2:	4b14      	ldr	r3, [pc, #80]	; (8000314 <MX_SPI1_Init+0x64>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002c8:	4b12      	ldr	r3, [pc, #72]	; (8000314 <MX_SPI1_Init+0x64>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002ce:	4b11      	ldr	r3, [pc, #68]	; (8000314 <MX_SPI1_Init+0x64>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002d4:	4b0f      	ldr	r3, [pc, #60]	; (8000314 <MX_SPI1_Init+0x64>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002da:	4b0e      	ldr	r3, [pc, #56]	; (8000314 <MX_SPI1_Init+0x64>)
 80002dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80002e2:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <MX_SPI1_Init+0x64>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002e8:	4b0a      	ldr	r3, [pc, #40]	; (8000314 <MX_SPI1_Init+0x64>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002ee:	4b09      	ldr	r3, [pc, #36]	; (8000314 <MX_SPI1_Init+0x64>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002f4:	4b07      	ldr	r3, [pc, #28]	; (8000314 <MX_SPI1_Init+0x64>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80002fa:	4b06      	ldr	r3, [pc, #24]	; (8000314 <MX_SPI1_Init+0x64>)
 80002fc:	220a      	movs	r2, #10
 80002fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000300:	4804      	ldr	r0, [pc, #16]	; (8000314 <MX_SPI1_Init+0x64>)
 8000302:	f001 f9a7 	bl	8001654 <HAL_SPI_Init>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800030c:	f000 f910 	bl	8000530 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000310:	bf00      	nop
 8000312:	bd80      	pop	{r7, pc}
 8000314:	20001560 	.word	0x20001560
 8000318:	40013000 	.word	0x40013000

0800031c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000320:	4b11      	ldr	r3, [pc, #68]	; (8000368 <MX_USART1_UART_Init+0x4c>)
 8000322:	4a12      	ldr	r2, [pc, #72]	; (800036c <MX_USART1_UART_Init+0x50>)
 8000324:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000326:	4b10      	ldr	r3, [pc, #64]	; (8000368 <MX_USART1_UART_Init+0x4c>)
 8000328:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800032c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800032e:	4b0e      	ldr	r3, [pc, #56]	; (8000368 <MX_USART1_UART_Init+0x4c>)
 8000330:	2200      	movs	r2, #0
 8000332:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000334:	4b0c      	ldr	r3, [pc, #48]	; (8000368 <MX_USART1_UART_Init+0x4c>)
 8000336:	2200      	movs	r2, #0
 8000338:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800033a:	4b0b      	ldr	r3, [pc, #44]	; (8000368 <MX_USART1_UART_Init+0x4c>)
 800033c:	2200      	movs	r2, #0
 800033e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000340:	4b09      	ldr	r3, [pc, #36]	; (8000368 <MX_USART1_UART_Init+0x4c>)
 8000342:	220c      	movs	r2, #12
 8000344:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000346:	4b08      	ldr	r3, [pc, #32]	; (8000368 <MX_USART1_UART_Init+0x4c>)
 8000348:	2200      	movs	r2, #0
 800034a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <MX_USART1_UART_Init+0x4c>)
 800034e:	2200      	movs	r2, #0
 8000350:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000352:	4805      	ldr	r0, [pc, #20]	; (8000368 <MX_USART1_UART_Init+0x4c>)
 8000354:	f002 f934 	bl	80025c0 <HAL_UART_Init>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800035e:	f000 f8e7 	bl	8000530 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000362:	bf00      	nop
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	20001104 	.word	0x20001104
 800036c:	40013800 	.word	0x40013800

08000370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b088      	sub	sp, #32
 8000374:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000376:	f107 0310 	add.w	r3, r7, #16
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	605a      	str	r2, [r3, #4]
 8000380:	609a      	str	r2, [r3, #8]
 8000382:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000384:	4b27      	ldr	r3, [pc, #156]	; (8000424 <MX_GPIO_Init+0xb4>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	4a26      	ldr	r2, [pc, #152]	; (8000424 <MX_GPIO_Init+0xb4>)
 800038a:	f043 0310 	orr.w	r3, r3, #16
 800038e:	6193      	str	r3, [r2, #24]
 8000390:	4b24      	ldr	r3, [pc, #144]	; (8000424 <MX_GPIO_Init+0xb4>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	f003 0310 	and.w	r3, r3, #16
 8000398:	60fb      	str	r3, [r7, #12]
 800039a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800039c:	4b21      	ldr	r3, [pc, #132]	; (8000424 <MX_GPIO_Init+0xb4>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a20      	ldr	r2, [pc, #128]	; (8000424 <MX_GPIO_Init+0xb4>)
 80003a2:	f043 0320 	orr.w	r3, r3, #32
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b1e      	ldr	r3, [pc, #120]	; (8000424 <MX_GPIO_Init+0xb4>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0320 	and.w	r3, r3, #32
 80003b0:	60bb      	str	r3, [r7, #8]
 80003b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b4:	4b1b      	ldr	r3, [pc, #108]	; (8000424 <MX_GPIO_Init+0xb4>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a1a      	ldr	r2, [pc, #104]	; (8000424 <MX_GPIO_Init+0xb4>)
 80003ba:	f043 0304 	orr.w	r3, r3, #4
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b18      	ldr	r3, [pc, #96]	; (8000424 <MX_GPIO_Init+0xb4>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0304 	and.w	r3, r3, #4
 80003c8:	607b      	str	r3, [r7, #4]
 80003ca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d2:	4815      	ldr	r0, [pc, #84]	; (8000428 <MX_GPIO_Init+0xb8>)
 80003d4:	f000 fcdc 	bl	8000d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	2110      	movs	r1, #16
 80003dc:	4813      	ldr	r0, [pc, #76]	; (800042c <MX_GPIO_Init+0xbc>)
 80003de:	f000 fcd7 	bl	8000d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e8:	2301      	movs	r3, #1
 80003ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ec:	2300      	movs	r3, #0
 80003ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f0:	2302      	movs	r3, #2
 80003f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003f4:	f107 0310 	add.w	r3, r7, #16
 80003f8:	4619      	mov	r1, r3
 80003fa:	480b      	ldr	r0, [pc, #44]	; (8000428 <MX_GPIO_Init+0xb8>)
 80003fc:	f000 fb44 	bl	8000a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000400:	2310      	movs	r3, #16
 8000402:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000404:	2301      	movs	r3, #1
 8000406:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000408:	2300      	movs	r3, #0
 800040a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040c:	2302      	movs	r3, #2
 800040e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000410:	f107 0310 	add.w	r3, r7, #16
 8000414:	4619      	mov	r1, r3
 8000416:	4805      	ldr	r0, [pc, #20]	; (800042c <MX_GPIO_Init+0xbc>)
 8000418:	f000 fb36 	bl	8000a88 <HAL_GPIO_Init>

}
 800041c:	bf00      	nop
 800041e:	3720      	adds	r7, #32
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	40021000 	.word	0x40021000
 8000428:	40011000 	.word	0x40011000
 800042c:	40010800 	.word	0x40010800

08000430 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800043e:	4809      	ldr	r0, [pc, #36]	; (8000464 <StartDefaultTask+0x34>)
 8000440:	f000 fca6 	bl	8000d90 <HAL_GPIO_WritePin>
	  osDelay(1000);
 8000444:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000448:	f002 fc0a 	bl	8002c60 <osDelay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800044c:	2201      	movs	r2, #1
 800044e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000452:	4804      	ldr	r0, [pc, #16]	; (8000464 <StartDefaultTask+0x34>)
 8000454:	f000 fc9c 	bl	8000d90 <HAL_GPIO_WritePin>
	  osDelay(1000);
 8000458:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800045c:	f002 fc00 	bl	8002c60 <osDelay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000460:	e7ea      	b.n	8000438 <StartDefaultTask+0x8>
 8000462:	bf00      	nop
 8000464:	40011000 	.word	0x40011000

08000468 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit(&huart1,"Task 2 is running",20,100);
 8000470:	2364      	movs	r3, #100	; 0x64
 8000472:	2214      	movs	r2, #20
 8000474:	4903      	ldr	r1, [pc, #12]	; (8000484 <StartTask02+0x1c>)
 8000476:	4804      	ldr	r0, [pc, #16]	; (8000488 <StartTask02+0x20>)
 8000478:	f002 f8ef 	bl	800265a <HAL_UART_Transmit>
	  osDelay(200);
 800047c:	20c8      	movs	r0, #200	; 0xc8
 800047e:	f002 fbef 	bl	8002c60 <osDelay>
	  HAL_UART_Transmit(&huart1,"Task 2 is running",20,100);
 8000482:	e7f5      	b.n	8000470 <StartTask02+0x8>
 8000484:	08004220 	.word	0x08004220
 8000488:	20001104 	.word	0x20001104

0800048c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
	W25_Read_ID();
 8000494:	f002 fafa 	bl	8002a8c <W25_Read_ID>
	erase_sector4KB(read_addr1);
 8000498:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800049c:	f002 fb1e 	bl	8002adc <erase_sector4KB>
	if((ReadSR(ReadSR1) & BUSY_BIT) == 0x01)
 80004a0:	2005      	movs	r0, #5
 80004a2:	f002 fb4b 	bl	8002b3c <ReadSR>
 80004a6:	4603      	mov	r3, r0
 80004a8:	f003 0301 	and.w	r3, r3, #1
 80004ac:	2b01      	cmp	r3, #1
 80004ae:	d103      	bne.n	80004b8 <StartTask03+0x2c>
	{
	  erase_sector4KB(read_addr1);
 80004b0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80004b4:	f002 fb12 	bl	8002adc <erase_sector4KB>
	}
	x = ReadSR(ReadSR1);
 80004b8:	2005      	movs	r0, #5
 80004ba:	f002 fb3f 	bl	8002b3c <ReadSR>
 80004be:	4603      	mov	r3, r0
 80004c0:	461a      	mov	r2, r3
 80004c2:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <StartTask03+0x70>)
 80004c4:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(100);

  for(;;)
  {
	 W25_Write_Data(read_addr1,tran_buff,35);
 80004c6:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <StartTask03+0x74>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	2223      	movs	r2, #35	; 0x23
 80004cc:	4619      	mov	r1, r3
 80004ce:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80004d2:	f002 faa3 	bl	8002a1c <W25_Write_Data>
	 osDelay(200);
 80004d6:	20c8      	movs	r0, #200	; 0xc8
 80004d8:	f002 fbc2 	bl	8002c60 <osDelay>
	 W25_Read_Data(read_addr1,rx_buf,35);
 80004dc:	2223      	movs	r2, #35	; 0x23
 80004de:	4909      	ldr	r1, [pc, #36]	; (8000504 <StartTask03+0x78>)
 80004e0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80004e4:	f002 fa66 	bl	80029b4 <W25_Read_Data>
	 osDelay(200);
 80004e8:	20c8      	movs	r0, #200	; 0xc8
 80004ea:	f002 fbb9 	bl	8002c60 <osDelay>
     HAL_UART_Transmit(&huart1,rx_buf,35,100);
 80004ee:	2364      	movs	r3, #100	; 0x64
 80004f0:	2223      	movs	r2, #35	; 0x23
 80004f2:	4904      	ldr	r1, [pc, #16]	; (8000504 <StartTask03+0x78>)
 80004f4:	4804      	ldr	r0, [pc, #16]	; (8000508 <StartTask03+0x7c>)
 80004f6:	f002 f8b0 	bl	800265a <HAL_UART_Transmit>
	 W25_Write_Data(read_addr1,tran_buff,35);
 80004fa:	e7e4      	b.n	80004c6 <StartTask03+0x3a>
 80004fc:	20000348 	.word	0x20000348
 8000500:	20000000 	.word	0x20000000
 8000504:	2000114c 	.word	0x2000114c
 8000508:	20001104 	.word	0x20001104

0800050c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a04      	ldr	r2, [pc, #16]	; (800052c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d101      	bne.n	8000522 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800051e:	f000 f993 	bl	8000848 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40012c00 	.word	0x40012c00

08000530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000534:	b672      	cpsid	i
}
 8000536:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000538:	e7fe      	b.n	8000538 <Error_Handler+0x8>
	...

0800053c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000542:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <HAL_MspInit+0x68>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	4a17      	ldr	r2, [pc, #92]	; (80005a4 <HAL_MspInit+0x68>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	6193      	str	r3, [r2, #24]
 800054e:	4b15      	ldr	r3, [pc, #84]	; (80005a4 <HAL_MspInit+0x68>)
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800055a:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <HAL_MspInit+0x68>)
 800055c:	69db      	ldr	r3, [r3, #28]
 800055e:	4a11      	ldr	r2, [pc, #68]	; (80005a4 <HAL_MspInit+0x68>)
 8000560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000564:	61d3      	str	r3, [r2, #28]
 8000566:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <HAL_MspInit+0x68>)
 8000568:	69db      	ldr	r3, [r3, #28]
 800056a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000572:	2200      	movs	r2, #0
 8000574:	210f      	movs	r1, #15
 8000576:	f06f 0001 	mvn.w	r0, #1
 800057a:	f000 fa5a 	bl	8000a32 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800057e:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <HAL_MspInit+0x6c>)
 8000580:	685b      	ldr	r3, [r3, #4]
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <HAL_MspInit+0x6c>)
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40021000 	.word	0x40021000
 80005a8:	40010000 	.word	0x40010000

080005ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b088      	sub	sp, #32
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b4:	f107 0310 	add.w	r3, r7, #16
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a1b      	ldr	r2, [pc, #108]	; (8000634 <HAL_SPI_MspInit+0x88>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d12f      	bne.n	800062c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005cc:	4b1a      	ldr	r3, [pc, #104]	; (8000638 <HAL_SPI_MspInit+0x8c>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	4a19      	ldr	r2, [pc, #100]	; (8000638 <HAL_SPI_MspInit+0x8c>)
 80005d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005d6:	6193      	str	r3, [r2, #24]
 80005d8:	4b17      	ldr	r3, [pc, #92]	; (8000638 <HAL_SPI_MspInit+0x8c>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e4:	4b14      	ldr	r3, [pc, #80]	; (8000638 <HAL_SPI_MspInit+0x8c>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	4a13      	ldr	r2, [pc, #76]	; (8000638 <HAL_SPI_MspInit+0x8c>)
 80005ea:	f043 0304 	orr.w	r3, r3, #4
 80005ee:	6193      	str	r3, [r2, #24]
 80005f0:	4b11      	ldr	r3, [pc, #68]	; (8000638 <HAL_SPI_MspInit+0x8c>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	f003 0304 	and.w	r3, r3, #4
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80005fc:	23a0      	movs	r3, #160	; 0xa0
 80005fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000600:	2302      	movs	r3, #2
 8000602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000604:	2303      	movs	r3, #3
 8000606:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000608:	f107 0310 	add.w	r3, r7, #16
 800060c:	4619      	mov	r1, r3
 800060e:	480b      	ldr	r0, [pc, #44]	; (800063c <HAL_SPI_MspInit+0x90>)
 8000610:	f000 fa3a 	bl	8000a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000614:	2340      	movs	r3, #64	; 0x40
 8000616:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	4619      	mov	r1, r3
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <HAL_SPI_MspInit+0x90>)
 8000628:	f000 fa2e 	bl	8000a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800062c:	bf00      	nop
 800062e:	3720      	adds	r7, #32
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40013000 	.word	0x40013000
 8000638:	40021000 	.word	0x40021000
 800063c:	40010800 	.word	0x40010800

08000640 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 0310 	add.w	r3, r7, #16
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a1c      	ldr	r2, [pc, #112]	; (80006cc <HAL_UART_MspInit+0x8c>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d131      	bne.n	80006c4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000660:	4b1b      	ldr	r3, [pc, #108]	; (80006d0 <HAL_UART_MspInit+0x90>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a1a      	ldr	r2, [pc, #104]	; (80006d0 <HAL_UART_MspInit+0x90>)
 8000666:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066a:	6193      	str	r3, [r2, #24]
 800066c:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <HAL_UART_MspInit+0x90>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000674:	60fb      	str	r3, [r7, #12]
 8000676:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000678:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <HAL_UART_MspInit+0x90>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	4a14      	ldr	r2, [pc, #80]	; (80006d0 <HAL_UART_MspInit+0x90>)
 800067e:	f043 0304 	orr.w	r3, r3, #4
 8000682:	6193      	str	r3, [r2, #24]
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <HAL_UART_MspInit+0x90>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f003 0304 	and.w	r3, r3, #4
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000690:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000694:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000696:	2302      	movs	r3, #2
 8000698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800069a:	2303      	movs	r3, #3
 800069c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069e:	f107 0310 	add.w	r3, r7, #16
 80006a2:	4619      	mov	r1, r3
 80006a4:	480b      	ldr	r0, [pc, #44]	; (80006d4 <HAL_UART_MspInit+0x94>)
 80006a6:	f000 f9ef 	bl	8000a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b8:	f107 0310 	add.w	r3, r7, #16
 80006bc:	4619      	mov	r1, r3
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <HAL_UART_MspInit+0x94>)
 80006c0:	f000 f9e2 	bl	8000a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006c4:	bf00      	nop
 80006c6:	3720      	adds	r7, #32
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40013800 	.word	0x40013800
 80006d0:	40021000 	.word	0x40021000
 80006d4:	40010800 	.word	0x40010800

080006d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08c      	sub	sp, #48	; 0x30
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80006e8:	2200      	movs	r2, #0
 80006ea:	6879      	ldr	r1, [r7, #4]
 80006ec:	2019      	movs	r0, #25
 80006ee:	f000 f9a0 	bl	8000a32 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80006f2:	2019      	movs	r0, #25
 80006f4:	f000 f9b9 	bl	8000a6a <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80006f8:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <HAL_InitTick+0x9c>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	4a1d      	ldr	r2, [pc, #116]	; (8000774 <HAL_InitTick+0x9c>)
 80006fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000702:	6193      	str	r3, [r2, #24]
 8000704:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <HAL_InitTick+0x9c>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000710:	f107 0210 	add.w	r2, r7, #16
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	4611      	mov	r1, r2
 800071a:	4618      	mov	r0, r3
 800071c:	f000 ff4c 	bl	80015b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000720:	f000 ff36 	bl	8001590 <HAL_RCC_GetPCLK2Freq>
 8000724:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000728:	4a13      	ldr	r2, [pc, #76]	; (8000778 <HAL_InitTick+0xa0>)
 800072a:	fba2 2303 	umull	r2, r3, r2, r3
 800072e:	0c9b      	lsrs	r3, r3, #18
 8000730:	3b01      	subs	r3, #1
 8000732:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <HAL_InitTick+0xa4>)
 8000736:	4a12      	ldr	r2, [pc, #72]	; (8000780 <HAL_InitTick+0xa8>)
 8000738:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <HAL_InitTick+0xa4>)
 800073c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000740:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000742:	4a0e      	ldr	r2, [pc, #56]	; (800077c <HAL_InitTick+0xa4>)
 8000744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000746:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <HAL_InitTick+0xa4>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <HAL_InitTick+0xa4>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000754:	4809      	ldr	r0, [pc, #36]	; (800077c <HAL_InitTick+0xa4>)
 8000756:	f001 fce9 	bl	800212c <HAL_TIM_Base_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d104      	bne.n	800076a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000760:	4806      	ldr	r0, [pc, #24]	; (800077c <HAL_InitTick+0xa4>)
 8000762:	f001 fd3b 	bl	80021dc <HAL_TIM_Base_Start_IT>
 8000766:	4603      	mov	r3, r0
 8000768:	e000      	b.n	800076c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800076a:	2301      	movs	r3, #1
}
 800076c:	4618      	mov	r0, r3
 800076e:	3730      	adds	r7, #48	; 0x30
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40021000 	.word	0x40021000
 8000778:	431bde83 	.word	0x431bde83
 800077c:	200015bc 	.word	0x200015bc
 8000780:	40012c00 	.word	0x40012c00

08000784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000788:	e7fe      	b.n	8000788 <NMI_Handler+0x4>

0800078a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800078e:	e7fe      	b.n	800078e <HardFault_Handler+0x4>

08000790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000794:	e7fe      	b.n	8000794 <MemManage_Handler+0x4>

08000796 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800079a:	e7fe      	b.n	800079a <BusFault_Handler+0x4>

0800079c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <UsageFault_Handler+0x4>

080007a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr
	...

080007b0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80007b4:	4802      	ldr	r0, [pc, #8]	; (80007c0 <TIM1_UP_IRQHandler+0x10>)
 80007b6:	f001 fd63 	bl	8002280 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200015bc 	.word	0x200015bc

080007c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr

080007d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d0:	480c      	ldr	r0, [pc, #48]	; (8000804 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007d2:	490d      	ldr	r1, [pc, #52]	; (8000808 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007d4:	4a0d      	ldr	r2, [pc, #52]	; (800080c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d8:	e002      	b.n	80007e0 <LoopCopyDataInit>

080007da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007de:	3304      	adds	r3, #4

080007e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e4:	d3f9      	bcc.n	80007da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007e6:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007e8:	4c0a      	ldr	r4, [pc, #40]	; (8000814 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007ec:	e001      	b.n	80007f2 <LoopFillZerobss>

080007ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f0:	3204      	adds	r2, #4

080007f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f4:	d3fb      	bcc.n	80007ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007f6:	f7ff ffe5 	bl	80007c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007fa:	f003 fbc9 	bl	8003f90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007fe:	f7ff fcbf 	bl	8000180 <main>
  bx lr
 8000802:	4770      	bx	lr
  ldr r0, =_sdata
 8000804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000808:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800080c:	080042cc 	.word	0x080042cc
  ldr r2, =_sbss
 8000810:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000814:	20001614 	.word	0x20001614

08000818 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000818:	e7fe      	b.n	8000818 <ADC1_2_IRQHandler>
	...

0800081c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000820:	4b08      	ldr	r3, [pc, #32]	; (8000844 <HAL_Init+0x28>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a07      	ldr	r2, [pc, #28]	; (8000844 <HAL_Init+0x28>)
 8000826:	f043 0310 	orr.w	r3, r3, #16
 800082a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800082c:	2003      	movs	r0, #3
 800082e:	f000 f8f5 	bl	8000a1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000832:	200f      	movs	r0, #15
 8000834:	f7ff ff50 	bl	80006d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000838:	f7ff fe80 	bl	800053c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40022000 	.word	0x40022000

08000848 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800084c:	4b05      	ldr	r3, [pc, #20]	; (8000864 <HAL_IncTick+0x1c>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	461a      	mov	r2, r3
 8000852:	4b05      	ldr	r3, [pc, #20]	; (8000868 <HAL_IncTick+0x20>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4413      	add	r3, r2
 8000858:	4a03      	ldr	r2, [pc, #12]	; (8000868 <HAL_IncTick+0x20>)
 800085a:	6013      	str	r3, [r2, #0]
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr
 8000864:	2000000c 	.word	0x2000000c
 8000868:	20001604 	.word	0x20001604

0800086c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  return uwTick;
 8000870:	4b02      	ldr	r3, [pc, #8]	; (800087c <HAL_GetTick+0x10>)
 8000872:	681b      	ldr	r3, [r3, #0]
}
 8000874:	4618      	mov	r0, r3
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr
 800087c:	20001604 	.word	0x20001604

08000880 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000888:	f7ff fff0 	bl	800086c <HAL_GetTick>
 800088c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000898:	d005      	beq.n	80008a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800089a:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <HAL_Delay+0x44>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	461a      	mov	r2, r3
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	4413      	add	r3, r2
 80008a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008a6:	bf00      	nop
 80008a8:	f7ff ffe0 	bl	800086c <HAL_GetTick>
 80008ac:	4602      	mov	r2, r0
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	1ad3      	subs	r3, r2, r3
 80008b2:	68fa      	ldr	r2, [r7, #12]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d8f7      	bhi.n	80008a8 <HAL_Delay+0x28>
  {
  }
}
 80008b8:	bf00      	nop
 80008ba:	bf00      	nop
 80008bc:	3710      	adds	r7, #16
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	2000000c 	.word	0x2000000c

080008c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f003 0307 	and.w	r3, r3, #7
 80008d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <__NVIC_SetPriorityGrouping+0x44>)
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008e4:	4013      	ands	r3, r2
 80008e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008fa:	4a04      	ldr	r2, [pc, #16]	; (800090c <__NVIC_SetPriorityGrouping+0x44>)
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	60d3      	str	r3, [r2, #12]
}
 8000900:	bf00      	nop
 8000902:	3714      	adds	r7, #20
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000914:	4b04      	ldr	r3, [pc, #16]	; (8000928 <__NVIC_GetPriorityGrouping+0x18>)
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	0a1b      	lsrs	r3, r3, #8
 800091a:	f003 0307 	and.w	r3, r3, #7
}
 800091e:	4618      	mov	r0, r3
 8000920:	46bd      	mov	sp, r7
 8000922:	bc80      	pop	{r7}
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093a:	2b00      	cmp	r3, #0
 800093c:	db0b      	blt.n	8000956 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	f003 021f 	and.w	r2, r3, #31
 8000944:	4906      	ldr	r1, [pc, #24]	; (8000960 <__NVIC_EnableIRQ+0x34>)
 8000946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094a:	095b      	lsrs	r3, r3, #5
 800094c:	2001      	movs	r0, #1
 800094e:	fa00 f202 	lsl.w	r2, r0, r2
 8000952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr
 8000960:	e000e100 	.word	0xe000e100

08000964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	6039      	str	r1, [r7, #0]
 800096e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000974:	2b00      	cmp	r3, #0
 8000976:	db0a      	blt.n	800098e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	b2da      	uxtb	r2, r3
 800097c:	490c      	ldr	r1, [pc, #48]	; (80009b0 <__NVIC_SetPriority+0x4c>)
 800097e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000982:	0112      	lsls	r2, r2, #4
 8000984:	b2d2      	uxtb	r2, r2
 8000986:	440b      	add	r3, r1
 8000988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800098c:	e00a      	b.n	80009a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	b2da      	uxtb	r2, r3
 8000992:	4908      	ldr	r1, [pc, #32]	; (80009b4 <__NVIC_SetPriority+0x50>)
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	f003 030f 	and.w	r3, r3, #15
 800099a:	3b04      	subs	r3, #4
 800099c:	0112      	lsls	r2, r2, #4
 800099e:	b2d2      	uxtb	r2, r2
 80009a0:	440b      	add	r3, r1
 80009a2:	761a      	strb	r2, [r3, #24]
}
 80009a4:	bf00      	nop
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000e100 	.word	0xe000e100
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b089      	sub	sp, #36	; 0x24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	f1c3 0307 	rsb	r3, r3, #7
 80009d2:	2b04      	cmp	r3, #4
 80009d4:	bf28      	it	cs
 80009d6:	2304      	movcs	r3, #4
 80009d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	3304      	adds	r3, #4
 80009de:	2b06      	cmp	r3, #6
 80009e0:	d902      	bls.n	80009e8 <NVIC_EncodePriority+0x30>
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	3b03      	subs	r3, #3
 80009e6:	e000      	b.n	80009ea <NVIC_EncodePriority+0x32>
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ec:	f04f 32ff 	mov.w	r2, #4294967295
 80009f0:	69bb      	ldr	r3, [r7, #24]
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	43da      	mvns	r2, r3
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	401a      	ands	r2, r3
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a00:	f04f 31ff 	mov.w	r1, #4294967295
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0a:	43d9      	mvns	r1, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a10:	4313      	orrs	r3, r2
         );
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3724      	adds	r7, #36	; 0x24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr

08000a1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f7ff ff4f 	bl	80008c8 <__NVIC_SetPriorityGrouping>
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b086      	sub	sp, #24
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	4603      	mov	r3, r0
 8000a3a:	60b9      	str	r1, [r7, #8]
 8000a3c:	607a      	str	r2, [r7, #4]
 8000a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a44:	f7ff ff64 	bl	8000910 <__NVIC_GetPriorityGrouping>
 8000a48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	68b9      	ldr	r1, [r7, #8]
 8000a4e:	6978      	ldr	r0, [r7, #20]
 8000a50:	f7ff ffb2 	bl	80009b8 <NVIC_EncodePriority>
 8000a54:	4602      	mov	r2, r0
 8000a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ff81 	bl	8000964 <__NVIC_SetPriority>
}
 8000a62:	bf00      	nop
 8000a64:	3718      	adds	r7, #24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b082      	sub	sp, #8
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	4603      	mov	r3, r0
 8000a72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff ff57 	bl	800092c <__NVIC_EnableIRQ>
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b08b      	sub	sp, #44	; 0x2c
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a92:	2300      	movs	r3, #0
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a96:	2300      	movs	r3, #0
 8000a98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a9a:	e169      	b.n	8000d70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	69fa      	ldr	r2, [r7, #28]
 8000aac:	4013      	ands	r3, r2
 8000aae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ab0:	69ba      	ldr	r2, [r7, #24]
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	f040 8158 	bne.w	8000d6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	4a9a      	ldr	r2, [pc, #616]	; (8000d28 <HAL_GPIO_Init+0x2a0>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d05e      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
 8000ac4:	4a98      	ldr	r2, [pc, #608]	; (8000d28 <HAL_GPIO_Init+0x2a0>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d875      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000aca:	4a98      	ldr	r2, [pc, #608]	; (8000d2c <HAL_GPIO_Init+0x2a4>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d058      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
 8000ad0:	4a96      	ldr	r2, [pc, #600]	; (8000d2c <HAL_GPIO_Init+0x2a4>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d86f      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000ad6:	4a96      	ldr	r2, [pc, #600]	; (8000d30 <HAL_GPIO_Init+0x2a8>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d052      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
 8000adc:	4a94      	ldr	r2, [pc, #592]	; (8000d30 <HAL_GPIO_Init+0x2a8>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d869      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000ae2:	4a94      	ldr	r2, [pc, #592]	; (8000d34 <HAL_GPIO_Init+0x2ac>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d04c      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
 8000ae8:	4a92      	ldr	r2, [pc, #584]	; (8000d34 <HAL_GPIO_Init+0x2ac>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d863      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000aee:	4a92      	ldr	r2, [pc, #584]	; (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d046      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
 8000af4:	4a90      	ldr	r2, [pc, #576]	; (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d85d      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000afa:	2b12      	cmp	r3, #18
 8000afc:	d82a      	bhi.n	8000b54 <HAL_GPIO_Init+0xcc>
 8000afe:	2b12      	cmp	r3, #18
 8000b00:	d859      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000b02:	a201      	add	r2, pc, #4	; (adr r2, 8000b08 <HAL_GPIO_Init+0x80>)
 8000b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b08:	08000b83 	.word	0x08000b83
 8000b0c:	08000b5d 	.word	0x08000b5d
 8000b10:	08000b6f 	.word	0x08000b6f
 8000b14:	08000bb1 	.word	0x08000bb1
 8000b18:	08000bb7 	.word	0x08000bb7
 8000b1c:	08000bb7 	.word	0x08000bb7
 8000b20:	08000bb7 	.word	0x08000bb7
 8000b24:	08000bb7 	.word	0x08000bb7
 8000b28:	08000bb7 	.word	0x08000bb7
 8000b2c:	08000bb7 	.word	0x08000bb7
 8000b30:	08000bb7 	.word	0x08000bb7
 8000b34:	08000bb7 	.word	0x08000bb7
 8000b38:	08000bb7 	.word	0x08000bb7
 8000b3c:	08000bb7 	.word	0x08000bb7
 8000b40:	08000bb7 	.word	0x08000bb7
 8000b44:	08000bb7 	.word	0x08000bb7
 8000b48:	08000bb7 	.word	0x08000bb7
 8000b4c:	08000b65 	.word	0x08000b65
 8000b50:	08000b79 	.word	0x08000b79
 8000b54:	4a79      	ldr	r2, [pc, #484]	; (8000d3c <HAL_GPIO_Init+0x2b4>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d013      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b5a:	e02c      	b.n	8000bb6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	623b      	str	r3, [r7, #32]
          break;
 8000b62:	e029      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	3304      	adds	r3, #4
 8000b6a:	623b      	str	r3, [r7, #32]
          break;
 8000b6c:	e024      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	3308      	adds	r3, #8
 8000b74:	623b      	str	r3, [r7, #32]
          break;
 8000b76:	e01f      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	330c      	adds	r3, #12
 8000b7e:	623b      	str	r3, [r7, #32]
          break;
 8000b80:	e01a      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d102      	bne.n	8000b90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	623b      	str	r3, [r7, #32]
          break;
 8000b8e:	e013      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	689b      	ldr	r3, [r3, #8]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d105      	bne.n	8000ba4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b98:	2308      	movs	r3, #8
 8000b9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	69fa      	ldr	r2, [r7, #28]
 8000ba0:	611a      	str	r2, [r3, #16]
          break;
 8000ba2:	e009      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ba4:	2308      	movs	r3, #8
 8000ba6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	69fa      	ldr	r2, [r7, #28]
 8000bac:	615a      	str	r2, [r3, #20]
          break;
 8000bae:	e003      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	623b      	str	r3, [r7, #32]
          break;
 8000bb4:	e000      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          break;
 8000bb6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	2bff      	cmp	r3, #255	; 0xff
 8000bbc:	d801      	bhi.n	8000bc2 <HAL_GPIO_Init+0x13a>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	e001      	b.n	8000bc6 <HAL_GPIO_Init+0x13e>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	2bff      	cmp	r3, #255	; 0xff
 8000bcc:	d802      	bhi.n	8000bd4 <HAL_GPIO_Init+0x14c>
 8000bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	e002      	b.n	8000bda <HAL_GPIO_Init+0x152>
 8000bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd6:	3b08      	subs	r3, #8
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	210f      	movs	r1, #15
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	fa01 f303 	lsl.w	r3, r1, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	401a      	ands	r2, r3
 8000bec:	6a39      	ldr	r1, [r7, #32]
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf4:	431a      	orrs	r2, r3
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f000 80b1 	beq.w	8000d6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c08:	4b4d      	ldr	r3, [pc, #308]	; (8000d40 <HAL_GPIO_Init+0x2b8>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	4a4c      	ldr	r2, [pc, #304]	; (8000d40 <HAL_GPIO_Init+0x2b8>)
 8000c0e:	f043 0301 	orr.w	r3, r3, #1
 8000c12:	6193      	str	r3, [r2, #24]
 8000c14:	4b4a      	ldr	r3, [pc, #296]	; (8000d40 <HAL_GPIO_Init+0x2b8>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	f003 0301 	and.w	r3, r3, #1
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c20:	4a48      	ldr	r2, [pc, #288]	; (8000d44 <HAL_GPIO_Init+0x2bc>)
 8000c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c24:	089b      	lsrs	r3, r3, #2
 8000c26:	3302      	adds	r3, #2
 8000c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c30:	f003 0303 	and.w	r3, r3, #3
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	220f      	movs	r2, #15
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	4013      	ands	r3, r2
 8000c42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a40      	ldr	r2, [pc, #256]	; (8000d48 <HAL_GPIO_Init+0x2c0>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d013      	beq.n	8000c74 <HAL_GPIO_Init+0x1ec>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a3f      	ldr	r2, [pc, #252]	; (8000d4c <HAL_GPIO_Init+0x2c4>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d00d      	beq.n	8000c70 <HAL_GPIO_Init+0x1e8>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a3e      	ldr	r2, [pc, #248]	; (8000d50 <HAL_GPIO_Init+0x2c8>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d007      	beq.n	8000c6c <HAL_GPIO_Init+0x1e4>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a3d      	ldr	r2, [pc, #244]	; (8000d54 <HAL_GPIO_Init+0x2cc>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d101      	bne.n	8000c68 <HAL_GPIO_Init+0x1e0>
 8000c64:	2303      	movs	r3, #3
 8000c66:	e006      	b.n	8000c76 <HAL_GPIO_Init+0x1ee>
 8000c68:	2304      	movs	r3, #4
 8000c6a:	e004      	b.n	8000c76 <HAL_GPIO_Init+0x1ee>
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	e002      	b.n	8000c76 <HAL_GPIO_Init+0x1ee>
 8000c70:	2301      	movs	r3, #1
 8000c72:	e000      	b.n	8000c76 <HAL_GPIO_Init+0x1ee>
 8000c74:	2300      	movs	r3, #0
 8000c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c78:	f002 0203 	and.w	r2, r2, #3
 8000c7c:	0092      	lsls	r2, r2, #2
 8000c7e:	4093      	lsls	r3, r2
 8000c80:	68fa      	ldr	r2, [r7, #12]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c86:	492f      	ldr	r1, [pc, #188]	; (8000d44 <HAL_GPIO_Init+0x2bc>)
 8000c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8a:	089b      	lsrs	r3, r3, #2
 8000c8c:	3302      	adds	r3, #2
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d006      	beq.n	8000cae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ca0:	4b2d      	ldr	r3, [pc, #180]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	492c      	ldr	r1, [pc, #176]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	600b      	str	r3, [r1, #0]
 8000cac:	e006      	b.n	8000cbc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cae:	4b2a      	ldr	r3, [pc, #168]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	69bb      	ldr	r3, [r7, #24]
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	4928      	ldr	r1, [pc, #160]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000cb8:	4013      	ands	r3, r2
 8000cba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d006      	beq.n	8000cd6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cc8:	4b23      	ldr	r3, [pc, #140]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000cca:	685a      	ldr	r2, [r3, #4]
 8000ccc:	4922      	ldr	r1, [pc, #136]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	604b      	str	r3, [r1, #4]
 8000cd4:	e006      	b.n	8000ce4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cd6:	4b20      	ldr	r3, [pc, #128]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000cd8:	685a      	ldr	r2, [r3, #4]
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	491e      	ldr	r1, [pc, #120]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d006      	beq.n	8000cfe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cf0:	4b19      	ldr	r3, [pc, #100]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000cf2:	689a      	ldr	r2, [r3, #8]
 8000cf4:	4918      	ldr	r1, [pc, #96]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	608b      	str	r3, [r1, #8]
 8000cfc:	e006      	b.n	8000d0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cfe:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000d00:	689a      	ldr	r2, [r3, #8]
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	43db      	mvns	r3, r3
 8000d06:	4914      	ldr	r1, [pc, #80]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000d08:	4013      	ands	r3, r2
 8000d0a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d021      	beq.n	8000d5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d18:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000d1a:	68da      	ldr	r2, [r3, #12]
 8000d1c:	490e      	ldr	r1, [pc, #56]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	60cb      	str	r3, [r1, #12]
 8000d24:	e021      	b.n	8000d6a <HAL_GPIO_Init+0x2e2>
 8000d26:	bf00      	nop
 8000d28:	10320000 	.word	0x10320000
 8000d2c:	10310000 	.word	0x10310000
 8000d30:	10220000 	.word	0x10220000
 8000d34:	10210000 	.word	0x10210000
 8000d38:	10120000 	.word	0x10120000
 8000d3c:	10110000 	.word	0x10110000
 8000d40:	40021000 	.word	0x40021000
 8000d44:	40010000 	.word	0x40010000
 8000d48:	40010800 	.word	0x40010800
 8000d4c:	40010c00 	.word	0x40010c00
 8000d50:	40011000 	.word	0x40011000
 8000d54:	40011400 	.word	0x40011400
 8000d58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d5c:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <HAL_GPIO_Init+0x304>)
 8000d5e:	68da      	ldr	r2, [r3, #12]
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	43db      	mvns	r3, r3
 8000d64:	4909      	ldr	r1, [pc, #36]	; (8000d8c <HAL_GPIO_Init+0x304>)
 8000d66:	4013      	ands	r3, r2
 8000d68:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d76:	fa22 f303 	lsr.w	r3, r2, r3
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f47f ae8e 	bne.w	8000a9c <HAL_GPIO_Init+0x14>
  }
}
 8000d80:	bf00      	nop
 8000d82:	bf00      	nop
 8000d84:	372c      	adds	r7, #44	; 0x2c
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	40010400 	.word	0x40010400

08000d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	460b      	mov	r3, r1
 8000d9a:	807b      	strh	r3, [r7, #2]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000da0:	787b      	ldrb	r3, [r7, #1]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d003      	beq.n	8000dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000da6:	887a      	ldrh	r2, [r7, #2]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000dac:	e003      	b.n	8000db6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dae:	887b      	ldrh	r3, [r7, #2]
 8000db0:	041a      	lsls	r2, r3, #16
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	611a      	str	r2, [r3, #16]
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d101      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e26c      	b.n	80012ac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f000 8087 	beq.w	8000eee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000de0:	4b92      	ldr	r3, [pc, #584]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f003 030c 	and.w	r3, r3, #12
 8000de8:	2b04      	cmp	r3, #4
 8000dea:	d00c      	beq.n	8000e06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dec:	4b8f      	ldr	r3, [pc, #572]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 030c 	and.w	r3, r3, #12
 8000df4:	2b08      	cmp	r3, #8
 8000df6:	d112      	bne.n	8000e1e <HAL_RCC_OscConfig+0x5e>
 8000df8:	4b8c      	ldr	r3, [pc, #560]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e04:	d10b      	bne.n	8000e1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e06:	4b89      	ldr	r3, [pc, #548]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d06c      	beq.n	8000eec <HAL_RCC_OscConfig+0x12c>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d168      	bne.n	8000eec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e246      	b.n	80012ac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e26:	d106      	bne.n	8000e36 <HAL_RCC_OscConfig+0x76>
 8000e28:	4b80      	ldr	r3, [pc, #512]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a7f      	ldr	r2, [pc, #508]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e32:	6013      	str	r3, [r2, #0]
 8000e34:	e02e      	b.n	8000e94 <HAL_RCC_OscConfig+0xd4>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d10c      	bne.n	8000e58 <HAL_RCC_OscConfig+0x98>
 8000e3e:	4b7b      	ldr	r3, [pc, #492]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a7a      	ldr	r2, [pc, #488]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000e44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e48:	6013      	str	r3, [r2, #0]
 8000e4a:	4b78      	ldr	r3, [pc, #480]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a77      	ldr	r2, [pc, #476]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000e50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e54:	6013      	str	r3, [r2, #0]
 8000e56:	e01d      	b.n	8000e94 <HAL_RCC_OscConfig+0xd4>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e60:	d10c      	bne.n	8000e7c <HAL_RCC_OscConfig+0xbc>
 8000e62:	4b72      	ldr	r3, [pc, #456]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a71      	ldr	r2, [pc, #452]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000e68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e6c:	6013      	str	r3, [r2, #0]
 8000e6e:	4b6f      	ldr	r3, [pc, #444]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a6e      	ldr	r2, [pc, #440]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e78:	6013      	str	r3, [r2, #0]
 8000e7a:	e00b      	b.n	8000e94 <HAL_RCC_OscConfig+0xd4>
 8000e7c:	4b6b      	ldr	r3, [pc, #428]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a6a      	ldr	r2, [pc, #424]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e86:	6013      	str	r3, [r2, #0]
 8000e88:	4b68      	ldr	r3, [pc, #416]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a67      	ldr	r2, [pc, #412]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000e8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d013      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e9c:	f7ff fce6 	bl	800086c <HAL_GetTick>
 8000ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ea2:	e008      	b.n	8000eb6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ea4:	f7ff fce2 	bl	800086c <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	2b64      	cmp	r3, #100	; 0x64
 8000eb0:	d901      	bls.n	8000eb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e1fa      	b.n	80012ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eb6:	4b5d      	ldr	r3, [pc, #372]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d0f0      	beq.n	8000ea4 <HAL_RCC_OscConfig+0xe4>
 8000ec2:	e014      	b.n	8000eee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec4:	f7ff fcd2 	bl	800086c <HAL_GetTick>
 8000ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eca:	e008      	b.n	8000ede <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ecc:	f7ff fcce 	bl	800086c <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	2b64      	cmp	r3, #100	; 0x64
 8000ed8:	d901      	bls.n	8000ede <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000eda:	2303      	movs	r3, #3
 8000edc:	e1e6      	b.n	80012ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ede:	4b53      	ldr	r3, [pc, #332]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d1f0      	bne.n	8000ecc <HAL_RCC_OscConfig+0x10c>
 8000eea:	e000      	b.n	8000eee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d063      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000efa:	4b4c      	ldr	r3, [pc, #304]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f003 030c 	and.w	r3, r3, #12
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d00b      	beq.n	8000f1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f06:	4b49      	ldr	r3, [pc, #292]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f003 030c 	and.w	r3, r3, #12
 8000f0e:	2b08      	cmp	r3, #8
 8000f10:	d11c      	bne.n	8000f4c <HAL_RCC_OscConfig+0x18c>
 8000f12:	4b46      	ldr	r3, [pc, #280]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d116      	bne.n	8000f4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f1e:	4b43      	ldr	r3, [pc, #268]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d005      	beq.n	8000f36 <HAL_RCC_OscConfig+0x176>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	691b      	ldr	r3, [r3, #16]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d001      	beq.n	8000f36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e1ba      	b.n	80012ac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f36:	4b3d      	ldr	r3, [pc, #244]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	4939      	ldr	r1, [pc, #228]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000f46:	4313      	orrs	r3, r2
 8000f48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f4a:	e03a      	b.n	8000fc2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	691b      	ldr	r3, [r3, #16]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d020      	beq.n	8000f96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f54:	4b36      	ldr	r3, [pc, #216]	; (8001030 <HAL_RCC_OscConfig+0x270>)
 8000f56:	2201      	movs	r2, #1
 8000f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f5a:	f7ff fc87 	bl	800086c <HAL_GetTick>
 8000f5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f60:	e008      	b.n	8000f74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f62:	f7ff fc83 	bl	800086c <HAL_GetTick>
 8000f66:	4602      	mov	r2, r0
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d901      	bls.n	8000f74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f70:	2303      	movs	r3, #3
 8000f72:	e19b      	b.n	80012ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f74:	4b2d      	ldr	r3, [pc, #180]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f003 0302 	and.w	r3, r3, #2
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d0f0      	beq.n	8000f62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f80:	4b2a      	ldr	r3, [pc, #168]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	695b      	ldr	r3, [r3, #20]
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	4927      	ldr	r1, [pc, #156]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000f90:	4313      	orrs	r3, r2
 8000f92:	600b      	str	r3, [r1, #0]
 8000f94:	e015      	b.n	8000fc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f96:	4b26      	ldr	r3, [pc, #152]	; (8001030 <HAL_RCC_OscConfig+0x270>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9c:	f7ff fc66 	bl	800086c <HAL_GetTick>
 8000fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fa2:	e008      	b.n	8000fb6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fa4:	f7ff fc62 	bl	800086c <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d901      	bls.n	8000fb6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e17a      	b.n	80012ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fb6:	4b1d      	ldr	r3, [pc, #116]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1f0      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f003 0308 	and.w	r3, r3, #8
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d03a      	beq.n	8001044 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d019      	beq.n	800100a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fd6:	4b17      	ldr	r3, [pc, #92]	; (8001034 <HAL_RCC_OscConfig+0x274>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fdc:	f7ff fc46 	bl	800086c <HAL_GetTick>
 8000fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fe2:	e008      	b.n	8000ff6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fe4:	f7ff fc42 	bl	800086c <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d901      	bls.n	8000ff6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e15a      	b.n	80012ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d0f0      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001002:	2001      	movs	r0, #1
 8001004:	f000 fb08 	bl	8001618 <RCC_Delay>
 8001008:	e01c      	b.n	8001044 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <HAL_RCC_OscConfig+0x274>)
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001010:	f7ff fc2c 	bl	800086c <HAL_GetTick>
 8001014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001016:	e00f      	b.n	8001038 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001018:	f7ff fc28 	bl	800086c <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b02      	cmp	r3, #2
 8001024:	d908      	bls.n	8001038 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e140      	b.n	80012ac <HAL_RCC_OscConfig+0x4ec>
 800102a:	bf00      	nop
 800102c:	40021000 	.word	0x40021000
 8001030:	42420000 	.word	0x42420000
 8001034:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001038:	4b9e      	ldr	r3, [pc, #632]	; (80012b4 <HAL_RCC_OscConfig+0x4f4>)
 800103a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103c:	f003 0302 	and.w	r3, r3, #2
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1e9      	bne.n	8001018 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0304 	and.w	r3, r3, #4
 800104c:	2b00      	cmp	r3, #0
 800104e:	f000 80a6 	beq.w	800119e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001052:	2300      	movs	r3, #0
 8001054:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001056:	4b97      	ldr	r3, [pc, #604]	; (80012b4 <HAL_RCC_OscConfig+0x4f4>)
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d10d      	bne.n	800107e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001062:	4b94      	ldr	r3, [pc, #592]	; (80012b4 <HAL_RCC_OscConfig+0x4f4>)
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	4a93      	ldr	r2, [pc, #588]	; (80012b4 <HAL_RCC_OscConfig+0x4f4>)
 8001068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800106c:	61d3      	str	r3, [r2, #28]
 800106e:	4b91      	ldr	r3, [pc, #580]	; (80012b4 <HAL_RCC_OscConfig+0x4f4>)
 8001070:	69db      	ldr	r3, [r3, #28]
 8001072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800107a:	2301      	movs	r3, #1
 800107c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800107e:	4b8e      	ldr	r3, [pc, #568]	; (80012b8 <HAL_RCC_OscConfig+0x4f8>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001086:	2b00      	cmp	r3, #0
 8001088:	d118      	bne.n	80010bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800108a:	4b8b      	ldr	r3, [pc, #556]	; (80012b8 <HAL_RCC_OscConfig+0x4f8>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a8a      	ldr	r2, [pc, #552]	; (80012b8 <HAL_RCC_OscConfig+0x4f8>)
 8001090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001094:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001096:	f7ff fbe9 	bl	800086c <HAL_GetTick>
 800109a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800109c:	e008      	b.n	80010b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800109e:	f7ff fbe5 	bl	800086c <HAL_GetTick>
 80010a2:	4602      	mov	r2, r0
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	2b64      	cmp	r3, #100	; 0x64
 80010aa:	d901      	bls.n	80010b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	e0fd      	b.n	80012ac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010b0:	4b81      	ldr	r3, [pc, #516]	; (80012b8 <HAL_RCC_OscConfig+0x4f8>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d0f0      	beq.n	800109e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d106      	bne.n	80010d2 <HAL_RCC_OscConfig+0x312>
 80010c4:	4b7b      	ldr	r3, [pc, #492]	; (80012b4 <HAL_RCC_OscConfig+0x4f4>)
 80010c6:	6a1b      	ldr	r3, [r3, #32]
 80010c8:	4a7a      	ldr	r2, [pc, #488]	; (80012b4 <HAL_RCC_OscConfig+0x4f4>)
 80010ca:	f043 0301 	orr.w	r3, r3, #1
 80010ce:	6213      	str	r3, [r2, #32]
 80010d0:	e02d      	b.n	800112e <HAL_RCC_OscConfig+0x36e>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d10c      	bne.n	80010f4 <HAL_RCC_OscConfig+0x334>
 80010da:	4b76      	ldr	r3, [pc, #472]	; (80012b4 <HAL_RCC_OscConfig+0x4f4>)
 80010dc:	6a1b      	ldr	r3, [r3, #32]
 80010de:	4a75      	ldr	r2, [pc, #468]	; (80012b4 <HAL_RCC_OscConfig+0x4f4>)
 80010e0:	f023 0301 	bic.w	r3, r3, #1
 80010e4:	6213      	str	r3, [r2, #32]
 80010e6:	4b73      	ldr	r3, [pc, #460]	; (80012b4 <HAL_RCC_OscConfig+0x4f4>)
 80010e8:	6a1b      	ldr	r3, [r3, #32]
 80010ea:	4a72      	ldr	r2, [pc, #456]	; (80012b4 <HAL_RCC_OscConfig+0x4f4>)
 80010ec:	f023 0304 	bic.w	r3, r3, #4
 80010f0:	6213      	str	r3, [r2, #32]
 80010f2:	e01c      	b.n	800112e <HAL_RCC_OscConfig+0x36e>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	2b05      	cmp	r3, #5
 80010fa:	d10c      	bne.n	8001116 <HAL_RCC_OscConfig+0x356>
 80010fc:	4b6d      	ldr	r3, [pc, #436]	; (80012b4 <HAL_RCC_OscConfig+0x4f4>)
 80010fe:	6a1b      	ldr	r3, [r3, #32]
 8001100:	4a6c      	ldr	r2, [pc, #432]	; (80012b4 <HAL_RCC_OscConfig+0x4f4>)
 8001102:	f043 0304 	orr.w	r3, r3, #4
 8001106:	6213      	str	r3, [r2, #32]
 8001108:	4b6a      	ldr	r3, [pc, #424]	; (80012b4 <HAL_RCC_OscConfig+0x4f4>)
 800110a:	6a1b      	ldr	r3, [r3, #32]
 800110c:	4a69      	ldr	r2, [pc, #420]	; (80012b4 <HAL_RCC_OscConfig+0x4f4>)
 800110e:	f043 0301 	orr.w	r3, r3, #1
 8001112:	6213      	str	r3, [r2, #32]
 8001114:	e00b      	b.n	800112e <HAL_RCC_OscConfig+0x36e>
 8001116:	4b67      	ldr	r3, [pc, #412]	; (80012b4 <HAL_RCC_OscConfig+0x4f4>)
 8001118:	6a1b      	ldr	r3, [r3, #32]
 800111a:	4a66      	ldr	r2, [pc, #408]	; (80012b4 <HAL_RCC_OscConfig+0x4f4>)
 800111c:	f023 0301 	bic.w	r3, r3, #1
 8001120:	6213      	str	r3, [r2, #32]
 8001122:	4b64      	ldr	r3, [pc, #400]	; (80012b4 <HAL_RCC_OscConfig+0x4f4>)
 8001124:	6a1b      	ldr	r3, [r3, #32]
 8001126:	4a63      	ldr	r2, [pc, #396]	; (80012b4 <HAL_RCC_OscConfig+0x4f4>)
 8001128:	f023 0304 	bic.w	r3, r3, #4
 800112c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d015      	beq.n	8001162 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001136:	f7ff fb99 	bl	800086c <HAL_GetTick>
 800113a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800113c:	e00a      	b.n	8001154 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800113e:	f7ff fb95 	bl	800086c <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	f241 3288 	movw	r2, #5000	; 0x1388
 800114c:	4293      	cmp	r3, r2
 800114e:	d901      	bls.n	8001154 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001150:	2303      	movs	r3, #3
 8001152:	e0ab      	b.n	80012ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001154:	4b57      	ldr	r3, [pc, #348]	; (80012b4 <HAL_RCC_OscConfig+0x4f4>)
 8001156:	6a1b      	ldr	r3, [r3, #32]
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0ee      	beq.n	800113e <HAL_RCC_OscConfig+0x37e>
 8001160:	e014      	b.n	800118c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001162:	f7ff fb83 	bl	800086c <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001168:	e00a      	b.n	8001180 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800116a:	f7ff fb7f 	bl	800086c <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	f241 3288 	movw	r2, #5000	; 0x1388
 8001178:	4293      	cmp	r3, r2
 800117a:	d901      	bls.n	8001180 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e095      	b.n	80012ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001180:	4b4c      	ldr	r3, [pc, #304]	; (80012b4 <HAL_RCC_OscConfig+0x4f4>)
 8001182:	6a1b      	ldr	r3, [r3, #32]
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d1ee      	bne.n	800116a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800118c:	7dfb      	ldrb	r3, [r7, #23]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d105      	bne.n	800119e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001192:	4b48      	ldr	r3, [pc, #288]	; (80012b4 <HAL_RCC_OscConfig+0x4f4>)
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	4a47      	ldr	r2, [pc, #284]	; (80012b4 <HAL_RCC_OscConfig+0x4f4>)
 8001198:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800119c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f000 8081 	beq.w	80012aa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011a8:	4b42      	ldr	r3, [pc, #264]	; (80012b4 <HAL_RCC_OscConfig+0x4f4>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 030c 	and.w	r3, r3, #12
 80011b0:	2b08      	cmp	r3, #8
 80011b2:	d061      	beq.n	8001278 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69db      	ldr	r3, [r3, #28]
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d146      	bne.n	800124a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011bc:	4b3f      	ldr	r3, [pc, #252]	; (80012bc <HAL_RCC_OscConfig+0x4fc>)
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c2:	f7ff fb53 	bl	800086c <HAL_GetTick>
 80011c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011c8:	e008      	b.n	80011dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011ca:	f7ff fb4f 	bl	800086c <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d901      	bls.n	80011dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e067      	b.n	80012ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011dc:	4b35      	ldr	r3, [pc, #212]	; (80012b4 <HAL_RCC_OscConfig+0x4f4>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1f0      	bne.n	80011ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a1b      	ldr	r3, [r3, #32]
 80011ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011f0:	d108      	bne.n	8001204 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011f2:	4b30      	ldr	r3, [pc, #192]	; (80012b4 <HAL_RCC_OscConfig+0x4f4>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	492d      	ldr	r1, [pc, #180]	; (80012b4 <HAL_RCC_OscConfig+0x4f4>)
 8001200:	4313      	orrs	r3, r2
 8001202:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001204:	4b2b      	ldr	r3, [pc, #172]	; (80012b4 <HAL_RCC_OscConfig+0x4f4>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a19      	ldr	r1, [r3, #32]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001214:	430b      	orrs	r3, r1
 8001216:	4927      	ldr	r1, [pc, #156]	; (80012b4 <HAL_RCC_OscConfig+0x4f4>)
 8001218:	4313      	orrs	r3, r2
 800121a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800121c:	4b27      	ldr	r3, [pc, #156]	; (80012bc <HAL_RCC_OscConfig+0x4fc>)
 800121e:	2201      	movs	r2, #1
 8001220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001222:	f7ff fb23 	bl	800086c <HAL_GetTick>
 8001226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001228:	e008      	b.n	800123c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800122a:	f7ff fb1f 	bl	800086c <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e037      	b.n	80012ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800123c:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <HAL_RCC_OscConfig+0x4f4>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d0f0      	beq.n	800122a <HAL_RCC_OscConfig+0x46a>
 8001248:	e02f      	b.n	80012aa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800124a:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <HAL_RCC_OscConfig+0x4fc>)
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001250:	f7ff fb0c 	bl	800086c <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001258:	f7ff fb08 	bl	800086c <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e020      	b.n	80012ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800126a:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <HAL_RCC_OscConfig+0x4f4>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1f0      	bne.n	8001258 <HAL_RCC_OscConfig+0x498>
 8001276:	e018      	b.n	80012aa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	69db      	ldr	r3, [r3, #28]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d101      	bne.n	8001284 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e013      	b.n	80012ac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001284:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <HAL_RCC_OscConfig+0x4f4>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a1b      	ldr	r3, [r3, #32]
 8001294:	429a      	cmp	r2, r3
 8001296:	d106      	bne.n	80012a6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d001      	beq.n	80012aa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e000      	b.n	80012ac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40007000 	.word	0x40007000
 80012bc:	42420060 	.word	0x42420060

080012c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d101      	bne.n	80012d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e0d0      	b.n	8001476 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012d4:	4b6a      	ldr	r3, [pc, #424]	; (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0307 	and.w	r3, r3, #7
 80012dc:	683a      	ldr	r2, [r7, #0]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d910      	bls.n	8001304 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012e2:	4b67      	ldr	r3, [pc, #412]	; (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f023 0207 	bic.w	r2, r3, #7
 80012ea:	4965      	ldr	r1, [pc, #404]	; (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012f2:	4b63      	ldr	r3, [pc, #396]	; (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d001      	beq.n	8001304 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e0b8      	b.n	8001476 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d020      	beq.n	8001352 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	2b00      	cmp	r3, #0
 800131a:	d005      	beq.n	8001328 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800131c:	4b59      	ldr	r3, [pc, #356]	; (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	4a58      	ldr	r2, [pc, #352]	; (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 8001322:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001326:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0308 	and.w	r3, r3, #8
 8001330:	2b00      	cmp	r3, #0
 8001332:	d005      	beq.n	8001340 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001334:	4b53      	ldr	r3, [pc, #332]	; (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	4a52      	ldr	r2, [pc, #328]	; (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 800133a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800133e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001340:	4b50      	ldr	r3, [pc, #320]	; (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	494d      	ldr	r1, [pc, #308]	; (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 800134e:	4313      	orrs	r3, r2
 8001350:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	2b00      	cmp	r3, #0
 800135c:	d040      	beq.n	80013e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d107      	bne.n	8001376 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001366:	4b47      	ldr	r3, [pc, #284]	; (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d115      	bne.n	800139e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e07f      	b.n	8001476 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b02      	cmp	r3, #2
 800137c:	d107      	bne.n	800138e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800137e:	4b41      	ldr	r3, [pc, #260]	; (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d109      	bne.n	800139e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e073      	b.n	8001476 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800138e:	4b3d      	ldr	r3, [pc, #244]	; (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e06b      	b.n	8001476 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800139e:	4b39      	ldr	r3, [pc, #228]	; (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f023 0203 	bic.w	r2, r3, #3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	4936      	ldr	r1, [pc, #216]	; (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013b0:	f7ff fa5c 	bl	800086c <HAL_GetTick>
 80013b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013b6:	e00a      	b.n	80013ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013b8:	f7ff fa58 	bl	800086c <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e053      	b.n	8001476 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ce:	4b2d      	ldr	r3, [pc, #180]	; (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 020c 	and.w	r2, r3, #12
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	429a      	cmp	r2, r3
 80013de:	d1eb      	bne.n	80013b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013e0:	4b27      	ldr	r3, [pc, #156]	; (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d210      	bcs.n	8001410 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ee:	4b24      	ldr	r3, [pc, #144]	; (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f023 0207 	bic.w	r2, r3, #7
 80013f6:	4922      	ldr	r1, [pc, #136]	; (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d001      	beq.n	8001410 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e032      	b.n	8001476 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	2b00      	cmp	r3, #0
 800141a:	d008      	beq.n	800142e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800141c:	4b19      	ldr	r3, [pc, #100]	; (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	4916      	ldr	r1, [pc, #88]	; (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 800142a:	4313      	orrs	r3, r2
 800142c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0308 	and.w	r3, r3, #8
 8001436:	2b00      	cmp	r3, #0
 8001438:	d009      	beq.n	800144e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800143a:	4b12      	ldr	r3, [pc, #72]	; (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	490e      	ldr	r1, [pc, #56]	; (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 800144a:	4313      	orrs	r3, r2
 800144c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800144e:	f000 f821 	bl	8001494 <HAL_RCC_GetSysClockFreq>
 8001452:	4602      	mov	r2, r0
 8001454:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	091b      	lsrs	r3, r3, #4
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	490a      	ldr	r1, [pc, #40]	; (8001488 <HAL_RCC_ClockConfig+0x1c8>)
 8001460:	5ccb      	ldrb	r3, [r1, r3]
 8001462:	fa22 f303 	lsr.w	r3, r2, r3
 8001466:	4a09      	ldr	r2, [pc, #36]	; (800148c <HAL_RCC_ClockConfig+0x1cc>)
 8001468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <HAL_RCC_ClockConfig+0x1d0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff f932 	bl	80006d8 <HAL_InitTick>

  return HAL_OK;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40022000 	.word	0x40022000
 8001484:	40021000 	.word	0x40021000
 8001488:	0800424c 	.word	0x0800424c
 800148c:	20000004 	.word	0x20000004
 8001490:	20000008 	.word	0x20000008

08001494 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001494:	b490      	push	{r4, r7}
 8001496:	b08a      	sub	sp, #40	; 0x28
 8001498:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800149a:	4b2a      	ldr	r3, [pc, #168]	; (8001544 <HAL_RCC_GetSysClockFreq+0xb0>)
 800149c:	1d3c      	adds	r4, r7, #4
 800149e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80014a4:	f240 2301 	movw	r3, #513	; 0x201
 80014a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
 80014ae:	2300      	movs	r3, #0
 80014b0:	61bb      	str	r3, [r7, #24]
 80014b2:	2300      	movs	r3, #0
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80014ba:	2300      	movs	r3, #0
 80014bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014be:	4b22      	ldr	r3, [pc, #136]	; (8001548 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f003 030c 	and.w	r3, r3, #12
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	d002      	beq.n	80014d4 <HAL_RCC_GetSysClockFreq+0x40>
 80014ce:	2b08      	cmp	r3, #8
 80014d0:	d003      	beq.n	80014da <HAL_RCC_GetSysClockFreq+0x46>
 80014d2:	e02d      	b.n	8001530 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014d4:	4b1d      	ldr	r3, [pc, #116]	; (800154c <HAL_RCC_GetSysClockFreq+0xb8>)
 80014d6:	623b      	str	r3, [r7, #32]
      break;
 80014d8:	e02d      	b.n	8001536 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	0c9b      	lsrs	r3, r3, #18
 80014de:	f003 030f 	and.w	r3, r3, #15
 80014e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80014e6:	4413      	add	r3, r2
 80014e8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80014ec:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d013      	beq.n	8001520 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014f8:	4b13      	ldr	r3, [pc, #76]	; (8001548 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	0c5b      	lsrs	r3, r3, #17
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001506:	4413      	add	r3, r2
 8001508:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800150c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	4a0e      	ldr	r2, [pc, #56]	; (800154c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001512:	fb02 f203 	mul.w	r2, r2, r3
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	fbb2 f3f3 	udiv	r3, r2, r3
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
 800151e:	e004      	b.n	800152a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	4a0b      	ldr	r2, [pc, #44]	; (8001550 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001524:	fb02 f303 	mul.w	r3, r2, r3
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152c:	623b      	str	r3, [r7, #32]
      break;
 800152e:	e002      	b.n	8001536 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001532:	623b      	str	r3, [r7, #32]
      break;
 8001534:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001536:	6a3b      	ldr	r3, [r7, #32]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3728      	adds	r7, #40	; 0x28
 800153c:	46bd      	mov	sp, r7
 800153e:	bc90      	pop	{r4, r7}
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	08004234 	.word	0x08004234
 8001548:	40021000 	.word	0x40021000
 800154c:	007a1200 	.word	0x007a1200
 8001550:	003d0900 	.word	0x003d0900

08001554 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001558:	4b02      	ldr	r3, [pc, #8]	; (8001564 <HAL_RCC_GetHCLKFreq+0x10>)
 800155a:	681b      	ldr	r3, [r3, #0]
}
 800155c:	4618      	mov	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr
 8001564:	20000004 	.word	0x20000004

08001568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800156c:	f7ff fff2 	bl	8001554 <HAL_RCC_GetHCLKFreq>
 8001570:	4602      	mov	r2, r0
 8001572:	4b05      	ldr	r3, [pc, #20]	; (8001588 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	0a1b      	lsrs	r3, r3, #8
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	4903      	ldr	r1, [pc, #12]	; (800158c <HAL_RCC_GetPCLK1Freq+0x24>)
 800157e:	5ccb      	ldrb	r3, [r1, r3]
 8001580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001584:	4618      	mov	r0, r3
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40021000 	.word	0x40021000
 800158c:	0800425c 	.word	0x0800425c

08001590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001594:	f7ff ffde 	bl	8001554 <HAL_RCC_GetHCLKFreq>
 8001598:	4602      	mov	r2, r0
 800159a:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	0adb      	lsrs	r3, r3, #11
 80015a0:	f003 0307 	and.w	r3, r3, #7
 80015a4:	4903      	ldr	r1, [pc, #12]	; (80015b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015a6:	5ccb      	ldrb	r3, [r1, r3]
 80015a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40021000 	.word	0x40021000
 80015b4:	0800425c 	.word	0x0800425c

080015b8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	220f      	movs	r2, #15
 80015c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80015c8:	4b11      	ldr	r3, [pc, #68]	; (8001610 <HAL_RCC_GetClockConfig+0x58>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0203 	and.w	r2, r3, #3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80015d4:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <HAL_RCC_GetClockConfig+0x58>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <HAL_RCC_GetClockConfig+0x58>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80015ec:	4b08      	ldr	r3, [pc, #32]	; (8001610 <HAL_RCC_GetClockConfig+0x58>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	08db      	lsrs	r3, r3, #3
 80015f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_RCC_GetClockConfig+0x5c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0207 	and.w	r2, r3, #7
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr
 8001610:	40021000 	.word	0x40021000
 8001614:	40022000 	.word	0x40022000

08001618 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001620:	4b0a      	ldr	r3, [pc, #40]	; (800164c <RCC_Delay+0x34>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <RCC_Delay+0x38>)
 8001626:	fba2 2303 	umull	r2, r3, r2, r3
 800162a:	0a5b      	lsrs	r3, r3, #9
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	fb02 f303 	mul.w	r3, r2, r3
 8001632:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001634:	bf00      	nop
  }
  while (Delay --);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	1e5a      	subs	r2, r3, #1
 800163a:	60fa      	str	r2, [r7, #12]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1f9      	bne.n	8001634 <RCC_Delay+0x1c>
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr
 800164c:	20000004 	.word	0x20000004
 8001650:	10624dd3 	.word	0x10624dd3

08001654 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e076      	b.n	8001754 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166a:	2b00      	cmp	r3, #0
 800166c:	d108      	bne.n	8001680 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001676:	d009      	beq.n	800168c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	61da      	str	r2, [r3, #28]
 800167e:	e005      	b.n	800168c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d106      	bne.n	80016ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7fe ff80 	bl	80005ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2202      	movs	r2, #2
 80016b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80016d4:	431a      	orrs	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016de:	431a      	orrs	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	431a      	orrs	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016fc:	431a      	orrs	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001706:	431a      	orrs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001710:	ea42 0103 	orr.w	r1, r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001718:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	430a      	orrs	r2, r1
 8001722:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	0c1a      	lsrs	r2, r3, #16
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f002 0204 	and.w	r2, r2, #4
 8001732:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	69da      	ldr	r2, [r3, #28]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001742:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2201      	movs	r2, #1
 800174e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b088      	sub	sp, #32
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	4613      	mov	r3, r2
 800176a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800176c:	2300      	movs	r3, #0
 800176e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001776:	2b01      	cmp	r3, #1
 8001778:	d101      	bne.n	800177e <HAL_SPI_Transmit+0x22>
 800177a:	2302      	movs	r3, #2
 800177c:	e126      	b.n	80019cc <HAL_SPI_Transmit+0x270>
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2201      	movs	r2, #1
 8001782:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001786:	f7ff f871 	bl	800086c <HAL_GetTick>
 800178a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800178c:	88fb      	ldrh	r3, [r7, #6]
 800178e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b01      	cmp	r3, #1
 800179a:	d002      	beq.n	80017a2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800179c:	2302      	movs	r3, #2
 800179e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80017a0:	e10b      	b.n	80019ba <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d002      	beq.n	80017ae <HAL_SPI_Transmit+0x52>
 80017a8:	88fb      	ldrh	r3, [r7, #6]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d102      	bne.n	80017b4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80017b2:	e102      	b.n	80019ba <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2203      	movs	r2, #3
 80017b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2200      	movs	r2, #0
 80017c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	68ba      	ldr	r2, [r7, #8]
 80017c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	88fa      	ldrh	r2, [r7, #6]
 80017cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	88fa      	ldrh	r2, [r7, #6]
 80017d2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2200      	movs	r2, #0
 80017d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2200      	movs	r2, #0
 80017de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2200      	movs	r2, #0
 80017e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2200      	movs	r2, #0
 80017ea:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2200      	movs	r2, #0
 80017f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017fa:	d10f      	bne.n	800181c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800180a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800181a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001826:	2b40      	cmp	r3, #64	; 0x40
 8001828:	d007      	beq.n	800183a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001838:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001842:	d14b      	bne.n	80018dc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d002      	beq.n	8001852 <HAL_SPI_Transmit+0xf6>
 800184c:	8afb      	ldrh	r3, [r7, #22]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d13e      	bne.n	80018d0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	881a      	ldrh	r2, [r3, #0]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	1c9a      	adds	r2, r3, #2
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800186c:	b29b      	uxth	r3, r3
 800186e:	3b01      	subs	r3, #1
 8001870:	b29a      	uxth	r2, r3
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001876:	e02b      	b.n	80018d0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b02      	cmp	r3, #2
 8001884:	d112      	bne.n	80018ac <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	881a      	ldrh	r2, [r3, #0]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	1c9a      	adds	r2, r3, #2
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	3b01      	subs	r3, #1
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	86da      	strh	r2, [r3, #54]	; 0x36
 80018aa:	e011      	b.n	80018d0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80018ac:	f7fe ffde 	bl	800086c <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d803      	bhi.n	80018c4 <HAL_SPI_Transmit+0x168>
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c2:	d102      	bne.n	80018ca <HAL_SPI_Transmit+0x16e>
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d102      	bne.n	80018d0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80018ce:	e074      	b.n	80019ba <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1ce      	bne.n	8001878 <HAL_SPI_Transmit+0x11c>
 80018da:	e04c      	b.n	8001976 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d002      	beq.n	80018ea <HAL_SPI_Transmit+0x18e>
 80018e4:	8afb      	ldrh	r3, [r7, #22]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d140      	bne.n	800196c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	330c      	adds	r3, #12
 80018f4:	7812      	ldrb	r2, [r2, #0]
 80018f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fc:	1c5a      	adds	r2, r3, #1
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001906:	b29b      	uxth	r3, r3
 8001908:	3b01      	subs	r3, #1
 800190a:	b29a      	uxth	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001910:	e02c      	b.n	800196c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b02      	cmp	r3, #2
 800191e:	d113      	bne.n	8001948 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	330c      	adds	r3, #12
 800192a:	7812      	ldrb	r2, [r2, #0]
 800192c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	1c5a      	adds	r2, r3, #1
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800193c:	b29b      	uxth	r3, r3
 800193e:	3b01      	subs	r3, #1
 8001940:	b29a      	uxth	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	86da      	strh	r2, [r3, #54]	; 0x36
 8001946:	e011      	b.n	800196c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001948:	f7fe ff90 	bl	800086c <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	d803      	bhi.n	8001960 <HAL_SPI_Transmit+0x204>
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800195e:	d102      	bne.n	8001966 <HAL_SPI_Transmit+0x20a>
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d102      	bne.n	800196c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	77fb      	strb	r3, [r7, #31]
          goto error;
 800196a:	e026      	b.n	80019ba <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001970:	b29b      	uxth	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1cd      	bne.n	8001912 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	6839      	ldr	r1, [r7, #0]
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f000 fbb8 	bl	80020f0 <SPI_EndRxTxTransaction>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d002      	beq.n	800198c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2220      	movs	r2, #32
 800198a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d10a      	bne.n	80019aa <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001994:	2300      	movs	r3, #0
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d002      	beq.n	80019b8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	77fb      	strb	r3, [r7, #31]
 80019b6:	e000      	b.n	80019ba <HAL_SPI_Transmit+0x25e>
  }

error:
 80019b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80019ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3720      	adds	r7, #32
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b088      	sub	sp, #32
 80019d8:	af02      	add	r7, sp, #8
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	4613      	mov	r3, r2
 80019e2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80019e4:	2300      	movs	r3, #0
 80019e6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80019f0:	d112      	bne.n	8001a18 <HAL_SPI_Receive+0x44>
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d10e      	bne.n	8001a18 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2204      	movs	r2, #4
 80019fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001a02:	88fa      	ldrh	r2, [r7, #6]
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	68b9      	ldr	r1, [r7, #8]
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	f000 f8f1 	bl	8001bf6 <HAL_SPI_TransmitReceive>
 8001a14:	4603      	mov	r3, r0
 8001a16:	e0ea      	b.n	8001bee <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d101      	bne.n	8001a26 <HAL_SPI_Receive+0x52>
 8001a22:	2302      	movs	r3, #2
 8001a24:	e0e3      	b.n	8001bee <HAL_SPI_Receive+0x21a>
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a2e:	f7fe ff1d 	bl	800086c <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d002      	beq.n	8001a46 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001a40:	2302      	movs	r3, #2
 8001a42:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001a44:	e0ca      	b.n	8001bdc <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d002      	beq.n	8001a52 <HAL_SPI_Receive+0x7e>
 8001a4c:	88fb      	ldrh	r3, [r7, #6]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d102      	bne.n	8001a58 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001a56:	e0c1      	b.n	8001bdc <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2204      	movs	r2, #4
 8001a5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2200      	movs	r2, #0
 8001a64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	68ba      	ldr	r2, [r7, #8]
 8001a6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	88fa      	ldrh	r2, [r7, #6]
 8001a70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	88fa      	ldrh	r2, [r7, #6]
 8001a76:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a9e:	d10f      	bne.n	8001ac0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001aae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001abe:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aca:	2b40      	cmp	r3, #64	; 0x40
 8001acc:	d007      	beq.n	8001ade <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001adc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d162      	bne.n	8001bac <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001ae6:	e02e      	b.n	8001b46 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d115      	bne.n	8001b22 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f103 020c 	add.w	r2, r3, #12
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b02:	7812      	ldrb	r2, [r2, #0]
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b0c:	1c5a      	adds	r2, r3, #1
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001b20:	e011      	b.n	8001b46 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b22:	f7fe fea3 	bl	800086c <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d803      	bhi.n	8001b3a <HAL_SPI_Receive+0x166>
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b38:	d102      	bne.n	8001b40 <HAL_SPI_Receive+0x16c>
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d102      	bne.n	8001b46 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001b44:	e04a      	b.n	8001bdc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1cb      	bne.n	8001ae8 <HAL_SPI_Receive+0x114>
 8001b50:	e031      	b.n	8001bb6 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d113      	bne.n	8001b88 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68da      	ldr	r2, [r3, #12]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6a:	b292      	uxth	r2, r2
 8001b6c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b72:	1c9a      	adds	r2, r3, #2
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001b86:	e011      	b.n	8001bac <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b88:	f7fe fe70 	bl	800086c <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d803      	bhi.n	8001ba0 <HAL_SPI_Receive+0x1cc>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b9e:	d102      	bne.n	8001ba6 <HAL_SPI_Receive+0x1d2>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d102      	bne.n	8001bac <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001baa:	e017      	b.n	8001bdc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1cd      	bne.n	8001b52 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	6839      	ldr	r1, [r7, #0]
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f000 fa46 	bl	800204c <SPI_EndRxTransaction>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d002      	beq.n	8001bcc <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2220      	movs	r2, #32
 8001bca:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d002      	beq.n	8001bda <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	75fb      	strb	r3, [r7, #23]
 8001bd8:	e000      	b.n	8001bdc <HAL_SPI_Receive+0x208>
  }

error :
 8001bda:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001bec:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b08c      	sub	sp, #48	; 0x30
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	60f8      	str	r0, [r7, #12]
 8001bfe:	60b9      	str	r1, [r7, #8]
 8001c00:	607a      	str	r2, [r7, #4]
 8001c02:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001c04:	2301      	movs	r3, #1
 8001c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d101      	bne.n	8001c1c <HAL_SPI_TransmitReceive+0x26>
 8001c18:	2302      	movs	r3, #2
 8001c1a:	e18a      	b.n	8001f32 <HAL_SPI_TransmitReceive+0x33c>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c24:	f7fe fe22 	bl	800086c <HAL_GetTick>
 8001c28:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001c3a:	887b      	ldrh	r3, [r7, #2]
 8001c3c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001c3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d00f      	beq.n	8001c66 <HAL_SPI_TransmitReceive+0x70>
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c4c:	d107      	bne.n	8001c5e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d103      	bne.n	8001c5e <HAL_SPI_TransmitReceive+0x68>
 8001c56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d003      	beq.n	8001c66 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001c64:	e15b      	b.n	8001f1e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d005      	beq.n	8001c78 <HAL_SPI_TransmitReceive+0x82>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d002      	beq.n	8001c78 <HAL_SPI_TransmitReceive+0x82>
 8001c72:	887b      	ldrh	r3, [r7, #2]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d103      	bne.n	8001c80 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001c7e:	e14e      	b.n	8001f1e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b04      	cmp	r3, #4
 8001c8a:	d003      	beq.n	8001c94 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2205      	movs	r2, #5
 8001c90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2200      	movs	r2, #0
 8001c98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	887a      	ldrh	r2, [r7, #2]
 8001ca4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	887a      	ldrh	r2, [r7, #2]
 8001caa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	887a      	ldrh	r2, [r7, #2]
 8001cb6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	887a      	ldrh	r2, [r7, #2]
 8001cbc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd4:	2b40      	cmp	r3, #64	; 0x40
 8001cd6:	d007      	beq.n	8001ce8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ce6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cf0:	d178      	bne.n	8001de4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d002      	beq.n	8001d00 <HAL_SPI_TransmitReceive+0x10a>
 8001cfa:	8b7b      	ldrh	r3, [r7, #26]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d166      	bne.n	8001dce <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d04:	881a      	ldrh	r2, [r3, #0]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d10:	1c9a      	adds	r2, r3, #2
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d24:	e053      	b.n	8001dce <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d11b      	bne.n	8001d6c <HAL_SPI_TransmitReceive+0x176>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d016      	beq.n	8001d6c <HAL_SPI_TransmitReceive+0x176>
 8001d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d113      	bne.n	8001d6c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d48:	881a      	ldrh	r2, [r3, #0]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d54:	1c9a      	adds	r2, r3, #2
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	3b01      	subs	r3, #1
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d119      	bne.n	8001dae <HAL_SPI_TransmitReceive+0x1b8>
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d014      	beq.n	8001dae <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d8e:	b292      	uxth	r2, r2
 8001d90:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d96:	1c9a      	adds	r2, r3, #2
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	3b01      	subs	r3, #1
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001daa:	2301      	movs	r3, #1
 8001dac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001dae:	f7fe fd5d 	bl	800086c <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d807      	bhi.n	8001dce <HAL_SPI_TransmitReceive+0x1d8>
 8001dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc4:	d003      	beq.n	8001dce <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001dcc:	e0a7      	b.n	8001f1e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1a6      	bne.n	8001d26 <HAL_SPI_TransmitReceive+0x130>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1a1      	bne.n	8001d26 <HAL_SPI_TransmitReceive+0x130>
 8001de2:	e07c      	b.n	8001ede <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d002      	beq.n	8001df2 <HAL_SPI_TransmitReceive+0x1fc>
 8001dec:	8b7b      	ldrh	r3, [r7, #26]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d16b      	bne.n	8001eca <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	330c      	adds	r3, #12
 8001dfc:	7812      	ldrb	r2, [r2, #0]
 8001dfe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e04:	1c5a      	adds	r2, r3, #1
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	3b01      	subs	r3, #1
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e18:	e057      	b.n	8001eca <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d11c      	bne.n	8001e62 <HAL_SPI_TransmitReceive+0x26c>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d017      	beq.n	8001e62 <HAL_SPI_TransmitReceive+0x26c>
 8001e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d114      	bne.n	8001e62 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	330c      	adds	r3, #12
 8001e42:	7812      	ldrb	r2, [r2, #0]
 8001e44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	1c5a      	adds	r2, r3, #1
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	3b01      	subs	r3, #1
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d119      	bne.n	8001ea4 <HAL_SPI_TransmitReceive+0x2ae>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d014      	beq.n	8001ea4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68da      	ldr	r2, [r3, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8c:	1c5a      	adds	r2, r3, #1
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001ea4:	f7fe fce2 	bl	800086c <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d803      	bhi.n	8001ebc <HAL_SPI_TransmitReceive+0x2c6>
 8001eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eba:	d102      	bne.n	8001ec2 <HAL_SPI_TransmitReceive+0x2cc>
 8001ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d103      	bne.n	8001eca <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001ec8:	e029      	b.n	8001f1e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1a2      	bne.n	8001e1a <HAL_SPI_TransmitReceive+0x224>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d19d      	bne.n	8001e1a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ee0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f000 f904 	bl	80020f0 <SPI_EndRxTxTransaction>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d006      	beq.n	8001efc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2220      	movs	r2, #32
 8001ef8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001efa:	e010      	b.n	8001f1e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d10b      	bne.n	8001f1c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	617b      	str	r3, [r7, #20]
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	e000      	b.n	8001f1e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001f1c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001f2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3730      	adds	r7, #48	; 0x30
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b088      	sub	sp, #32
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	603b      	str	r3, [r7, #0]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001f4c:	f7fe fc8e 	bl	800086c <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f54:	1a9b      	subs	r3, r3, r2
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	4413      	add	r3, r2
 8001f5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001f5c:	f7fe fc86 	bl	800086c <HAL_GetTick>
 8001f60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001f62:	4b39      	ldr	r3, [pc, #228]	; (8002048 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	015b      	lsls	r3, r3, #5
 8001f68:	0d1b      	lsrs	r3, r3, #20
 8001f6a:	69fa      	ldr	r2, [r7, #28]
 8001f6c:	fb02 f303 	mul.w	r3, r2, r3
 8001f70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f72:	e054      	b.n	800201e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f7a:	d050      	beq.n	800201e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001f7c:	f7fe fc76 	bl	800086c <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	69fa      	ldr	r2, [r7, #28]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d902      	bls.n	8001f92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d13d      	bne.n	800200e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001fa0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001faa:	d111      	bne.n	8001fd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fb4:	d004      	beq.n	8001fc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fbe:	d107      	bne.n	8001fd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fd8:	d10f      	bne.n	8001ffa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ff8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e017      	b.n	800203e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002014:	2300      	movs	r3, #0
 8002016:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	3b01      	subs	r3, #1
 800201c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	4013      	ands	r3, r2
 8002028:	68ba      	ldr	r2, [r7, #8]
 800202a:	429a      	cmp	r2, r3
 800202c:	bf0c      	ite	eq
 800202e:	2301      	moveq	r3, #1
 8002030:	2300      	movne	r3, #0
 8002032:	b2db      	uxtb	r3, r3
 8002034:	461a      	mov	r2, r3
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	429a      	cmp	r2, r3
 800203a:	d19b      	bne.n	8001f74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3720      	adds	r7, #32
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20000004 	.word	0x20000004

0800204c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af02      	add	r7, sp, #8
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002060:	d111      	bne.n	8002086 <SPI_EndRxTransaction+0x3a>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800206a:	d004      	beq.n	8002076 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002074:	d107      	bne.n	8002086 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002084:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800208e:	d117      	bne.n	80020c0 <SPI_EndRxTransaction+0x74>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002098:	d112      	bne.n	80020c0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	2200      	movs	r2, #0
 80020a2:	2101      	movs	r1, #1
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	f7ff ff49 	bl	8001f3c <SPI_WaitFlagStateUntilTimeout>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d01a      	beq.n	80020e6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b4:	f043 0220 	orr.w	r2, r3, #32
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e013      	b.n	80020e8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	2200      	movs	r2, #0
 80020c8:	2180      	movs	r1, #128	; 0x80
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f7ff ff36 	bl	8001f3c <SPI_WaitFlagStateUntilTimeout>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d007      	beq.n	80020e6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020da:	f043 0220 	orr.w	r2, r3, #32
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e000      	b.n	80020e8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af02      	add	r7, sp, #8
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2200      	movs	r2, #0
 8002104:	2180      	movs	r1, #128	; 0x80
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f7ff ff18 	bl	8001f3c <SPI_WaitFlagStateUntilTimeout>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d007      	beq.n	8002122 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002116:	f043 0220 	orr.w	r2, r3, #32
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e000      	b.n	8002124 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e041      	b.n	80021c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d106      	bne.n	8002158 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f839 	bl	80021ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2202      	movs	r2, #2
 800215c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3304      	adds	r3, #4
 8002168:	4619      	mov	r1, r3
 800216a:	4610      	mov	r0, r2
 800216c:	f000 f9b4 	bl	80024d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr

080021dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d001      	beq.n	80021f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e03a      	b.n	800226a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2202      	movs	r2, #2
 80021f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f042 0201 	orr.w	r2, r2, #1
 800220a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a18      	ldr	r2, [pc, #96]	; (8002274 <HAL_TIM_Base_Start_IT+0x98>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d00e      	beq.n	8002234 <HAL_TIM_Base_Start_IT+0x58>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800221e:	d009      	beq.n	8002234 <HAL_TIM_Base_Start_IT+0x58>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a14      	ldr	r2, [pc, #80]	; (8002278 <HAL_TIM_Base_Start_IT+0x9c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d004      	beq.n	8002234 <HAL_TIM_Base_Start_IT+0x58>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a13      	ldr	r2, [pc, #76]	; (800227c <HAL_TIM_Base_Start_IT+0xa0>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d111      	bne.n	8002258 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2b06      	cmp	r3, #6
 8002244:	d010      	beq.n	8002268 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f042 0201 	orr.w	r2, r2, #1
 8002254:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002256:	e007      	b.n	8002268 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0201 	orr.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr
 8002274:	40012c00 	.word	0x40012c00
 8002278:	40000400 	.word	0x40000400
 800227c:	40000800 	.word	0x40000800

08002280 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b02      	cmp	r3, #2
 8002294:	d122      	bne.n	80022dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d11b      	bne.n	80022dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f06f 0202 	mvn.w	r2, #2
 80022ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 f8ed 	bl	80024a2 <HAL_TIM_IC_CaptureCallback>
 80022c8:	e005      	b.n	80022d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f8e0 	bl	8002490 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 f8ef 	bl	80024b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	f003 0304 	and.w	r3, r3, #4
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	d122      	bne.n	8002330 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b04      	cmp	r3, #4
 80022f6:	d11b      	bne.n	8002330 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f06f 0204 	mvn.w	r2, #4
 8002300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2202      	movs	r2, #2
 8002306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f8c3 	bl	80024a2 <HAL_TIM_IC_CaptureCallback>
 800231c:	e005      	b.n	800232a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f8b6 	bl	8002490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 f8c5 	bl	80024b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	2b08      	cmp	r3, #8
 800233c:	d122      	bne.n	8002384 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	f003 0308 	and.w	r3, r3, #8
 8002348:	2b08      	cmp	r3, #8
 800234a:	d11b      	bne.n	8002384 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f06f 0208 	mvn.w	r2, #8
 8002354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2204      	movs	r2, #4
 800235a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f899 	bl	80024a2 <HAL_TIM_IC_CaptureCallback>
 8002370:	e005      	b.n	800237e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f88c 	bl	8002490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 f89b 	bl	80024b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	f003 0310 	and.w	r3, r3, #16
 800238e:	2b10      	cmp	r3, #16
 8002390:	d122      	bne.n	80023d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	f003 0310 	and.w	r3, r3, #16
 800239c:	2b10      	cmp	r3, #16
 800239e:	d11b      	bne.n	80023d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f06f 0210 	mvn.w	r2, #16
 80023a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2208      	movs	r2, #8
 80023ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f86f 	bl	80024a2 <HAL_TIM_IC_CaptureCallback>
 80023c4:	e005      	b.n	80023d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f862 	bl	8002490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 f871 	bl	80024b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d10e      	bne.n	8002404 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d107      	bne.n	8002404 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f06f 0201 	mvn.w	r2, #1
 80023fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7fe f884 	bl	800050c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800240e:	2b80      	cmp	r3, #128	; 0x80
 8002410:	d10e      	bne.n	8002430 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800241c:	2b80      	cmp	r3, #128	; 0x80
 800241e:	d107      	bne.n	8002430 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f8bf 	bl	80025ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243a:	2b40      	cmp	r3, #64	; 0x40
 800243c:	d10e      	bne.n	800245c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002448:	2b40      	cmp	r3, #64	; 0x40
 800244a:	d107      	bne.n	800245c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f835 	bl	80024c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	f003 0320 	and.w	r3, r3, #32
 8002466:	2b20      	cmp	r3, #32
 8002468:	d10e      	bne.n	8002488 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f003 0320 	and.w	r3, r3, #32
 8002474:	2b20      	cmp	r3, #32
 8002476:	d107      	bne.n	8002488 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f06f 0220 	mvn.w	r2, #32
 8002480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 f88a 	bl	800259c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002488:	bf00      	nop
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr

080024a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr

080024b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc80      	pop	{r7}
 80024c4:	4770      	bx	lr

080024c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr

080024d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a29      	ldr	r2, [pc, #164]	; (8002590 <TIM_Base_SetConfig+0xb8>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d00b      	beq.n	8002508 <TIM_Base_SetConfig+0x30>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f6:	d007      	beq.n	8002508 <TIM_Base_SetConfig+0x30>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a26      	ldr	r2, [pc, #152]	; (8002594 <TIM_Base_SetConfig+0xbc>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d003      	beq.n	8002508 <TIM_Base_SetConfig+0x30>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a25      	ldr	r2, [pc, #148]	; (8002598 <TIM_Base_SetConfig+0xc0>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d108      	bne.n	800251a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800250e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	4313      	orrs	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a1c      	ldr	r2, [pc, #112]	; (8002590 <TIM_Base_SetConfig+0xb8>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d00b      	beq.n	800253a <TIM_Base_SetConfig+0x62>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002528:	d007      	beq.n	800253a <TIM_Base_SetConfig+0x62>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a19      	ldr	r2, [pc, #100]	; (8002594 <TIM_Base_SetConfig+0xbc>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d003      	beq.n	800253a <TIM_Base_SetConfig+0x62>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a18      	ldr	r2, [pc, #96]	; (8002598 <TIM_Base_SetConfig+0xc0>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d108      	bne.n	800254c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	4313      	orrs	r3, r2
 800254a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	4313      	orrs	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a07      	ldr	r2, [pc, #28]	; (8002590 <TIM_Base_SetConfig+0xb8>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d103      	bne.n	8002580 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	691a      	ldr	r2, [r3, #16]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	615a      	str	r2, [r3, #20]
}
 8002586:	bf00      	nop
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr
 8002590:	40012c00 	.word	0x40012c00
 8002594:	40000400 	.word	0x40000400
 8002598:	40000800 	.word	0x40000800

0800259c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc80      	pop	{r7}
 80025ac:	4770      	bx	lr

080025ae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr

080025c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e03f      	b.n	8002652 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d106      	bne.n	80025ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7fe f82a 	bl	8000640 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2224      	movs	r2, #36	; 0x24
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002602:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 f905 	bl	8002814 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	691a      	ldr	r2, [r3, #16]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002618:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	695a      	ldr	r2, [r3, #20]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002628:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002638:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2220      	movs	r2, #32
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2220      	movs	r2, #32
 800264c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b08a      	sub	sp, #40	; 0x28
 800265e:	af02      	add	r7, sp, #8
 8002660:	60f8      	str	r0, [r7, #12]
 8002662:	60b9      	str	r1, [r7, #8]
 8002664:	603b      	str	r3, [r7, #0]
 8002666:	4613      	mov	r3, r2
 8002668:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b20      	cmp	r3, #32
 8002678:	d17c      	bne.n	8002774 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d002      	beq.n	8002686 <HAL_UART_Transmit+0x2c>
 8002680:	88fb      	ldrh	r3, [r7, #6]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e075      	b.n	8002776 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002690:	2b01      	cmp	r3, #1
 8002692:	d101      	bne.n	8002698 <HAL_UART_Transmit+0x3e>
 8002694:	2302      	movs	r3, #2
 8002696:	e06e      	b.n	8002776 <HAL_UART_Transmit+0x11c>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2221      	movs	r2, #33	; 0x21
 80026aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026ae:	f7fe f8dd 	bl	800086c <HAL_GetTick>
 80026b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	88fa      	ldrh	r2, [r7, #6]
 80026b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	88fa      	ldrh	r2, [r7, #6]
 80026be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026c8:	d108      	bne.n	80026dc <HAL_UART_Transmit+0x82>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d104      	bne.n	80026dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80026d2:	2300      	movs	r3, #0
 80026d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	61bb      	str	r3, [r7, #24]
 80026da:	e003      	b.n	80026e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80026ec:	e02a      	b.n	8002744 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	2200      	movs	r2, #0
 80026f6:	2180      	movs	r1, #128	; 0x80
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 f840 	bl	800277e <UART_WaitOnFlagUntilTimeout>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e036      	b.n	8002776 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10b      	bne.n	8002726 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	461a      	mov	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800271c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	3302      	adds	r3, #2
 8002722:	61bb      	str	r3, [r7, #24]
 8002724:	e007      	b.n	8002736 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	781a      	ldrb	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	3301      	adds	r3, #1
 8002734:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800273a:	b29b      	uxth	r3, r3
 800273c:	3b01      	subs	r3, #1
 800273e:	b29a      	uxth	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002748:	b29b      	uxth	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1cf      	bne.n	80026ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	2200      	movs	r2, #0
 8002756:	2140      	movs	r1, #64	; 0x40
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f000 f810 	bl	800277e <UART_WaitOnFlagUntilTimeout>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e006      	b.n	8002776 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2220      	movs	r2, #32
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002770:	2300      	movs	r3, #0
 8002772:	e000      	b.n	8002776 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002774:	2302      	movs	r3, #2
  }
}
 8002776:	4618      	mov	r0, r3
 8002778:	3720      	adds	r7, #32
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b084      	sub	sp, #16
 8002782:	af00      	add	r7, sp, #0
 8002784:	60f8      	str	r0, [r7, #12]
 8002786:	60b9      	str	r1, [r7, #8]
 8002788:	603b      	str	r3, [r7, #0]
 800278a:	4613      	mov	r3, r2
 800278c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800278e:	e02c      	b.n	80027ea <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002796:	d028      	beq.n	80027ea <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d007      	beq.n	80027ae <UART_WaitOnFlagUntilTimeout+0x30>
 800279e:	f7fe f865 	bl	800086c <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d21d      	bcs.n	80027ea <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80027bc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	695a      	ldr	r2, [r3, #20]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0201 	bic.w	r2, r2, #1
 80027cc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2220      	movs	r2, #32
 80027d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2220      	movs	r2, #32
 80027da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e00f      	b.n	800280a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	4013      	ands	r3, r2
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	bf0c      	ite	eq
 80027fa:	2301      	moveq	r3, #1
 80027fc:	2300      	movne	r3, #0
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	461a      	mov	r2, r3
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	429a      	cmp	r2, r3
 8002806:	d0c3      	beq.n	8002790 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68da      	ldr	r2, [r3, #12]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689a      	ldr	r2, [r3, #8]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	4313      	orrs	r3, r2
 8002842:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800284e:	f023 030c 	bic.w	r3, r3, #12
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	6812      	ldr	r2, [r2, #0]
 8002856:	68b9      	ldr	r1, [r7, #8]
 8002858:	430b      	orrs	r3, r1
 800285a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699a      	ldr	r2, [r3, #24]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a2c      	ldr	r2, [pc, #176]	; (8002928 <UART_SetConfig+0x114>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d103      	bne.n	8002884 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800287c:	f7fe fe88 	bl	8001590 <HAL_RCC_GetPCLK2Freq>
 8002880:	60f8      	str	r0, [r7, #12]
 8002882:	e002      	b.n	800288a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002884:	f7fe fe70 	bl	8001568 <HAL_RCC_GetPCLK1Freq>
 8002888:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	4613      	mov	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	009a      	lsls	r2, r3, #2
 8002894:	441a      	add	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a0:	4a22      	ldr	r2, [pc, #136]	; (800292c <UART_SetConfig+0x118>)
 80028a2:	fba2 2303 	umull	r2, r3, r2, r3
 80028a6:	095b      	lsrs	r3, r3, #5
 80028a8:	0119      	lsls	r1, r3, #4
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	4613      	mov	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	009a      	lsls	r2, r3, #2
 80028b4:	441a      	add	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80028c0:	4b1a      	ldr	r3, [pc, #104]	; (800292c <UART_SetConfig+0x118>)
 80028c2:	fba3 0302 	umull	r0, r3, r3, r2
 80028c6:	095b      	lsrs	r3, r3, #5
 80028c8:	2064      	movs	r0, #100	; 0x64
 80028ca:	fb00 f303 	mul.w	r3, r0, r3
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	011b      	lsls	r3, r3, #4
 80028d2:	3332      	adds	r3, #50	; 0x32
 80028d4:	4a15      	ldr	r2, [pc, #84]	; (800292c <UART_SetConfig+0x118>)
 80028d6:	fba2 2303 	umull	r2, r3, r2, r3
 80028da:	095b      	lsrs	r3, r3, #5
 80028dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028e0:	4419      	add	r1, r3
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	4613      	mov	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	009a      	lsls	r2, r3, #2
 80028ec:	441a      	add	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80028f8:	4b0c      	ldr	r3, [pc, #48]	; (800292c <UART_SetConfig+0x118>)
 80028fa:	fba3 0302 	umull	r0, r3, r3, r2
 80028fe:	095b      	lsrs	r3, r3, #5
 8002900:	2064      	movs	r0, #100	; 0x64
 8002902:	fb00 f303 	mul.w	r3, r0, r3
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	011b      	lsls	r3, r3, #4
 800290a:	3332      	adds	r3, #50	; 0x32
 800290c:	4a07      	ldr	r2, [pc, #28]	; (800292c <UART_SetConfig+0x118>)
 800290e:	fba2 2303 	umull	r2, r3, r2, r3
 8002912:	095b      	lsrs	r3, r3, #5
 8002914:	f003 020f 	and.w	r2, r3, #15
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	440a      	add	r2, r1
 800291e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002920:	bf00      	nop
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40013800 	.word	0x40013800
 800292c:	51eb851f 	.word	0x51eb851f

08002930 <SPI1_Send>:
#define cs_set() HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET)
#define cs_reset() HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET)

static uint8_t tx_buf[10];
void SPI1_Send (uint8_t *dt, uint16_t cnt)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	807b      	strh	r3, [r7, #2]
  HAL_SPI_Transmit (&hspi1, dt, cnt, 5000);
 800293c:	887a      	ldrh	r2, [r7, #2]
 800293e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4803      	ldr	r0, [pc, #12]	; (8002954 <SPI1_Send+0x24>)
 8002946:	f7fe ff09 	bl	800175c <HAL_SPI_Transmit>

}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	2000034c 	.word	0x2000034c

08002958 <SPI1_Recv>:
void SPI1_Recv (uint8_t *dt, uint16_t cnt)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	807b      	strh	r3, [r7, #2]
  HAL_SPI_Receive (&hspi1, dt, cnt, 5000);
 8002964:	887a      	ldrh	r2, [r7, #2]
 8002966:	f241 3388 	movw	r3, #5000	; 0x1388
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	4803      	ldr	r0, [pc, #12]	; (800297c <SPI1_Recv+0x24>)
 800296e:	f7ff f831 	bl	80019d4 <HAL_SPI_Receive>
}
 8002972:	bf00      	nop
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	2000034c 	.word	0x2000034c

08002980 <WriteEnable_flash>:
  tx_buf[1] = reset2;
  SPI1_Send(tx_buf, 2);
  cs_set();
}
void WriteEnable_flash()
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
	cs_reset();
 8002984:	2200      	movs	r2, #0
 8002986:	2110      	movs	r1, #16
 8002988:	4808      	ldr	r0, [pc, #32]	; (80029ac <WriteEnable_flash+0x2c>)
 800298a:	f7fe fa01 	bl	8000d90 <HAL_GPIO_WritePin>
	tx_buf[0] = WriteEnable;
 800298e:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <WriteEnable_flash+0x30>)
 8002990:	2206      	movs	r2, #6
 8002992:	701a      	strb	r2, [r3, #0]
	SPI1_Send(tx_buf,1);
 8002994:	2101      	movs	r1, #1
 8002996:	4806      	ldr	r0, [pc, #24]	; (80029b0 <WriteEnable_flash+0x30>)
 8002998:	f7ff ffca 	bl	8002930 <SPI1_Send>
	cs_set();
 800299c:	2201      	movs	r2, #1
 800299e:	2110      	movs	r1, #16
 80029a0:	4802      	ldr	r0, [pc, #8]	; (80029ac <WriteEnable_flash+0x2c>)
 80029a2:	f7fe f9f5 	bl	8000d90 <HAL_GPIO_WritePin>

}
 80029a6:	bf00      	nop
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40010800 	.word	0x40010800
 80029b0:	200003a4 	.word	0x200003a4

080029b4 <W25_Read_Data>:
void W25_Read_Data(uint32_t addr, uint8_t* data, uint32_t sz)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  cs_reset();
 80029c0:	2200      	movs	r2, #0
 80029c2:	2110      	movs	r1, #16
 80029c4:	4813      	ldr	r0, [pc, #76]	; (8002a14 <W25_Read_Data+0x60>)
 80029c6:	f7fe f9e3 	bl	8000d90 <HAL_GPIO_WritePin>
  tx_buf[0] = ReadData;
 80029ca:	4b13      	ldr	r3, [pc, #76]	; (8002a18 <W25_Read_Data+0x64>)
 80029cc:	2203      	movs	r2, #3
 80029ce:	701a      	strb	r2, [r3, #0]
  tx_buf[1] = (addr >> 16) & 0xFF;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	0c1b      	lsrs	r3, r3, #16
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	4b10      	ldr	r3, [pc, #64]	; (8002a18 <W25_Read_Data+0x64>)
 80029d8:	705a      	strb	r2, [r3, #1]
  tx_buf[2] = (addr >> 8) & 0xFF;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	0a1b      	lsrs	r3, r3, #8
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	4b0d      	ldr	r3, [pc, #52]	; (8002a18 <W25_Read_Data+0x64>)
 80029e2:	709a      	strb	r2, [r3, #2]
  tx_buf[3] = addr & 0xFF;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <W25_Read_Data+0x64>)
 80029ea:	70da      	strb	r2, [r3, #3]
  SPI1_Send(tx_buf, 4);
 80029ec:	2104      	movs	r1, #4
 80029ee:	480a      	ldr	r0, [pc, #40]	; (8002a18 <W25_Read_Data+0x64>)
 80029f0:	f7ff ff9e 	bl	8002930 <SPI1_Send>
  SPI1_Recv(data, sz);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	4619      	mov	r1, r3
 80029fa:	68b8      	ldr	r0, [r7, #8]
 80029fc:	f7ff ffac 	bl	8002958 <SPI1_Recv>
  cs_set();
 8002a00:	2201      	movs	r2, #1
 8002a02:	2110      	movs	r1, #16
 8002a04:	4803      	ldr	r0, [pc, #12]	; (8002a14 <W25_Read_Data+0x60>)
 8002a06:	f7fe f9c3 	bl	8000d90 <HAL_GPIO_WritePin>
}
 8002a0a:	bf00      	nop
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40010800 	.word	0x40010800
 8002a18:	200003a4 	.word	0x200003a4

08002a1c <W25_Write_Data>:
void W25_Write_Data(uint32_t addr, uint8_t* data, uint32_t sz)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
	WriteEnable_flash();
 8002a28:	f7ff ffaa 	bl	8002980 <WriteEnable_flash>
	  HAL_Delay(100);
 8002a2c:	2064      	movs	r0, #100	; 0x64
 8002a2e:	f7fd ff27 	bl	8000880 <HAL_Delay>
  cs_reset();
 8002a32:	2200      	movs	r2, #0
 8002a34:	2110      	movs	r1, #16
 8002a36:	4813      	ldr	r0, [pc, #76]	; (8002a84 <W25_Write_Data+0x68>)
 8002a38:	f7fe f9aa 	bl	8000d90 <HAL_GPIO_WritePin>
  tx_buf[0] = WriteData;
 8002a3c:	4b12      	ldr	r3, [pc, #72]	; (8002a88 <W25_Write_Data+0x6c>)
 8002a3e:	2202      	movs	r2, #2
 8002a40:	701a      	strb	r2, [r3, #0]
  tx_buf[1] = (addr >> 16) & 0xFF;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	0c1b      	lsrs	r3, r3, #16
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	4b0f      	ldr	r3, [pc, #60]	; (8002a88 <W25_Write_Data+0x6c>)
 8002a4a:	705a      	strb	r2, [r3, #1]
  tx_buf[2] = (addr >> 8) & 0xFF;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	0a1b      	lsrs	r3, r3, #8
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	4b0d      	ldr	r3, [pc, #52]	; (8002a88 <W25_Write_Data+0x6c>)
 8002a54:	709a      	strb	r2, [r3, #2]
  tx_buf[3] = addr & 0xFF;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <W25_Write_Data+0x6c>)
 8002a5c:	70da      	strb	r2, [r3, #3]
  SPI1_Send(tx_buf, 4);
 8002a5e:	2104      	movs	r1, #4
 8002a60:	4809      	ldr	r0, [pc, #36]	; (8002a88 <W25_Write_Data+0x6c>)
 8002a62:	f7ff ff65 	bl	8002930 <SPI1_Send>
  SPI1_Send(data, sz);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	68b8      	ldr	r0, [r7, #8]
 8002a6e:	f7ff ff5f 	bl	8002930 <SPI1_Send>
  cs_set();
 8002a72:	2201      	movs	r2, #1
 8002a74:	2110      	movs	r1, #16
 8002a76:	4803      	ldr	r0, [pc, #12]	; (8002a84 <W25_Write_Data+0x68>)
 8002a78:	f7fe f98a 	bl	8000d90 <HAL_GPIO_WritePin>
}
 8002a7c:	bf00      	nop
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40010800 	.word	0x40010800
 8002a88:	200003a4 	.word	0x200003a4

08002a8c <W25_Read_ID>:
uint32_t W25_Read_ID(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
  uint8_t dt[4];
  tx_buf[0] = JEDECID;
 8002a92:	4b10      	ldr	r3, [pc, #64]	; (8002ad4 <W25_Read_ID+0x48>)
 8002a94:	229f      	movs	r2, #159	; 0x9f
 8002a96:	701a      	strb	r2, [r3, #0]
  cs_reset();
 8002a98:	2200      	movs	r2, #0
 8002a9a:	2110      	movs	r1, #16
 8002a9c:	480e      	ldr	r0, [pc, #56]	; (8002ad8 <W25_Read_ID+0x4c>)
 8002a9e:	f7fe f977 	bl	8000d90 <HAL_GPIO_WritePin>
  SPI1_Send(tx_buf, 1);
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	480b      	ldr	r0, [pc, #44]	; (8002ad4 <W25_Read_ID+0x48>)
 8002aa6:	f7ff ff43 	bl	8002930 <SPI1_Send>
  SPI1_Recv(dt,3);
 8002aaa:	1d3b      	adds	r3, r7, #4
 8002aac:	2103      	movs	r1, #3
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff ff52 	bl	8002958 <SPI1_Recv>
  cs_set();
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	2110      	movs	r1, #16
 8002ab8:	4807      	ldr	r0, [pc, #28]	; (8002ad8 <W25_Read_ID+0x4c>)
 8002aba:	f7fe f969 	bl	8000d90 <HAL_GPIO_WritePin>
  return (dt[0] << 16) | (dt[1] << 8) | dt[2];
 8002abe:	793b      	ldrb	r3, [r7, #4]
 8002ac0:	041a      	lsls	r2, r3, #16
 8002ac2:	797b      	ldrb	r3, [r7, #5]
 8002ac4:	021b      	lsls	r3, r3, #8
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	79ba      	ldrb	r2, [r7, #6]
 8002aca:	4313      	orrs	r3, r2
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	200003a4 	.word	0x200003a4
 8002ad8:	40010800 	.word	0x40010800

08002adc <erase_sector4KB>:
  // HAL_UART_Transmit(&huart2,(uint8_t*)"\r\n",2,0x1000);
  // sprintf(str1,"ID:0x%X\r\n",id);
  // HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
}
void erase_sector4KB(uint32_t addr)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]

	WriteEnable_flash();
 8002ae4:	f7ff ff4c 	bl	8002980 <WriteEnable_flash>
	HAL_Delay(100);
 8002ae8:	2064      	movs	r0, #100	; 0x64
 8002aea:	f7fd fec9 	bl	8000880 <HAL_Delay>
	cs_reset();
 8002aee:	2200      	movs	r2, #0
 8002af0:	2110      	movs	r1, #16
 8002af2:	4810      	ldr	r0, [pc, #64]	; (8002b34 <erase_sector4KB+0x58>)
 8002af4:	f7fe f94c 	bl	8000d90 <HAL_GPIO_WritePin>
	tx_buf[0] = SectErase4KB;
 8002af8:	4b0f      	ldr	r3, [pc, #60]	; (8002b38 <erase_sector4KB+0x5c>)
 8002afa:	2220      	movs	r2, #32
 8002afc:	701a      	strb	r2, [r3, #0]
	tx_buf[1] = (addr >> 16) & 0xFF;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	0c1b      	lsrs	r3, r3, #16
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <erase_sector4KB+0x5c>)
 8002b06:	705a      	strb	r2, [r3, #1]
	tx_buf[2] = (addr >> 8) & 0xFF;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	0a1b      	lsrs	r3, r3, #8
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <erase_sector4KB+0x5c>)
 8002b10:	709a      	strb	r2, [r3, #2]
	tx_buf[3] = addr & 0xFF;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <erase_sector4KB+0x5c>)
 8002b18:	70da      	strb	r2, [r3, #3]
	SPI1_Send(tx_buf,4);
 8002b1a:	2104      	movs	r1, #4
 8002b1c:	4806      	ldr	r0, [pc, #24]	; (8002b38 <erase_sector4KB+0x5c>)
 8002b1e:	f7ff ff07 	bl	8002930 <SPI1_Send>
	cs_set();
 8002b22:	2201      	movs	r2, #1
 8002b24:	2110      	movs	r1, #16
 8002b26:	4803      	ldr	r0, [pc, #12]	; (8002b34 <erase_sector4KB+0x58>)
 8002b28:	f7fe f932 	bl	8000d90 <HAL_GPIO_WritePin>
}
 8002b2c:	bf00      	nop
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40010800 	.word	0x40010800
 8002b38:	200003a4 	.word	0x200003a4

08002b3c <ReadSR>:
	SPI1_Send(tx_buf,2);
	cs_set();

}
uint8_t ReadSR(uint8_t SR_address)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	71fb      	strb	r3, [r7, #7]
	uint8_t RSR[1] = {0};
 8002b46:	2300      	movs	r3, #0
 8002b48:	733b      	strb	r3, [r7, #12]
	cs_reset();
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	2110      	movs	r1, #16
 8002b4e:	480d      	ldr	r0, [pc, #52]	; (8002b84 <ReadSR+0x48>)
 8002b50:	f7fe f91e 	bl	8000d90 <HAL_GPIO_WritePin>
	tx_buf[0] =  SR_address;
 8002b54:	4a0c      	ldr	r2, [pc, #48]	; (8002b88 <ReadSR+0x4c>)
 8002b56:	79fb      	ldrb	r3, [r7, #7]
 8002b58:	7013      	strb	r3, [r2, #0]
	SPI1_Send(tx_buf,1);
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	480a      	ldr	r0, [pc, #40]	; (8002b88 <ReadSR+0x4c>)
 8002b5e:	f7ff fee7 	bl	8002930 <SPI1_Send>
	SPI1_Recv(RSR,1);
 8002b62:	f107 030c 	add.w	r3, r7, #12
 8002b66:	2101      	movs	r1, #1
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff fef5 	bl	8002958 <SPI1_Recv>
	cs_set();
 8002b6e:	2201      	movs	r2, #1
 8002b70:	2110      	movs	r1, #16
 8002b72:	4804      	ldr	r0, [pc, #16]	; (8002b84 <ReadSR+0x48>)
 8002b74:	f7fe f90c 	bl	8000d90 <HAL_GPIO_WritePin>
	return RSR[0];
 8002b78:	7b3b      	ldrb	r3, [r7, #12]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40010800 	.word	0x40010800
 8002b88:	200003a4 	.word	0x200003a4

08002b8c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002b96:	2300      	movs	r3, #0
 8002b98:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002b9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b9e:	2b84      	cmp	r3, #132	; 0x84
 8002ba0:	d005      	beq.n	8002bae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002ba2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	4413      	add	r3, r2
 8002baa:	3303      	adds	r3, #3
 8002bac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002bae:	68fb      	ldr	r3, [r7, #12]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr

08002bba <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002bbe:	f000 fae7 	bl	8003190 <vTaskStartScheduler>
  
  return osOK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bca:	b089      	sub	sp, #36	; 0x24
 8002bcc:	af04      	add	r7, sp, #16
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d020      	beq.n	8002c1c <osThreadCreate+0x54>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d01c      	beq.n	8002c1c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685c      	ldr	r4, [r3, #4]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681d      	ldr	r5, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	691e      	ldr	r6, [r3, #16]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff ffc9 	bl	8002b8c <makeFreeRtosPriority>
 8002bfa:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c04:	9202      	str	r2, [sp, #8]
 8002c06:	9301      	str	r3, [sp, #4]
 8002c08:	9100      	str	r1, [sp, #0]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	4632      	mov	r2, r6
 8002c0e:	4629      	mov	r1, r5
 8002c10:	4620      	mov	r0, r4
 8002c12:	f000 f8e8 	bl	8002de6 <xTaskCreateStatic>
 8002c16:	4603      	mov	r3, r0
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	e01c      	b.n	8002c56 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685c      	ldr	r4, [r3, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c28:	b29e      	uxth	r6, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff ffab 	bl	8002b8c <makeFreeRtosPriority>
 8002c36:	4602      	mov	r2, r0
 8002c38:	f107 030c 	add.w	r3, r7, #12
 8002c3c:	9301      	str	r3, [sp, #4]
 8002c3e:	9200      	str	r2, [sp, #0]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	4632      	mov	r2, r6
 8002c44:	4629      	mov	r1, r5
 8002c46:	4620      	mov	r0, r4
 8002c48:	f000 f929 	bl	8002e9e <xTaskCreate>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d001      	beq.n	8002c56 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	e000      	b.n	8002c58 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002c56:	68fb      	ldr	r3, [r7, #12]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c60 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <osDelay+0x16>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	e000      	b.n	8002c78 <osDelay+0x18>
 8002c76:	2301      	movs	r3, #1
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f000 fa55 	bl	8003128 <vTaskDelay>
  
  return osOK;
 8002c7e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f103 0208 	add.w	r2, r3, #8
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f103 0208 	add.w	r2, r3, #8
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f103 0208 	add.w	r2, r3, #8
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr

08002cc6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr

08002cde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b085      	sub	sp, #20
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
 8002ce6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	601a      	str	r2, [r3, #0]
}
 8002d1a:	bf00      	nop
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3a:	d103      	bne.n	8002d44 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	e00c      	b.n	8002d5e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3308      	adds	r3, #8
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	e002      	b.n	8002d52 <vListInsert+0x2e>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d2f6      	bcs.n	8002d4c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	601a      	str	r2, [r3, #0]
}
 8002d8a:	bf00      	nop
 8002d8c:	3714      	adds	r7, #20
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr

08002d94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6892      	ldr	r2, [r2, #8]
 8002daa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6852      	ldr	r2, [r2, #4]
 8002db4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d103      	bne.n	8002dc8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	1e5a      	subs	r2, r3, #1
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr

08002de6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b08e      	sub	sp, #56	; 0x38
 8002dea:	af04      	add	r7, sp, #16
 8002dec:	60f8      	str	r0, [r7, #12]
 8002dee:	60b9      	str	r1, [r7, #8]
 8002df0:	607a      	str	r2, [r7, #4]
 8002df2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10a      	bne.n	8002e10 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfe:	f383 8811 	msr	BASEPRI, r3
 8002e02:	f3bf 8f6f 	isb	sy
 8002e06:	f3bf 8f4f 	dsb	sy
 8002e0a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002e0c:	bf00      	nop
 8002e0e:	e7fe      	b.n	8002e0e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10a      	bne.n	8002e2c <xTaskCreateStatic+0x46>
	__asm volatile
 8002e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1a:	f383 8811 	msr	BASEPRI, r3
 8002e1e:	f3bf 8f6f 	isb	sy
 8002e22:	f3bf 8f4f 	dsb	sy
 8002e26:	61fb      	str	r3, [r7, #28]
}
 8002e28:	bf00      	nop
 8002e2a:	e7fe      	b.n	8002e2a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002e2c:	23b4      	movs	r3, #180	; 0xb4
 8002e2e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	2bb4      	cmp	r3, #180	; 0xb4
 8002e34:	d00a      	beq.n	8002e4c <xTaskCreateStatic+0x66>
	__asm volatile
 8002e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3a:	f383 8811 	msr	BASEPRI, r3
 8002e3e:	f3bf 8f6f 	isb	sy
 8002e42:	f3bf 8f4f 	dsb	sy
 8002e46:	61bb      	str	r3, [r7, #24]
}
 8002e48:	bf00      	nop
 8002e4a:	e7fe      	b.n	8002e4a <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d01e      	beq.n	8002e90 <xTaskCreateStatic+0xaa>
 8002e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d01b      	beq.n	8002e90 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e5a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e60:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	2202      	movs	r2, #2
 8002e66:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	9303      	str	r3, [sp, #12]
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	9302      	str	r3, [sp, #8]
 8002e72:	f107 0314 	add.w	r3, r7, #20
 8002e76:	9301      	str	r3, [sp, #4]
 8002e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	68b9      	ldr	r1, [r7, #8]
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 f850 	bl	8002f28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e8a:	f000 f8e3 	bl	8003054 <prvAddNewTaskToReadyList>
 8002e8e:	e001      	b.n	8002e94 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002e94:	697b      	ldr	r3, [r7, #20]
	}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3728      	adds	r7, #40	; 0x28
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b08c      	sub	sp, #48	; 0x30
 8002ea2:	af04      	add	r7, sp, #16
 8002ea4:	60f8      	str	r0, [r7, #12]
 8002ea6:	60b9      	str	r1, [r7, #8]
 8002ea8:	603b      	str	r3, [r7, #0]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002eae:	88fb      	ldrh	r3, [r7, #6]
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 fe94 	bl	8003be0 <pvPortMalloc>
 8002eb8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00e      	beq.n	8002ede <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002ec0:	20b4      	movs	r0, #180	; 0xb4
 8002ec2:	f000 fe8d 	bl	8003be0 <pvPortMalloc>
 8002ec6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	631a      	str	r2, [r3, #48]	; 0x30
 8002ed4:	e005      	b.n	8002ee2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002ed6:	6978      	ldr	r0, [r7, #20]
 8002ed8:	f000 ff46 	bl	8003d68 <vPortFree>
 8002edc:	e001      	b.n	8002ee2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d017      	beq.n	8002f18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ef0:	88fa      	ldrh	r2, [r7, #6]
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	9303      	str	r3, [sp, #12]
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	9302      	str	r3, [sp, #8]
 8002efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efc:	9301      	str	r3, [sp, #4]
 8002efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	68b9      	ldr	r1, [r7, #8]
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 f80e 	bl	8002f28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f0c:	69f8      	ldr	r0, [r7, #28]
 8002f0e:	f000 f8a1 	bl	8003054 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002f12:	2301      	movs	r3, #1
 8002f14:	61bb      	str	r3, [r7, #24]
 8002f16:	e002      	b.n	8002f1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f18:	f04f 33ff 	mov.w	r3, #4294967295
 8002f1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002f1e:	69bb      	ldr	r3, [r7, #24]
	}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3720      	adds	r7, #32
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
 8002f34:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f40:	3b01      	subs	r3, #1
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	f023 0307 	bic.w	r3, r3, #7
 8002f4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00a      	beq.n	8002f70 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5e:	f383 8811 	msr	BASEPRI, r3
 8002f62:	f3bf 8f6f 	isb	sy
 8002f66:	f3bf 8f4f 	dsb	sy
 8002f6a:	617b      	str	r3, [r7, #20]
}
 8002f6c:	bf00      	nop
 8002f6e:	e7fe      	b.n	8002f6e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f70:	2300      	movs	r3, #0
 8002f72:	61fb      	str	r3, [r7, #28]
 8002f74:	e012      	b.n	8002f9c <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	7819      	ldrb	r1, [r3, #0]
 8002f7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	4413      	add	r3, r2
 8002f84:	3334      	adds	r3, #52	; 0x34
 8002f86:	460a      	mov	r2, r1
 8002f88:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	4413      	add	r3, r2
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d006      	beq.n	8002fa4 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	61fb      	str	r3, [r7, #28]
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	2b0f      	cmp	r3, #15
 8002fa0:	d9e9      	bls.n	8002f76 <prvInitialiseNewTask+0x4e>
 8002fa2:	e000      	b.n	8002fa6 <prvInitialiseNewTask+0x7e>
		{
			break;
 8002fa4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb0:	2b06      	cmp	r3, #6
 8002fb2:	d901      	bls.n	8002fb8 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002fb4:	2306      	movs	r3, #6
 8002fb6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fbc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fc2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fcc:	3304      	adds	r3, #4
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff fe79 	bl	8002cc6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd6:	3318      	adds	r3, #24
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff fe74 	bl	8002cc6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fe2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe6:	f1c3 0207 	rsb	r2, r3, #7
 8002fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ff2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003006:	334c      	adds	r3, #76	; 0x4c
 8003008:	2260      	movs	r2, #96	; 0x60
 800300a:	2100      	movs	r1, #0
 800300c:	4618      	mov	r0, r3
 800300e:	f000 ffe5 	bl	8003fdc <memset>
 8003012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003014:	4a0c      	ldr	r2, [pc, #48]	; (8003048 <prvInitialiseNewTask+0x120>)
 8003016:	651a      	str	r2, [r3, #80]	; 0x50
 8003018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301a:	4a0c      	ldr	r2, [pc, #48]	; (800304c <prvInitialiseNewTask+0x124>)
 800301c:	655a      	str	r2, [r3, #84]	; 0x54
 800301e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003020:	4a0b      	ldr	r2, [pc, #44]	; (8003050 <prvInitialiseNewTask+0x128>)
 8003022:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	68f9      	ldr	r1, [r7, #12]
 8003028:	69b8      	ldr	r0, [r7, #24]
 800302a:	f000 fc29 	bl	8003880 <pxPortInitialiseStack>
 800302e:	4602      	mov	r2, r0
 8003030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003032:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003036:	2b00      	cmp	r3, #0
 8003038:	d002      	beq.n	8003040 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800303a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800303e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003040:	bf00      	nop
 8003042:	3720      	adds	r7, #32
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	08004284 	.word	0x08004284
 800304c:	080042a4 	.word	0x080042a4
 8003050:	08004264 	.word	0x08004264

08003054 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800305c:	f000 fcfe 	bl	8003a5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003060:	4b2a      	ldr	r3, [pc, #168]	; (800310c <prvAddNewTaskToReadyList+0xb8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	3301      	adds	r3, #1
 8003066:	4a29      	ldr	r2, [pc, #164]	; (800310c <prvAddNewTaskToReadyList+0xb8>)
 8003068:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800306a:	4b29      	ldr	r3, [pc, #164]	; (8003110 <prvAddNewTaskToReadyList+0xbc>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d109      	bne.n	8003086 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003072:	4a27      	ldr	r2, [pc, #156]	; (8003110 <prvAddNewTaskToReadyList+0xbc>)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003078:	4b24      	ldr	r3, [pc, #144]	; (800310c <prvAddNewTaskToReadyList+0xb8>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d110      	bne.n	80030a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003080:	f000 fad2 	bl	8003628 <prvInitialiseTaskLists>
 8003084:	e00d      	b.n	80030a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003086:	4b23      	ldr	r3, [pc, #140]	; (8003114 <prvAddNewTaskToReadyList+0xc0>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d109      	bne.n	80030a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800308e:	4b20      	ldr	r3, [pc, #128]	; (8003110 <prvAddNewTaskToReadyList+0xbc>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003098:	429a      	cmp	r2, r3
 800309a:	d802      	bhi.n	80030a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800309c:	4a1c      	ldr	r2, [pc, #112]	; (8003110 <prvAddNewTaskToReadyList+0xbc>)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80030a2:	4b1d      	ldr	r3, [pc, #116]	; (8003118 <prvAddNewTaskToReadyList+0xc4>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	3301      	adds	r3, #1
 80030a8:	4a1b      	ldr	r2, [pc, #108]	; (8003118 <prvAddNewTaskToReadyList+0xc4>)
 80030aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	2201      	movs	r2, #1
 80030b2:	409a      	lsls	r2, r3
 80030b4:	4b19      	ldr	r3, [pc, #100]	; (800311c <prvAddNewTaskToReadyList+0xc8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	4a18      	ldr	r2, [pc, #96]	; (800311c <prvAddNewTaskToReadyList+0xc8>)
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c2:	4613      	mov	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4413      	add	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4a15      	ldr	r2, [pc, #84]	; (8003120 <prvAddNewTaskToReadyList+0xcc>)
 80030cc:	441a      	add	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	3304      	adds	r3, #4
 80030d2:	4619      	mov	r1, r3
 80030d4:	4610      	mov	r0, r2
 80030d6:	f7ff fe02 	bl	8002cde <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80030da:	f000 fcef 	bl	8003abc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80030de:	4b0d      	ldr	r3, [pc, #52]	; (8003114 <prvAddNewTaskToReadyList+0xc0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00e      	beq.n	8003104 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80030e6:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <prvAddNewTaskToReadyList+0xbc>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d207      	bcs.n	8003104 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80030f4:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <prvAddNewTaskToReadyList+0xd0>)
 80030f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	f3bf 8f4f 	dsb	sy
 8003100:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003104:	bf00      	nop
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	200004b0 	.word	0x200004b0
 8003110:	200003b0 	.word	0x200003b0
 8003114:	200004bc 	.word	0x200004bc
 8003118:	200004cc 	.word	0x200004cc
 800311c:	200004b8 	.word	0x200004b8
 8003120:	200003b4 	.word	0x200003b4
 8003124:	e000ed04 	.word	0xe000ed04

08003128 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003130:	2300      	movs	r3, #0
 8003132:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d017      	beq.n	800316a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800313a:	4b13      	ldr	r3, [pc, #76]	; (8003188 <vTaskDelay+0x60>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00a      	beq.n	8003158 <vTaskDelay+0x30>
	__asm volatile
 8003142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003146:	f383 8811 	msr	BASEPRI, r3
 800314a:	f3bf 8f6f 	isb	sy
 800314e:	f3bf 8f4f 	dsb	sy
 8003152:	60bb      	str	r3, [r7, #8]
}
 8003154:	bf00      	nop
 8003156:	e7fe      	b.n	8003156 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003158:	f000 f884 	bl	8003264 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800315c:	2100      	movs	r1, #0
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 fb28 	bl	80037b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003164:	f000 f88c 	bl	8003280 <xTaskResumeAll>
 8003168:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d107      	bne.n	8003180 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003170:	4b06      	ldr	r3, [pc, #24]	; (800318c <vTaskDelay+0x64>)
 8003172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	f3bf 8f4f 	dsb	sy
 800317c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003180:	bf00      	nop
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	200004d8 	.word	0x200004d8
 800318c:	e000ed04 	.word	0xe000ed04

08003190 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b08a      	sub	sp, #40	; 0x28
 8003194:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003196:	2300      	movs	r3, #0
 8003198:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800319a:	2300      	movs	r3, #0
 800319c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800319e:	463a      	mov	r2, r7
 80031a0:	1d39      	adds	r1, r7, #4
 80031a2:	f107 0308 	add.w	r3, r7, #8
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fc ffd2 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80031ac:	6839      	ldr	r1, [r7, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	9202      	str	r2, [sp, #8]
 80031b4:	9301      	str	r3, [sp, #4]
 80031b6:	2300      	movs	r3, #0
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	2300      	movs	r3, #0
 80031bc:	460a      	mov	r2, r1
 80031be:	4921      	ldr	r1, [pc, #132]	; (8003244 <vTaskStartScheduler+0xb4>)
 80031c0:	4821      	ldr	r0, [pc, #132]	; (8003248 <vTaskStartScheduler+0xb8>)
 80031c2:	f7ff fe10 	bl	8002de6 <xTaskCreateStatic>
 80031c6:	4603      	mov	r3, r0
 80031c8:	4a20      	ldr	r2, [pc, #128]	; (800324c <vTaskStartScheduler+0xbc>)
 80031ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80031cc:	4b1f      	ldr	r3, [pc, #124]	; (800324c <vTaskStartScheduler+0xbc>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d002      	beq.n	80031da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80031d4:	2301      	movs	r3, #1
 80031d6:	617b      	str	r3, [r7, #20]
 80031d8:	e001      	b.n	80031de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d11b      	bne.n	800321c <vTaskStartScheduler+0x8c>
	__asm volatile
 80031e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e8:	f383 8811 	msr	BASEPRI, r3
 80031ec:	f3bf 8f6f 	isb	sy
 80031f0:	f3bf 8f4f 	dsb	sy
 80031f4:	613b      	str	r3, [r7, #16]
}
 80031f6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80031f8:	4b15      	ldr	r3, [pc, #84]	; (8003250 <vTaskStartScheduler+0xc0>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	334c      	adds	r3, #76	; 0x4c
 80031fe:	4a15      	ldr	r2, [pc, #84]	; (8003254 <vTaskStartScheduler+0xc4>)
 8003200:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003202:	4b15      	ldr	r3, [pc, #84]	; (8003258 <vTaskStartScheduler+0xc8>)
 8003204:	f04f 32ff 	mov.w	r2, #4294967295
 8003208:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800320a:	4b14      	ldr	r3, [pc, #80]	; (800325c <vTaskStartScheduler+0xcc>)
 800320c:	2201      	movs	r2, #1
 800320e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003210:	4b13      	ldr	r3, [pc, #76]	; (8003260 <vTaskStartScheduler+0xd0>)
 8003212:	2200      	movs	r2, #0
 8003214:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003216:	f000 fbaf 	bl	8003978 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800321a:	e00e      	b.n	800323a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003222:	d10a      	bne.n	800323a <vTaskStartScheduler+0xaa>
	__asm volatile
 8003224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003228:	f383 8811 	msr	BASEPRI, r3
 800322c:	f3bf 8f6f 	isb	sy
 8003230:	f3bf 8f4f 	dsb	sy
 8003234:	60fb      	str	r3, [r7, #12]
}
 8003236:	bf00      	nop
 8003238:	e7fe      	b.n	8003238 <vTaskStartScheduler+0xa8>
}
 800323a:	bf00      	nop
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	08004244 	.word	0x08004244
 8003248:	080035f9 	.word	0x080035f9
 800324c:	200004d4 	.word	0x200004d4
 8003250:	200003b0 	.word	0x200003b0
 8003254:	20000014 	.word	0x20000014
 8003258:	200004d0 	.word	0x200004d0
 800325c:	200004bc 	.word	0x200004bc
 8003260:	200004b4 	.word	0x200004b4

08003264 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003268:	4b04      	ldr	r3, [pc, #16]	; (800327c <vTaskSuspendAll+0x18>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	3301      	adds	r3, #1
 800326e:	4a03      	ldr	r2, [pc, #12]	; (800327c <vTaskSuspendAll+0x18>)
 8003270:	6013      	str	r3, [r2, #0]
}
 8003272:	bf00      	nop
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	200004d8 	.word	0x200004d8

08003280 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003286:	2300      	movs	r3, #0
 8003288:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800328a:	2300      	movs	r3, #0
 800328c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800328e:	4b41      	ldr	r3, [pc, #260]	; (8003394 <xTaskResumeAll+0x114>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10a      	bne.n	80032ac <xTaskResumeAll+0x2c>
	__asm volatile
 8003296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800329a:	f383 8811 	msr	BASEPRI, r3
 800329e:	f3bf 8f6f 	isb	sy
 80032a2:	f3bf 8f4f 	dsb	sy
 80032a6:	603b      	str	r3, [r7, #0]
}
 80032a8:	bf00      	nop
 80032aa:	e7fe      	b.n	80032aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80032ac:	f000 fbd6 	bl	8003a5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80032b0:	4b38      	ldr	r3, [pc, #224]	; (8003394 <xTaskResumeAll+0x114>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	3b01      	subs	r3, #1
 80032b6:	4a37      	ldr	r2, [pc, #220]	; (8003394 <xTaskResumeAll+0x114>)
 80032b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032ba:	4b36      	ldr	r3, [pc, #216]	; (8003394 <xTaskResumeAll+0x114>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d161      	bne.n	8003386 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80032c2:	4b35      	ldr	r3, [pc, #212]	; (8003398 <xTaskResumeAll+0x118>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d05d      	beq.n	8003386 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032ca:	e02e      	b.n	800332a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80032cc:	4b33      	ldr	r3, [pc, #204]	; (800339c <xTaskResumeAll+0x11c>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	3318      	adds	r3, #24
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff fd5b 	bl	8002d94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	3304      	adds	r3, #4
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff fd56 	bl	8002d94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ec:	2201      	movs	r2, #1
 80032ee:	409a      	lsls	r2, r3
 80032f0:	4b2b      	ldr	r3, [pc, #172]	; (80033a0 <xTaskResumeAll+0x120>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	4a2a      	ldr	r2, [pc, #168]	; (80033a0 <xTaskResumeAll+0x120>)
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032fe:	4613      	mov	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4a27      	ldr	r2, [pc, #156]	; (80033a4 <xTaskResumeAll+0x124>)
 8003308:	441a      	add	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	3304      	adds	r3, #4
 800330e:	4619      	mov	r1, r3
 8003310:	4610      	mov	r0, r2
 8003312:	f7ff fce4 	bl	8002cde <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800331a:	4b23      	ldr	r3, [pc, #140]	; (80033a8 <xTaskResumeAll+0x128>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003320:	429a      	cmp	r2, r3
 8003322:	d302      	bcc.n	800332a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003324:	4b21      	ldr	r3, [pc, #132]	; (80033ac <xTaskResumeAll+0x12c>)
 8003326:	2201      	movs	r2, #1
 8003328:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800332a:	4b1c      	ldr	r3, [pc, #112]	; (800339c <xTaskResumeAll+0x11c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1cc      	bne.n	80032cc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003338:	f000 fa18 	bl	800376c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800333c:	4b1c      	ldr	r3, [pc, #112]	; (80033b0 <xTaskResumeAll+0x130>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d010      	beq.n	800336a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003348:	f000 f836 	bl	80033b8 <xTaskIncrementTick>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d002      	beq.n	8003358 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003352:	4b16      	ldr	r3, [pc, #88]	; (80033ac <xTaskResumeAll+0x12c>)
 8003354:	2201      	movs	r2, #1
 8003356:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3b01      	subs	r3, #1
 800335c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1f1      	bne.n	8003348 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003364:	4b12      	ldr	r3, [pc, #72]	; (80033b0 <xTaskResumeAll+0x130>)
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800336a:	4b10      	ldr	r3, [pc, #64]	; (80033ac <xTaskResumeAll+0x12c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d009      	beq.n	8003386 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003372:	2301      	movs	r3, #1
 8003374:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003376:	4b0f      	ldr	r3, [pc, #60]	; (80033b4 <xTaskResumeAll+0x134>)
 8003378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	f3bf 8f4f 	dsb	sy
 8003382:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003386:	f000 fb99 	bl	8003abc <vPortExitCritical>

	return xAlreadyYielded;
 800338a:	68bb      	ldr	r3, [r7, #8]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	200004d8 	.word	0x200004d8
 8003398:	200004b0 	.word	0x200004b0
 800339c:	20000470 	.word	0x20000470
 80033a0:	200004b8 	.word	0x200004b8
 80033a4:	200003b4 	.word	0x200003b4
 80033a8:	200003b0 	.word	0x200003b0
 80033ac:	200004c4 	.word	0x200004c4
 80033b0:	200004c0 	.word	0x200004c0
 80033b4:	e000ed04 	.word	0xe000ed04

080033b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80033be:	2300      	movs	r3, #0
 80033c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033c2:	4b51      	ldr	r3, [pc, #324]	; (8003508 <xTaskIncrementTick+0x150>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f040 808d 	bne.w	80034e6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80033cc:	4b4f      	ldr	r3, [pc, #316]	; (800350c <xTaskIncrementTick+0x154>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	3301      	adds	r3, #1
 80033d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80033d4:	4a4d      	ldr	r2, [pc, #308]	; (800350c <xTaskIncrementTick+0x154>)
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d120      	bne.n	8003422 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80033e0:	4b4b      	ldr	r3, [pc, #300]	; (8003510 <xTaskIncrementTick+0x158>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00a      	beq.n	8003400 <xTaskIncrementTick+0x48>
	__asm volatile
 80033ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ee:	f383 8811 	msr	BASEPRI, r3
 80033f2:	f3bf 8f6f 	isb	sy
 80033f6:	f3bf 8f4f 	dsb	sy
 80033fa:	603b      	str	r3, [r7, #0]
}
 80033fc:	bf00      	nop
 80033fe:	e7fe      	b.n	80033fe <xTaskIncrementTick+0x46>
 8003400:	4b43      	ldr	r3, [pc, #268]	; (8003510 <xTaskIncrementTick+0x158>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	60fb      	str	r3, [r7, #12]
 8003406:	4b43      	ldr	r3, [pc, #268]	; (8003514 <xTaskIncrementTick+0x15c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a41      	ldr	r2, [pc, #260]	; (8003510 <xTaskIncrementTick+0x158>)
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	4a41      	ldr	r2, [pc, #260]	; (8003514 <xTaskIncrementTick+0x15c>)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6013      	str	r3, [r2, #0]
 8003414:	4b40      	ldr	r3, [pc, #256]	; (8003518 <xTaskIncrementTick+0x160>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	3301      	adds	r3, #1
 800341a:	4a3f      	ldr	r2, [pc, #252]	; (8003518 <xTaskIncrementTick+0x160>)
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	f000 f9a5 	bl	800376c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003422:	4b3e      	ldr	r3, [pc, #248]	; (800351c <xTaskIncrementTick+0x164>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	429a      	cmp	r2, r3
 800342a:	d34d      	bcc.n	80034c8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800342c:	4b38      	ldr	r3, [pc, #224]	; (8003510 <xTaskIncrementTick+0x158>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <xTaskIncrementTick+0x82>
 8003436:	2301      	movs	r3, #1
 8003438:	e000      	b.n	800343c <xTaskIncrementTick+0x84>
 800343a:	2300      	movs	r3, #0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d004      	beq.n	800344a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003440:	4b36      	ldr	r3, [pc, #216]	; (800351c <xTaskIncrementTick+0x164>)
 8003442:	f04f 32ff 	mov.w	r2, #4294967295
 8003446:	601a      	str	r2, [r3, #0]
					break;
 8003448:	e03e      	b.n	80034c8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800344a:	4b31      	ldr	r3, [pc, #196]	; (8003510 <xTaskIncrementTick+0x158>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	429a      	cmp	r2, r3
 8003460:	d203      	bcs.n	800346a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003462:	4a2e      	ldr	r2, [pc, #184]	; (800351c <xTaskIncrementTick+0x164>)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6013      	str	r3, [r2, #0]
						break;
 8003468:	e02e      	b.n	80034c8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	3304      	adds	r3, #4
 800346e:	4618      	mov	r0, r3
 8003470:	f7ff fc90 	bl	8002d94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003478:	2b00      	cmp	r3, #0
 800347a:	d004      	beq.n	8003486 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	3318      	adds	r3, #24
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff fc87 	bl	8002d94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348a:	2201      	movs	r2, #1
 800348c:	409a      	lsls	r2, r3
 800348e:	4b24      	ldr	r3, [pc, #144]	; (8003520 <xTaskIncrementTick+0x168>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4313      	orrs	r3, r2
 8003494:	4a22      	ldr	r2, [pc, #136]	; (8003520 <xTaskIncrementTick+0x168>)
 8003496:	6013      	str	r3, [r2, #0]
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4a1f      	ldr	r2, [pc, #124]	; (8003524 <xTaskIncrementTick+0x16c>)
 80034a6:	441a      	add	r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	3304      	adds	r3, #4
 80034ac:	4619      	mov	r1, r3
 80034ae:	4610      	mov	r0, r2
 80034b0:	f7ff fc15 	bl	8002cde <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b8:	4b1b      	ldr	r3, [pc, #108]	; (8003528 <xTaskIncrementTick+0x170>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034be:	429a      	cmp	r2, r3
 80034c0:	d3b4      	bcc.n	800342c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80034c2:	2301      	movs	r3, #1
 80034c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034c6:	e7b1      	b.n	800342c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80034c8:	4b17      	ldr	r3, [pc, #92]	; (8003528 <xTaskIncrementTick+0x170>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ce:	4915      	ldr	r1, [pc, #84]	; (8003524 <xTaskIncrementTick+0x16c>)
 80034d0:	4613      	mov	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d907      	bls.n	80034f0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80034e0:	2301      	movs	r3, #1
 80034e2:	617b      	str	r3, [r7, #20]
 80034e4:	e004      	b.n	80034f0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80034e6:	4b11      	ldr	r3, [pc, #68]	; (800352c <xTaskIncrementTick+0x174>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	3301      	adds	r3, #1
 80034ec:	4a0f      	ldr	r2, [pc, #60]	; (800352c <xTaskIncrementTick+0x174>)
 80034ee:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80034f0:	4b0f      	ldr	r3, [pc, #60]	; (8003530 <xTaskIncrementTick+0x178>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80034f8:	2301      	movs	r3, #1
 80034fa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80034fc:	697b      	ldr	r3, [r7, #20]
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3718      	adds	r7, #24
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	200004d8 	.word	0x200004d8
 800350c:	200004b4 	.word	0x200004b4
 8003510:	20000468 	.word	0x20000468
 8003514:	2000046c 	.word	0x2000046c
 8003518:	200004c8 	.word	0x200004c8
 800351c:	200004d0 	.word	0x200004d0
 8003520:	200004b8 	.word	0x200004b8
 8003524:	200003b4 	.word	0x200003b4
 8003528:	200003b0 	.word	0x200003b0
 800352c:	200004c0 	.word	0x200004c0
 8003530:	200004c4 	.word	0x200004c4

08003534 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003534:	b480      	push	{r7}
 8003536:	b087      	sub	sp, #28
 8003538:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800353a:	4b29      	ldr	r3, [pc, #164]	; (80035e0 <vTaskSwitchContext+0xac>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003542:	4b28      	ldr	r3, [pc, #160]	; (80035e4 <vTaskSwitchContext+0xb0>)
 8003544:	2201      	movs	r2, #1
 8003546:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003548:	e044      	b.n	80035d4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800354a:	4b26      	ldr	r3, [pc, #152]	; (80035e4 <vTaskSwitchContext+0xb0>)
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003550:	4b25      	ldr	r3, [pc, #148]	; (80035e8 <vTaskSwitchContext+0xb4>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	fab3 f383 	clz	r3, r3
 800355c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800355e:	7afb      	ldrb	r3, [r7, #11]
 8003560:	f1c3 031f 	rsb	r3, r3, #31
 8003564:	617b      	str	r3, [r7, #20]
 8003566:	4921      	ldr	r1, [pc, #132]	; (80035ec <vTaskSwitchContext+0xb8>)
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	4613      	mov	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10a      	bne.n	8003590 <vTaskSwitchContext+0x5c>
	__asm volatile
 800357a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357e:	f383 8811 	msr	BASEPRI, r3
 8003582:	f3bf 8f6f 	isb	sy
 8003586:	f3bf 8f4f 	dsb	sy
 800358a:	607b      	str	r3, [r7, #4]
}
 800358c:	bf00      	nop
 800358e:	e7fe      	b.n	800358e <vTaskSwitchContext+0x5a>
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	4613      	mov	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4a14      	ldr	r2, [pc, #80]	; (80035ec <vTaskSwitchContext+0xb8>)
 800359c:	4413      	add	r3, r2
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	605a      	str	r2, [r3, #4]
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	3308      	adds	r3, #8
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d104      	bne.n	80035c0 <vTaskSwitchContext+0x8c>
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	605a      	str	r2, [r3, #4]
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	4a0a      	ldr	r2, [pc, #40]	; (80035f0 <vTaskSwitchContext+0xbc>)
 80035c8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80035ca:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <vTaskSwitchContext+0xbc>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	334c      	adds	r3, #76	; 0x4c
 80035d0:	4a08      	ldr	r2, [pc, #32]	; (80035f4 <vTaskSwitchContext+0xc0>)
 80035d2:	6013      	str	r3, [r2, #0]
}
 80035d4:	bf00      	nop
 80035d6:	371c      	adds	r7, #28
 80035d8:	46bd      	mov	sp, r7
 80035da:	bc80      	pop	{r7}
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	200004d8 	.word	0x200004d8
 80035e4:	200004c4 	.word	0x200004c4
 80035e8:	200004b8 	.word	0x200004b8
 80035ec:	200003b4 	.word	0x200003b4
 80035f0:	200003b0 	.word	0x200003b0
 80035f4:	20000014 	.word	0x20000014

080035f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003600:	f000 f852 	bl	80036a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003604:	4b06      	ldr	r3, [pc, #24]	; (8003620 <prvIdleTask+0x28>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d9f9      	bls.n	8003600 <prvIdleTask+0x8>
			{
				taskYIELD();
 800360c:	4b05      	ldr	r3, [pc, #20]	; (8003624 <prvIdleTask+0x2c>)
 800360e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	f3bf 8f4f 	dsb	sy
 8003618:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800361c:	e7f0      	b.n	8003600 <prvIdleTask+0x8>
 800361e:	bf00      	nop
 8003620:	200003b4 	.word	0x200003b4
 8003624:	e000ed04 	.word	0xe000ed04

08003628 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800362e:	2300      	movs	r3, #0
 8003630:	607b      	str	r3, [r7, #4]
 8003632:	e00c      	b.n	800364e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	4613      	mov	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4a12      	ldr	r2, [pc, #72]	; (8003688 <prvInitialiseTaskLists+0x60>)
 8003640:	4413      	add	r3, r2
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff fb20 	bl	8002c88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3301      	adds	r3, #1
 800364c:	607b      	str	r3, [r7, #4]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b06      	cmp	r3, #6
 8003652:	d9ef      	bls.n	8003634 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003654:	480d      	ldr	r0, [pc, #52]	; (800368c <prvInitialiseTaskLists+0x64>)
 8003656:	f7ff fb17 	bl	8002c88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800365a:	480d      	ldr	r0, [pc, #52]	; (8003690 <prvInitialiseTaskLists+0x68>)
 800365c:	f7ff fb14 	bl	8002c88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003660:	480c      	ldr	r0, [pc, #48]	; (8003694 <prvInitialiseTaskLists+0x6c>)
 8003662:	f7ff fb11 	bl	8002c88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003666:	480c      	ldr	r0, [pc, #48]	; (8003698 <prvInitialiseTaskLists+0x70>)
 8003668:	f7ff fb0e 	bl	8002c88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800366c:	480b      	ldr	r0, [pc, #44]	; (800369c <prvInitialiseTaskLists+0x74>)
 800366e:	f7ff fb0b 	bl	8002c88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003672:	4b0b      	ldr	r3, [pc, #44]	; (80036a0 <prvInitialiseTaskLists+0x78>)
 8003674:	4a05      	ldr	r2, [pc, #20]	; (800368c <prvInitialiseTaskLists+0x64>)
 8003676:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003678:	4b0a      	ldr	r3, [pc, #40]	; (80036a4 <prvInitialiseTaskLists+0x7c>)
 800367a:	4a05      	ldr	r2, [pc, #20]	; (8003690 <prvInitialiseTaskLists+0x68>)
 800367c:	601a      	str	r2, [r3, #0]
}
 800367e:	bf00      	nop
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	200003b4 	.word	0x200003b4
 800368c:	20000440 	.word	0x20000440
 8003690:	20000454 	.word	0x20000454
 8003694:	20000470 	.word	0x20000470
 8003698:	20000484 	.word	0x20000484
 800369c:	2000049c 	.word	0x2000049c
 80036a0:	20000468 	.word	0x20000468
 80036a4:	2000046c 	.word	0x2000046c

080036a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036ae:	e019      	b.n	80036e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80036b0:	f000 f9d4 	bl	8003a5c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80036b4:	4b10      	ldr	r3, [pc, #64]	; (80036f8 <prvCheckTasksWaitingTermination+0x50>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3304      	adds	r3, #4
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7ff fb67 	bl	8002d94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80036c6:	4b0d      	ldr	r3, [pc, #52]	; (80036fc <prvCheckTasksWaitingTermination+0x54>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	3b01      	subs	r3, #1
 80036cc:	4a0b      	ldr	r2, [pc, #44]	; (80036fc <prvCheckTasksWaitingTermination+0x54>)
 80036ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80036d0:	4b0b      	ldr	r3, [pc, #44]	; (8003700 <prvCheckTasksWaitingTermination+0x58>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	3b01      	subs	r3, #1
 80036d6:	4a0a      	ldr	r2, [pc, #40]	; (8003700 <prvCheckTasksWaitingTermination+0x58>)
 80036d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80036da:	f000 f9ef 	bl	8003abc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f810 	bl	8003704 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036e4:	4b06      	ldr	r3, [pc, #24]	; (8003700 <prvCheckTasksWaitingTermination+0x58>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1e1      	bne.n	80036b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80036ec:	bf00      	nop
 80036ee:	bf00      	nop
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	20000484 	.word	0x20000484
 80036fc:	200004b0 	.word	0x200004b0
 8003700:	20000498 	.word	0x20000498

08003704 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	334c      	adds	r3, #76	; 0x4c
 8003710:	4618      	mov	r0, r3
 8003712:	f000 fc79 	bl	8004008 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800371c:	2b00      	cmp	r3, #0
 800371e:	d108      	bne.n	8003732 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003724:	4618      	mov	r0, r3
 8003726:	f000 fb1f 	bl	8003d68 <vPortFree>
				vPortFree( pxTCB );
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 fb1c 	bl	8003d68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003730:	e018      	b.n	8003764 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003738:	2b01      	cmp	r3, #1
 800373a:	d103      	bne.n	8003744 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 fb13 	bl	8003d68 <vPortFree>
	}
 8003742:	e00f      	b.n	8003764 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800374a:	2b02      	cmp	r3, #2
 800374c:	d00a      	beq.n	8003764 <prvDeleteTCB+0x60>
	__asm volatile
 800374e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003752:	f383 8811 	msr	BASEPRI, r3
 8003756:	f3bf 8f6f 	isb	sy
 800375a:	f3bf 8f4f 	dsb	sy
 800375e:	60fb      	str	r3, [r7, #12]
}
 8003760:	bf00      	nop
 8003762:	e7fe      	b.n	8003762 <prvDeleteTCB+0x5e>
	}
 8003764:	bf00      	nop
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003772:	4b0e      	ldr	r3, [pc, #56]	; (80037ac <prvResetNextTaskUnblockTime+0x40>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d101      	bne.n	8003780 <prvResetNextTaskUnblockTime+0x14>
 800377c:	2301      	movs	r3, #1
 800377e:	e000      	b.n	8003782 <prvResetNextTaskUnblockTime+0x16>
 8003780:	2300      	movs	r3, #0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d004      	beq.n	8003790 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003786:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <prvResetNextTaskUnblockTime+0x44>)
 8003788:	f04f 32ff 	mov.w	r2, #4294967295
 800378c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800378e:	e008      	b.n	80037a2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003790:	4b06      	ldr	r3, [pc, #24]	; (80037ac <prvResetNextTaskUnblockTime+0x40>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	4a04      	ldr	r2, [pc, #16]	; (80037b0 <prvResetNextTaskUnblockTime+0x44>)
 80037a0:	6013      	str	r3, [r2, #0]
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bc80      	pop	{r7}
 80037aa:	4770      	bx	lr
 80037ac:	20000468 	.word	0x20000468
 80037b0:	200004d0 	.word	0x200004d0

080037b4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80037be:	4b29      	ldr	r3, [pc, #164]	; (8003864 <prvAddCurrentTaskToDelayedList+0xb0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037c4:	4b28      	ldr	r3, [pc, #160]	; (8003868 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	3304      	adds	r3, #4
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7ff fae2 	bl	8002d94 <uxListRemove>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10b      	bne.n	80037ee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80037d6:	4b24      	ldr	r3, [pc, #144]	; (8003868 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037dc:	2201      	movs	r2, #1
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	43da      	mvns	r2, r3
 80037e4:	4b21      	ldr	r3, [pc, #132]	; (800386c <prvAddCurrentTaskToDelayedList+0xb8>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4013      	ands	r3, r2
 80037ea:	4a20      	ldr	r2, [pc, #128]	; (800386c <prvAddCurrentTaskToDelayedList+0xb8>)
 80037ec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f4:	d10a      	bne.n	800380c <prvAddCurrentTaskToDelayedList+0x58>
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d007      	beq.n	800380c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037fc:	4b1a      	ldr	r3, [pc, #104]	; (8003868 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	3304      	adds	r3, #4
 8003802:	4619      	mov	r1, r3
 8003804:	481a      	ldr	r0, [pc, #104]	; (8003870 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003806:	f7ff fa6a 	bl	8002cde <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800380a:	e026      	b.n	800385a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4413      	add	r3, r2
 8003812:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003814:	4b14      	ldr	r3, [pc, #80]	; (8003868 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	429a      	cmp	r2, r3
 8003822:	d209      	bcs.n	8003838 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003824:	4b13      	ldr	r3, [pc, #76]	; (8003874 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	4b0f      	ldr	r3, [pc, #60]	; (8003868 <prvAddCurrentTaskToDelayedList+0xb4>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	3304      	adds	r3, #4
 800382e:	4619      	mov	r1, r3
 8003830:	4610      	mov	r0, r2
 8003832:	f7ff fa77 	bl	8002d24 <vListInsert>
}
 8003836:	e010      	b.n	800385a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003838:	4b0f      	ldr	r3, [pc, #60]	; (8003878 <prvAddCurrentTaskToDelayedList+0xc4>)
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	4b0a      	ldr	r3, [pc, #40]	; (8003868 <prvAddCurrentTaskToDelayedList+0xb4>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	3304      	adds	r3, #4
 8003842:	4619      	mov	r1, r3
 8003844:	4610      	mov	r0, r2
 8003846:	f7ff fa6d 	bl	8002d24 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800384a:	4b0c      	ldr	r3, [pc, #48]	; (800387c <prvAddCurrentTaskToDelayedList+0xc8>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	429a      	cmp	r2, r3
 8003852:	d202      	bcs.n	800385a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003854:	4a09      	ldr	r2, [pc, #36]	; (800387c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	6013      	str	r3, [r2, #0]
}
 800385a:	bf00      	nop
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	200004b4 	.word	0x200004b4
 8003868:	200003b0 	.word	0x200003b0
 800386c:	200004b8 	.word	0x200004b8
 8003870:	2000049c 	.word	0x2000049c
 8003874:	2000046c 	.word	0x2000046c
 8003878:	20000468 	.word	0x20000468
 800387c:	200004d0 	.word	0x200004d0

08003880 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	3b04      	subs	r3, #4
 8003890:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003898:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	3b04      	subs	r3, #4
 800389e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	f023 0201 	bic.w	r2, r3, #1
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	3b04      	subs	r3, #4
 80038ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80038b0:	4a08      	ldr	r2, [pc, #32]	; (80038d4 <pxPortInitialiseStack+0x54>)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	3b14      	subs	r3, #20
 80038ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	3b20      	subs	r3, #32
 80038c6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80038c8:	68fb      	ldr	r3, [r7, #12]
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3714      	adds	r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bc80      	pop	{r7}
 80038d2:	4770      	bx	lr
 80038d4:	080038d9 	.word	0x080038d9

080038d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80038de:	2300      	movs	r3, #0
 80038e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80038e2:	4b12      	ldr	r3, [pc, #72]	; (800392c <prvTaskExitError+0x54>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ea:	d00a      	beq.n	8003902 <prvTaskExitError+0x2a>
	__asm volatile
 80038ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f0:	f383 8811 	msr	BASEPRI, r3
 80038f4:	f3bf 8f6f 	isb	sy
 80038f8:	f3bf 8f4f 	dsb	sy
 80038fc:	60fb      	str	r3, [r7, #12]
}
 80038fe:	bf00      	nop
 8003900:	e7fe      	b.n	8003900 <prvTaskExitError+0x28>
	__asm volatile
 8003902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003906:	f383 8811 	msr	BASEPRI, r3
 800390a:	f3bf 8f6f 	isb	sy
 800390e:	f3bf 8f4f 	dsb	sy
 8003912:	60bb      	str	r3, [r7, #8]
}
 8003914:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003916:	bf00      	nop
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0fc      	beq.n	8003918 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800391e:	bf00      	nop
 8003920:	bf00      	nop
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	20000010 	.word	0x20000010

08003930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003930:	4b07      	ldr	r3, [pc, #28]	; (8003950 <pxCurrentTCBConst2>)
 8003932:	6819      	ldr	r1, [r3, #0]
 8003934:	6808      	ldr	r0, [r1, #0]
 8003936:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800393a:	f380 8809 	msr	PSP, r0
 800393e:	f3bf 8f6f 	isb	sy
 8003942:	f04f 0000 	mov.w	r0, #0
 8003946:	f380 8811 	msr	BASEPRI, r0
 800394a:	f04e 0e0d 	orr.w	lr, lr, #13
 800394e:	4770      	bx	lr

08003950 <pxCurrentTCBConst2>:
 8003950:	200003b0 	.word	0x200003b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003954:	bf00      	nop
 8003956:	bf00      	nop

08003958 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003958:	4806      	ldr	r0, [pc, #24]	; (8003974 <prvPortStartFirstTask+0x1c>)
 800395a:	6800      	ldr	r0, [r0, #0]
 800395c:	6800      	ldr	r0, [r0, #0]
 800395e:	f380 8808 	msr	MSP, r0
 8003962:	b662      	cpsie	i
 8003964:	b661      	cpsie	f
 8003966:	f3bf 8f4f 	dsb	sy
 800396a:	f3bf 8f6f 	isb	sy
 800396e:	df00      	svc	0
 8003970:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003972:	bf00      	nop
 8003974:	e000ed08 	.word	0xe000ed08

08003978 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800397e:	4b32      	ldr	r3, [pc, #200]	; (8003a48 <xPortStartScheduler+0xd0>)
 8003980:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	b2db      	uxtb	r3, r3
 8003988:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	22ff      	movs	r2, #255	; 0xff
 800398e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	b2db      	uxtb	r3, r3
 8003996:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003998:	78fb      	ldrb	r3, [r7, #3]
 800399a:	b2db      	uxtb	r3, r3
 800399c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	4b2a      	ldr	r3, [pc, #168]	; (8003a4c <xPortStartScheduler+0xd4>)
 80039a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80039a6:	4b2a      	ldr	r3, [pc, #168]	; (8003a50 <xPortStartScheduler+0xd8>)
 80039a8:	2207      	movs	r2, #7
 80039aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039ac:	e009      	b.n	80039c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80039ae:	4b28      	ldr	r3, [pc, #160]	; (8003a50 <xPortStartScheduler+0xd8>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	3b01      	subs	r3, #1
 80039b4:	4a26      	ldr	r2, [pc, #152]	; (8003a50 <xPortStartScheduler+0xd8>)
 80039b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80039b8:	78fb      	ldrb	r3, [r7, #3]
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039c2:	78fb      	ldrb	r3, [r7, #3]
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ca:	2b80      	cmp	r3, #128	; 0x80
 80039cc:	d0ef      	beq.n	80039ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80039ce:	4b20      	ldr	r3, [pc, #128]	; (8003a50 <xPortStartScheduler+0xd8>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f1c3 0307 	rsb	r3, r3, #7
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	d00a      	beq.n	80039f0 <xPortStartScheduler+0x78>
	__asm volatile
 80039da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039de:	f383 8811 	msr	BASEPRI, r3
 80039e2:	f3bf 8f6f 	isb	sy
 80039e6:	f3bf 8f4f 	dsb	sy
 80039ea:	60bb      	str	r3, [r7, #8]
}
 80039ec:	bf00      	nop
 80039ee:	e7fe      	b.n	80039ee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80039f0:	4b17      	ldr	r3, [pc, #92]	; (8003a50 <xPortStartScheduler+0xd8>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	021b      	lsls	r3, r3, #8
 80039f6:	4a16      	ldr	r2, [pc, #88]	; (8003a50 <xPortStartScheduler+0xd8>)
 80039f8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80039fa:	4b15      	ldr	r3, [pc, #84]	; (8003a50 <xPortStartScheduler+0xd8>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a02:	4a13      	ldr	r2, [pc, #76]	; (8003a50 <xPortStartScheduler+0xd8>)
 8003a04:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003a0e:	4b11      	ldr	r3, [pc, #68]	; (8003a54 <xPortStartScheduler+0xdc>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a10      	ldr	r2, [pc, #64]	; (8003a54 <xPortStartScheduler+0xdc>)
 8003a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003a1a:	4b0e      	ldr	r3, [pc, #56]	; (8003a54 <xPortStartScheduler+0xdc>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a0d      	ldr	r2, [pc, #52]	; (8003a54 <xPortStartScheduler+0xdc>)
 8003a20:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003a24:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003a26:	f000 f8b9 	bl	8003b9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003a2a:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <xPortStartScheduler+0xe0>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003a30:	f7ff ff92 	bl	8003958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003a34:	f7ff fd7e 	bl	8003534 <vTaskSwitchContext>
	prvTaskExitError();
 8003a38:	f7ff ff4e 	bl	80038d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	e000e400 	.word	0xe000e400
 8003a4c:	200004dc 	.word	0x200004dc
 8003a50:	200004e0 	.word	0x200004e0
 8003a54:	e000ed20 	.word	0xe000ed20
 8003a58:	20000010 	.word	0x20000010

08003a5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
	__asm volatile
 8003a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a66:	f383 8811 	msr	BASEPRI, r3
 8003a6a:	f3bf 8f6f 	isb	sy
 8003a6e:	f3bf 8f4f 	dsb	sy
 8003a72:	607b      	str	r3, [r7, #4]
}
 8003a74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003a76:	4b0f      	ldr	r3, [pc, #60]	; (8003ab4 <vPortEnterCritical+0x58>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	4a0d      	ldr	r2, [pc, #52]	; (8003ab4 <vPortEnterCritical+0x58>)
 8003a7e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003a80:	4b0c      	ldr	r3, [pc, #48]	; (8003ab4 <vPortEnterCritical+0x58>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d10f      	bne.n	8003aa8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003a88:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <vPortEnterCritical+0x5c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00a      	beq.n	8003aa8 <vPortEnterCritical+0x4c>
	__asm volatile
 8003a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a96:	f383 8811 	msr	BASEPRI, r3
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	603b      	str	r3, [r7, #0]
}
 8003aa4:	bf00      	nop
 8003aa6:	e7fe      	b.n	8003aa6 <vPortEnterCritical+0x4a>
	}
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bc80      	pop	{r7}
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	20000010 	.word	0x20000010
 8003ab8:	e000ed04 	.word	0xe000ed04

08003abc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003ac2:	4b11      	ldr	r3, [pc, #68]	; (8003b08 <vPortExitCritical+0x4c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10a      	bne.n	8003ae0 <vPortExitCritical+0x24>
	__asm volatile
 8003aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ace:	f383 8811 	msr	BASEPRI, r3
 8003ad2:	f3bf 8f6f 	isb	sy
 8003ad6:	f3bf 8f4f 	dsb	sy
 8003ada:	607b      	str	r3, [r7, #4]
}
 8003adc:	bf00      	nop
 8003ade:	e7fe      	b.n	8003ade <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003ae0:	4b09      	ldr	r3, [pc, #36]	; (8003b08 <vPortExitCritical+0x4c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	4a08      	ldr	r2, [pc, #32]	; (8003b08 <vPortExitCritical+0x4c>)
 8003ae8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003aea:	4b07      	ldr	r3, [pc, #28]	; (8003b08 <vPortExitCritical+0x4c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d105      	bne.n	8003afe <vPortExitCritical+0x42>
 8003af2:	2300      	movs	r3, #0
 8003af4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003afc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bc80      	pop	{r7}
 8003b06:	4770      	bx	lr
 8003b08:	20000010 	.word	0x20000010
 8003b0c:	00000000 	.word	0x00000000

08003b10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003b10:	f3ef 8009 	mrs	r0, PSP
 8003b14:	f3bf 8f6f 	isb	sy
 8003b18:	4b0d      	ldr	r3, [pc, #52]	; (8003b50 <pxCurrentTCBConst>)
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003b20:	6010      	str	r0, [r2, #0]
 8003b22:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003b26:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003b2a:	f380 8811 	msr	BASEPRI, r0
 8003b2e:	f7ff fd01 	bl	8003534 <vTaskSwitchContext>
 8003b32:	f04f 0000 	mov.w	r0, #0
 8003b36:	f380 8811 	msr	BASEPRI, r0
 8003b3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003b3e:	6819      	ldr	r1, [r3, #0]
 8003b40:	6808      	ldr	r0, [r1, #0]
 8003b42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003b46:	f380 8809 	msr	PSP, r0
 8003b4a:	f3bf 8f6f 	isb	sy
 8003b4e:	4770      	bx	lr

08003b50 <pxCurrentTCBConst>:
 8003b50:	200003b0 	.word	0x200003b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003b54:	bf00      	nop
 8003b56:	bf00      	nop

08003b58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
	__asm volatile
 8003b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b62:	f383 8811 	msr	BASEPRI, r3
 8003b66:	f3bf 8f6f 	isb	sy
 8003b6a:	f3bf 8f4f 	dsb	sy
 8003b6e:	607b      	str	r3, [r7, #4]
}
 8003b70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003b72:	f7ff fc21 	bl	80033b8 <xTaskIncrementTick>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d003      	beq.n	8003b84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003b7c:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <SysTick_Handler+0x40>)
 8003b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	2300      	movs	r3, #0
 8003b86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	f383 8811 	msr	BASEPRI, r3
}
 8003b8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003b90:	bf00      	nop
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	e000ed04 	.word	0xe000ed04

08003b9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003ba0:	4b0a      	ldr	r3, [pc, #40]	; (8003bcc <vPortSetupTimerInterrupt+0x30>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003ba6:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <vPortSetupTimerInterrupt+0x34>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003bac:	4b09      	ldr	r3, [pc, #36]	; (8003bd4 <vPortSetupTimerInterrupt+0x38>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a09      	ldr	r2, [pc, #36]	; (8003bd8 <vPortSetupTimerInterrupt+0x3c>)
 8003bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb6:	099b      	lsrs	r3, r3, #6
 8003bb8:	4a08      	ldr	r2, [pc, #32]	; (8003bdc <vPortSetupTimerInterrupt+0x40>)
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003bbe:	4b03      	ldr	r3, [pc, #12]	; (8003bcc <vPortSetupTimerInterrupt+0x30>)
 8003bc0:	2207      	movs	r2, #7
 8003bc2:	601a      	str	r2, [r3, #0]
}
 8003bc4:	bf00      	nop
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr
 8003bcc:	e000e010 	.word	0xe000e010
 8003bd0:	e000e018 	.word	0xe000e018
 8003bd4:	20000004 	.word	0x20000004
 8003bd8:	10624dd3 	.word	0x10624dd3
 8003bdc:	e000e014 	.word	0xe000e014

08003be0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b08a      	sub	sp, #40	; 0x28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003be8:	2300      	movs	r3, #0
 8003bea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003bec:	f7ff fb3a 	bl	8003264 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003bf0:	4b58      	ldr	r3, [pc, #352]	; (8003d54 <pvPortMalloc+0x174>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d101      	bne.n	8003bfc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003bf8:	f000 f910 	bl	8003e1c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003bfc:	4b56      	ldr	r3, [pc, #344]	; (8003d58 <pvPortMalloc+0x178>)
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4013      	ands	r3, r2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f040 808e 	bne.w	8003d26 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d01d      	beq.n	8003c4c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003c10:	2208      	movs	r2, #8
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4413      	add	r3, r2
 8003c16:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f003 0307 	and.w	r3, r3, #7
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d014      	beq.n	8003c4c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f023 0307 	bic.w	r3, r3, #7
 8003c28:	3308      	adds	r3, #8
 8003c2a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f003 0307 	and.w	r3, r3, #7
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00a      	beq.n	8003c4c <pvPortMalloc+0x6c>
	__asm volatile
 8003c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3a:	f383 8811 	msr	BASEPRI, r3
 8003c3e:	f3bf 8f6f 	isb	sy
 8003c42:	f3bf 8f4f 	dsb	sy
 8003c46:	617b      	str	r3, [r7, #20]
}
 8003c48:	bf00      	nop
 8003c4a:	e7fe      	b.n	8003c4a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d069      	beq.n	8003d26 <pvPortMalloc+0x146>
 8003c52:	4b42      	ldr	r3, [pc, #264]	; (8003d5c <pvPortMalloc+0x17c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d864      	bhi.n	8003d26 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003c5c:	4b40      	ldr	r3, [pc, #256]	; (8003d60 <pvPortMalloc+0x180>)
 8003c5e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003c60:	4b3f      	ldr	r3, [pc, #252]	; (8003d60 <pvPortMalloc+0x180>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c66:	e004      	b.n	8003c72 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d903      	bls.n	8003c84 <pvPortMalloc+0xa4>
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1f1      	bne.n	8003c68 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003c84:	4b33      	ldr	r3, [pc, #204]	; (8003d54 <pvPortMalloc+0x174>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d04b      	beq.n	8003d26 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2208      	movs	r2, #8
 8003c94:	4413      	add	r3, r2
 8003c96:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	1ad2      	subs	r2, r2, r3
 8003ca8:	2308      	movs	r3, #8
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d91f      	bls.n	8003cf0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	f003 0307 	and.w	r3, r3, #7
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00a      	beq.n	8003cd8 <pvPortMalloc+0xf8>
	__asm volatile
 8003cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc6:	f383 8811 	msr	BASEPRI, r3
 8003cca:	f3bf 8f6f 	isb	sy
 8003cce:	f3bf 8f4f 	dsb	sy
 8003cd2:	613b      	str	r3, [r7, #16]
}
 8003cd4:	bf00      	nop
 8003cd6:	e7fe      	b.n	8003cd6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	685a      	ldr	r2, [r3, #4]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	1ad2      	subs	r2, r2, r3
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003cea:	69b8      	ldr	r0, [r7, #24]
 8003cec:	f000 f8f8 	bl	8003ee0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003cf0:	4b1a      	ldr	r3, [pc, #104]	; (8003d5c <pvPortMalloc+0x17c>)
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	4a18      	ldr	r2, [pc, #96]	; (8003d5c <pvPortMalloc+0x17c>)
 8003cfc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003cfe:	4b17      	ldr	r3, [pc, #92]	; (8003d5c <pvPortMalloc+0x17c>)
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	4b18      	ldr	r3, [pc, #96]	; (8003d64 <pvPortMalloc+0x184>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d203      	bcs.n	8003d12 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003d0a:	4b14      	ldr	r3, [pc, #80]	; (8003d5c <pvPortMalloc+0x17c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a15      	ldr	r2, [pc, #84]	; (8003d64 <pvPortMalloc+0x184>)
 8003d10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	4b10      	ldr	r3, [pc, #64]	; (8003d58 <pvPortMalloc+0x178>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d22:	2200      	movs	r2, #0
 8003d24:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003d26:	f7ff faab 	bl	8003280 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00a      	beq.n	8003d4a <pvPortMalloc+0x16a>
	__asm volatile
 8003d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d38:	f383 8811 	msr	BASEPRI, r3
 8003d3c:	f3bf 8f6f 	isb	sy
 8003d40:	f3bf 8f4f 	dsb	sy
 8003d44:	60fb      	str	r3, [r7, #12]
}
 8003d46:	bf00      	nop
 8003d48:	e7fe      	b.n	8003d48 <pvPortMalloc+0x168>
	return pvReturn;
 8003d4a:	69fb      	ldr	r3, [r7, #28]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3728      	adds	r7, #40	; 0x28
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	200010ec 	.word	0x200010ec
 8003d58:	200010f8 	.word	0x200010f8
 8003d5c:	200010f0 	.word	0x200010f0
 8003d60:	200010e4 	.word	0x200010e4
 8003d64:	200010f4 	.word	0x200010f4

08003d68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d048      	beq.n	8003e0c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003d7a:	2308      	movs	r3, #8
 8003d7c:	425b      	negs	r3, r3
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	4413      	add	r3, r2
 8003d82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	4b21      	ldr	r3, [pc, #132]	; (8003e14 <vPortFree+0xac>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4013      	ands	r3, r2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10a      	bne.n	8003dac <vPortFree+0x44>
	__asm volatile
 8003d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9a:	f383 8811 	msr	BASEPRI, r3
 8003d9e:	f3bf 8f6f 	isb	sy
 8003da2:	f3bf 8f4f 	dsb	sy
 8003da6:	60fb      	str	r3, [r7, #12]
}
 8003da8:	bf00      	nop
 8003daa:	e7fe      	b.n	8003daa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00a      	beq.n	8003dca <vPortFree+0x62>
	__asm volatile
 8003db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db8:	f383 8811 	msr	BASEPRI, r3
 8003dbc:	f3bf 8f6f 	isb	sy
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	60bb      	str	r3, [r7, #8]
}
 8003dc6:	bf00      	nop
 8003dc8:	e7fe      	b.n	8003dc8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	4b11      	ldr	r3, [pc, #68]	; (8003e14 <vPortFree+0xac>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d019      	beq.n	8003e0c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d115      	bne.n	8003e0c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <vPortFree+0xac>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	43db      	mvns	r3, r3
 8003dea:	401a      	ands	r2, r3
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003df0:	f7ff fa38 	bl	8003264 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	4b07      	ldr	r3, [pc, #28]	; (8003e18 <vPortFree+0xb0>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	4a06      	ldr	r2, [pc, #24]	; (8003e18 <vPortFree+0xb0>)
 8003e00:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003e02:	6938      	ldr	r0, [r7, #16]
 8003e04:	f000 f86c 	bl	8003ee0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003e08:	f7ff fa3a 	bl	8003280 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003e0c:	bf00      	nop
 8003e0e:	3718      	adds	r7, #24
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	200010f8 	.word	0x200010f8
 8003e18:	200010f0 	.word	0x200010f0

08003e1c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003e22:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003e26:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003e28:	4b27      	ldr	r3, [pc, #156]	; (8003ec8 <prvHeapInit+0xac>)
 8003e2a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f003 0307 	and.w	r3, r3, #7
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00c      	beq.n	8003e50 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	3307      	adds	r3, #7
 8003e3a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f023 0307 	bic.w	r3, r3, #7
 8003e42:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	4a1f      	ldr	r2, [pc, #124]	; (8003ec8 <prvHeapInit+0xac>)
 8003e4c:	4413      	add	r3, r2
 8003e4e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003e54:	4a1d      	ldr	r2, [pc, #116]	; (8003ecc <prvHeapInit+0xb0>)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003e5a:	4b1c      	ldr	r3, [pc, #112]	; (8003ecc <prvHeapInit+0xb0>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	4413      	add	r3, r2
 8003e66:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003e68:	2208      	movs	r2, #8
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	1a9b      	subs	r3, r3, r2
 8003e6e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f023 0307 	bic.w	r3, r3, #7
 8003e76:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	4a15      	ldr	r2, [pc, #84]	; (8003ed0 <prvHeapInit+0xb4>)
 8003e7c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003e7e:	4b14      	ldr	r3, [pc, #80]	; (8003ed0 <prvHeapInit+0xb4>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2200      	movs	r2, #0
 8003e84:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003e86:	4b12      	ldr	r3, [pc, #72]	; (8003ed0 <prvHeapInit+0xb4>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	1ad2      	subs	r2, r2, r3
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003e9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ed0 <prvHeapInit+0xb4>)
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	4a0a      	ldr	r2, [pc, #40]	; (8003ed4 <prvHeapInit+0xb8>)
 8003eaa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	4a09      	ldr	r2, [pc, #36]	; (8003ed8 <prvHeapInit+0xbc>)
 8003eb2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003eb4:	4b09      	ldr	r3, [pc, #36]	; (8003edc <prvHeapInit+0xc0>)
 8003eb6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003eba:	601a      	str	r2, [r3, #0]
}
 8003ebc:	bf00      	nop
 8003ebe:	3714      	adds	r7, #20
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bc80      	pop	{r7}
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	200004e4 	.word	0x200004e4
 8003ecc:	200010e4 	.word	0x200010e4
 8003ed0:	200010ec 	.word	0x200010ec
 8003ed4:	200010f4 	.word	0x200010f4
 8003ed8:	200010f0 	.word	0x200010f0
 8003edc:	200010f8 	.word	0x200010f8

08003ee0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003ee8:	4b27      	ldr	r3, [pc, #156]	; (8003f88 <prvInsertBlockIntoFreeList+0xa8>)
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	e002      	b.n	8003ef4 <prvInsertBlockIntoFreeList+0x14>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d8f7      	bhi.n	8003eee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	4413      	add	r3, r2
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d108      	bne.n	8003f22 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	441a      	add	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	441a      	add	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d118      	bne.n	8003f68 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	4b14      	ldr	r3, [pc, #80]	; (8003f8c <prvInsertBlockIntoFreeList+0xac>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d00d      	beq.n	8003f5e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	441a      	add	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	e008      	b.n	8003f70 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003f5e:	4b0b      	ldr	r3, [pc, #44]	; (8003f8c <prvInsertBlockIntoFreeList+0xac>)
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	e003      	b.n	8003f70 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d002      	beq.n	8003f7e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f7e:	bf00      	nop
 8003f80:	3714      	adds	r7, #20
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bc80      	pop	{r7}
 8003f86:	4770      	bx	lr
 8003f88:	200010e4 	.word	0x200010e4
 8003f8c:	200010ec 	.word	0x200010ec

08003f90 <__libc_init_array>:
 8003f90:	b570      	push	{r4, r5, r6, lr}
 8003f92:	2600      	movs	r6, #0
 8003f94:	4d0c      	ldr	r5, [pc, #48]	; (8003fc8 <__libc_init_array+0x38>)
 8003f96:	4c0d      	ldr	r4, [pc, #52]	; (8003fcc <__libc_init_array+0x3c>)
 8003f98:	1b64      	subs	r4, r4, r5
 8003f9a:	10a4      	asrs	r4, r4, #2
 8003f9c:	42a6      	cmp	r6, r4
 8003f9e:	d109      	bne.n	8003fb4 <__libc_init_array+0x24>
 8003fa0:	f000 f8e6 	bl	8004170 <_init>
 8003fa4:	2600      	movs	r6, #0
 8003fa6:	4d0a      	ldr	r5, [pc, #40]	; (8003fd0 <__libc_init_array+0x40>)
 8003fa8:	4c0a      	ldr	r4, [pc, #40]	; (8003fd4 <__libc_init_array+0x44>)
 8003faa:	1b64      	subs	r4, r4, r5
 8003fac:	10a4      	asrs	r4, r4, #2
 8003fae:	42a6      	cmp	r6, r4
 8003fb0:	d105      	bne.n	8003fbe <__libc_init_array+0x2e>
 8003fb2:	bd70      	pop	{r4, r5, r6, pc}
 8003fb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fb8:	4798      	blx	r3
 8003fba:	3601      	adds	r6, #1
 8003fbc:	e7ee      	b.n	8003f9c <__libc_init_array+0xc>
 8003fbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fc2:	4798      	blx	r3
 8003fc4:	3601      	adds	r6, #1
 8003fc6:	e7f2      	b.n	8003fae <__libc_init_array+0x1e>
 8003fc8:	080042c4 	.word	0x080042c4
 8003fcc:	080042c4 	.word	0x080042c4
 8003fd0:	080042c4 	.word	0x080042c4
 8003fd4:	080042c8 	.word	0x080042c8

08003fd8 <__retarget_lock_acquire_recursive>:
 8003fd8:	4770      	bx	lr

08003fda <__retarget_lock_release_recursive>:
 8003fda:	4770      	bx	lr

08003fdc <memset>:
 8003fdc:	4603      	mov	r3, r0
 8003fde:	4402      	add	r2, r0
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d100      	bne.n	8003fe6 <memset+0xa>
 8003fe4:	4770      	bx	lr
 8003fe6:	f803 1b01 	strb.w	r1, [r3], #1
 8003fea:	e7f9      	b.n	8003fe0 <memset+0x4>

08003fec <cleanup_glue>:
 8003fec:	b538      	push	{r3, r4, r5, lr}
 8003fee:	460c      	mov	r4, r1
 8003ff0:	6809      	ldr	r1, [r1, #0]
 8003ff2:	4605      	mov	r5, r0
 8003ff4:	b109      	cbz	r1, 8003ffa <cleanup_glue+0xe>
 8003ff6:	f7ff fff9 	bl	8003fec <cleanup_glue>
 8003ffa:	4621      	mov	r1, r4
 8003ffc:	4628      	mov	r0, r5
 8003ffe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004002:	f000 b869 	b.w	80040d8 <_free_r>
	...

08004008 <_reclaim_reent>:
 8004008:	4b2c      	ldr	r3, [pc, #176]	; (80040bc <_reclaim_reent+0xb4>)
 800400a:	b570      	push	{r4, r5, r6, lr}
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4604      	mov	r4, r0
 8004010:	4283      	cmp	r3, r0
 8004012:	d051      	beq.n	80040b8 <_reclaim_reent+0xb0>
 8004014:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004016:	b143      	cbz	r3, 800402a <_reclaim_reent+0x22>
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d14a      	bne.n	80040b4 <_reclaim_reent+0xac>
 800401e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004020:	6819      	ldr	r1, [r3, #0]
 8004022:	b111      	cbz	r1, 800402a <_reclaim_reent+0x22>
 8004024:	4620      	mov	r0, r4
 8004026:	f000 f857 	bl	80040d8 <_free_r>
 800402a:	6961      	ldr	r1, [r4, #20]
 800402c:	b111      	cbz	r1, 8004034 <_reclaim_reent+0x2c>
 800402e:	4620      	mov	r0, r4
 8004030:	f000 f852 	bl	80040d8 <_free_r>
 8004034:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004036:	b111      	cbz	r1, 800403e <_reclaim_reent+0x36>
 8004038:	4620      	mov	r0, r4
 800403a:	f000 f84d 	bl	80040d8 <_free_r>
 800403e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004040:	b111      	cbz	r1, 8004048 <_reclaim_reent+0x40>
 8004042:	4620      	mov	r0, r4
 8004044:	f000 f848 	bl	80040d8 <_free_r>
 8004048:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800404a:	b111      	cbz	r1, 8004052 <_reclaim_reent+0x4a>
 800404c:	4620      	mov	r0, r4
 800404e:	f000 f843 	bl	80040d8 <_free_r>
 8004052:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004054:	b111      	cbz	r1, 800405c <_reclaim_reent+0x54>
 8004056:	4620      	mov	r0, r4
 8004058:	f000 f83e 	bl	80040d8 <_free_r>
 800405c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800405e:	b111      	cbz	r1, 8004066 <_reclaim_reent+0x5e>
 8004060:	4620      	mov	r0, r4
 8004062:	f000 f839 	bl	80040d8 <_free_r>
 8004066:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004068:	b111      	cbz	r1, 8004070 <_reclaim_reent+0x68>
 800406a:	4620      	mov	r0, r4
 800406c:	f000 f834 	bl	80040d8 <_free_r>
 8004070:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004072:	b111      	cbz	r1, 800407a <_reclaim_reent+0x72>
 8004074:	4620      	mov	r0, r4
 8004076:	f000 f82f 	bl	80040d8 <_free_r>
 800407a:	69a3      	ldr	r3, [r4, #24]
 800407c:	b1e3      	cbz	r3, 80040b8 <_reclaim_reent+0xb0>
 800407e:	4620      	mov	r0, r4
 8004080:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004082:	4798      	blx	r3
 8004084:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004086:	b1b9      	cbz	r1, 80040b8 <_reclaim_reent+0xb0>
 8004088:	4620      	mov	r0, r4
 800408a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800408e:	f7ff bfad 	b.w	8003fec <cleanup_glue>
 8004092:	5949      	ldr	r1, [r1, r5]
 8004094:	b941      	cbnz	r1, 80040a8 <_reclaim_reent+0xa0>
 8004096:	3504      	adds	r5, #4
 8004098:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800409a:	2d80      	cmp	r5, #128	; 0x80
 800409c:	68d9      	ldr	r1, [r3, #12]
 800409e:	d1f8      	bne.n	8004092 <_reclaim_reent+0x8a>
 80040a0:	4620      	mov	r0, r4
 80040a2:	f000 f819 	bl	80040d8 <_free_r>
 80040a6:	e7ba      	b.n	800401e <_reclaim_reent+0x16>
 80040a8:	680e      	ldr	r6, [r1, #0]
 80040aa:	4620      	mov	r0, r4
 80040ac:	f000 f814 	bl	80040d8 <_free_r>
 80040b0:	4631      	mov	r1, r6
 80040b2:	e7ef      	b.n	8004094 <_reclaim_reent+0x8c>
 80040b4:	2500      	movs	r5, #0
 80040b6:	e7ef      	b.n	8004098 <_reclaim_reent+0x90>
 80040b8:	bd70      	pop	{r4, r5, r6, pc}
 80040ba:	bf00      	nop
 80040bc:	20000014 	.word	0x20000014

080040c0 <__malloc_lock>:
 80040c0:	4801      	ldr	r0, [pc, #4]	; (80040c8 <__malloc_lock+0x8>)
 80040c2:	f7ff bf89 	b.w	8003fd8 <__retarget_lock_acquire_recursive>
 80040c6:	bf00      	nop
 80040c8:	2000160c 	.word	0x2000160c

080040cc <__malloc_unlock>:
 80040cc:	4801      	ldr	r0, [pc, #4]	; (80040d4 <__malloc_unlock+0x8>)
 80040ce:	f7ff bf84 	b.w	8003fda <__retarget_lock_release_recursive>
 80040d2:	bf00      	nop
 80040d4:	2000160c 	.word	0x2000160c

080040d8 <_free_r>:
 80040d8:	b538      	push	{r3, r4, r5, lr}
 80040da:	4605      	mov	r5, r0
 80040dc:	2900      	cmp	r1, #0
 80040de:	d043      	beq.n	8004168 <_free_r+0x90>
 80040e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040e4:	1f0c      	subs	r4, r1, #4
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	bfb8      	it	lt
 80040ea:	18e4      	addlt	r4, r4, r3
 80040ec:	f7ff ffe8 	bl	80040c0 <__malloc_lock>
 80040f0:	4a1e      	ldr	r2, [pc, #120]	; (800416c <_free_r+0x94>)
 80040f2:	6813      	ldr	r3, [r2, #0]
 80040f4:	4610      	mov	r0, r2
 80040f6:	b933      	cbnz	r3, 8004106 <_free_r+0x2e>
 80040f8:	6063      	str	r3, [r4, #4]
 80040fa:	6014      	str	r4, [r2, #0]
 80040fc:	4628      	mov	r0, r5
 80040fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004102:	f7ff bfe3 	b.w	80040cc <__malloc_unlock>
 8004106:	42a3      	cmp	r3, r4
 8004108:	d90a      	bls.n	8004120 <_free_r+0x48>
 800410a:	6821      	ldr	r1, [r4, #0]
 800410c:	1862      	adds	r2, r4, r1
 800410e:	4293      	cmp	r3, r2
 8004110:	bf01      	itttt	eq
 8004112:	681a      	ldreq	r2, [r3, #0]
 8004114:	685b      	ldreq	r3, [r3, #4]
 8004116:	1852      	addeq	r2, r2, r1
 8004118:	6022      	streq	r2, [r4, #0]
 800411a:	6063      	str	r3, [r4, #4]
 800411c:	6004      	str	r4, [r0, #0]
 800411e:	e7ed      	b.n	80040fc <_free_r+0x24>
 8004120:	461a      	mov	r2, r3
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	b10b      	cbz	r3, 800412a <_free_r+0x52>
 8004126:	42a3      	cmp	r3, r4
 8004128:	d9fa      	bls.n	8004120 <_free_r+0x48>
 800412a:	6811      	ldr	r1, [r2, #0]
 800412c:	1850      	adds	r0, r2, r1
 800412e:	42a0      	cmp	r0, r4
 8004130:	d10b      	bne.n	800414a <_free_r+0x72>
 8004132:	6820      	ldr	r0, [r4, #0]
 8004134:	4401      	add	r1, r0
 8004136:	1850      	adds	r0, r2, r1
 8004138:	4283      	cmp	r3, r0
 800413a:	6011      	str	r1, [r2, #0]
 800413c:	d1de      	bne.n	80040fc <_free_r+0x24>
 800413e:	6818      	ldr	r0, [r3, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	4401      	add	r1, r0
 8004144:	6011      	str	r1, [r2, #0]
 8004146:	6053      	str	r3, [r2, #4]
 8004148:	e7d8      	b.n	80040fc <_free_r+0x24>
 800414a:	d902      	bls.n	8004152 <_free_r+0x7a>
 800414c:	230c      	movs	r3, #12
 800414e:	602b      	str	r3, [r5, #0]
 8004150:	e7d4      	b.n	80040fc <_free_r+0x24>
 8004152:	6820      	ldr	r0, [r4, #0]
 8004154:	1821      	adds	r1, r4, r0
 8004156:	428b      	cmp	r3, r1
 8004158:	bf01      	itttt	eq
 800415a:	6819      	ldreq	r1, [r3, #0]
 800415c:	685b      	ldreq	r3, [r3, #4]
 800415e:	1809      	addeq	r1, r1, r0
 8004160:	6021      	streq	r1, [r4, #0]
 8004162:	6063      	str	r3, [r4, #4]
 8004164:	6054      	str	r4, [r2, #4]
 8004166:	e7c9      	b.n	80040fc <_free_r+0x24>
 8004168:	bd38      	pop	{r3, r4, r5, pc}
 800416a:	bf00      	nop
 800416c:	200010fc 	.word	0x200010fc

08004170 <_init>:
 8004170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004172:	bf00      	nop
 8004174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004176:	bc08      	pop	{r3}
 8004178:	469e      	mov	lr, r3
 800417a:	4770      	bx	lr

0800417c <_fini>:
 800417c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800417e:	bf00      	nop
 8004180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004182:	bc08      	pop	{r3}
 8004184:	469e      	mov	lr, r3
 8004186:	4770      	bx	lr
