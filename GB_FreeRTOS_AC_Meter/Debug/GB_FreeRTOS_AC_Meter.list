
GB_FreeRTOS_AC_Meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bf4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  08006d04  08006d04  00016d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800706c  0800706c  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800706c  0800706c  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800706c  0800706c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800706c  0800706c  0001706c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007070  08007070  00017070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08007074  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001698  20000088  080070fc  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001720  080070fc  00021720  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001af4f  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003977  00000000  00000000  0003b000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f0  00000000  00000000  0003e978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015c0  00000000  00000000  00040068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab1a  00000000  00000000  00041628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000185e3  00000000  00000000  0005c142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098075  00000000  00000000  00074725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010c79a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006800  00000000  00000000  0010c7f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	08006cec 	.word	0x08006cec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	08006cec 	.word	0x08006cec

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2f>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a04:	bf24      	itt	cs
 8000a06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a0e:	d90d      	bls.n	8000a2c <__aeabi_d2f+0x30>
 8000a10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a24:	bf08      	it	eq
 8000a26:	f020 0001 	biceq.w	r0, r0, #1
 8000a2a:	4770      	bx	lr
 8000a2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a30:	d121      	bne.n	8000a76 <__aeabi_d2f+0x7a>
 8000a32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a36:	bfbc      	itt	lt
 8000a38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	4770      	bxlt	lr
 8000a3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a46:	f1c2 0218 	rsb	r2, r2, #24
 8000a4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a52:	fa20 f002 	lsr.w	r0, r0, r2
 8000a56:	bf18      	it	ne
 8000a58:	f040 0001 	orrne.w	r0, r0, #1
 8000a5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a68:	ea40 000c 	orr.w	r0, r0, ip
 8000a6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a74:	e7cc      	b.n	8000a10 <__aeabi_d2f+0x14>
 8000a76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a7a:	d107      	bne.n	8000a8c <__aeabi_d2f+0x90>
 8000a7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a80:	bf1e      	ittt	ne
 8000a82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a8a:	4770      	bxne	lr
 8000a8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_frsub>:
 8000a9c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000aa0:	e002      	b.n	8000aa8 <__addsf3>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_fsub>:
 8000aa4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000aa8 <__addsf3>:
 8000aa8:	0042      	lsls	r2, r0, #1
 8000aaa:	bf1f      	itttt	ne
 8000aac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab0:	ea92 0f03 	teqne	r2, r3
 8000ab4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abc:	d06a      	beq.n	8000b94 <__addsf3+0xec>
 8000abe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ac2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ac6:	bfc1      	itttt	gt
 8000ac8:	18d2      	addgt	r2, r2, r3
 8000aca:	4041      	eorgt	r1, r0
 8000acc:	4048      	eorgt	r0, r1
 8000ace:	4041      	eorgt	r1, r0
 8000ad0:	bfb8      	it	lt
 8000ad2:	425b      	neglt	r3, r3
 8000ad4:	2b19      	cmp	r3, #25
 8000ad6:	bf88      	it	hi
 8000ad8:	4770      	bxhi	lr
 8000ada:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000af2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4249      	negne	r1, r1
 8000afa:	ea92 0f03 	teq	r2, r3
 8000afe:	d03f      	beq.n	8000b80 <__addsf3+0xd8>
 8000b00:	f1a2 0201 	sub.w	r2, r2, #1
 8000b04:	fa41 fc03 	asr.w	ip, r1, r3
 8000b08:	eb10 000c 	adds.w	r0, r0, ip
 8000b0c:	f1c3 0320 	rsb	r3, r3, #32
 8000b10:	fa01 f103 	lsl.w	r1, r1, r3
 8000b14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b18:	d502      	bpl.n	8000b20 <__addsf3+0x78>
 8000b1a:	4249      	negs	r1, r1
 8000b1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b24:	d313      	bcc.n	8000b4e <__addsf3+0xa6>
 8000b26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b2a:	d306      	bcc.n	8000b3a <__addsf3+0x92>
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b32:	f102 0201 	add.w	r2, r2, #1
 8000b36:	2afe      	cmp	r2, #254	; 0xfe
 8000b38:	d251      	bcs.n	8000bde <__addsf3+0x136>
 8000b3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b42:	bf08      	it	eq
 8000b44:	f020 0001 	biceq.w	r0, r0, #1
 8000b48:	ea40 0003 	orr.w	r0, r0, r3
 8000b4c:	4770      	bx	lr
 8000b4e:	0049      	lsls	r1, r1, #1
 8000b50:	eb40 0000 	adc.w	r0, r0, r0
 8000b54:	3a01      	subs	r2, #1
 8000b56:	bf28      	it	cs
 8000b58:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b5c:	d2ed      	bcs.n	8000b3a <__addsf3+0x92>
 8000b5e:	fab0 fc80 	clz	ip, r0
 8000b62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b66:	ebb2 020c 	subs.w	r2, r2, ip
 8000b6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b6e:	bfaa      	itet	ge
 8000b70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b74:	4252      	neglt	r2, r2
 8000b76:	4318      	orrge	r0, r3
 8000b78:	bfbc      	itt	lt
 8000b7a:	40d0      	lsrlt	r0, r2
 8000b7c:	4318      	orrlt	r0, r3
 8000b7e:	4770      	bx	lr
 8000b80:	f092 0f00 	teq	r2, #0
 8000b84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b88:	bf06      	itte	eq
 8000b8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b8e:	3201      	addeq	r2, #1
 8000b90:	3b01      	subne	r3, #1
 8000b92:	e7b5      	b.n	8000b00 <__addsf3+0x58>
 8000b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b9c:	bf18      	it	ne
 8000b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba2:	d021      	beq.n	8000be8 <__addsf3+0x140>
 8000ba4:	ea92 0f03 	teq	r2, r3
 8000ba8:	d004      	beq.n	8000bb4 <__addsf3+0x10c>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	bf08      	it	eq
 8000bb0:	4608      	moveq	r0, r1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea90 0f01 	teq	r0, r1
 8000bb8:	bf1c      	itt	ne
 8000bba:	2000      	movne	r0, #0
 8000bbc:	4770      	bxne	lr
 8000bbe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bc2:	d104      	bne.n	8000bce <__addsf3+0x126>
 8000bc4:	0040      	lsls	r0, r0, #1
 8000bc6:	bf28      	it	cs
 8000bc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bcc:	4770      	bx	lr
 8000bce:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bd2:	bf3c      	itt	cc
 8000bd4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bd8:	4770      	bxcc	lr
 8000bda:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bde:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	4770      	bx	lr
 8000be8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bec:	bf16      	itet	ne
 8000bee:	4608      	movne	r0, r1
 8000bf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bf4:	4601      	movne	r1, r0
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	bf06      	itte	eq
 8000bfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bfe:	ea90 0f01 	teqeq	r0, r1
 8000c02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ui2f>:
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e004      	b.n	8000c18 <__aeabi_i2f+0x8>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_i2f>:
 8000c10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	bf48      	it	mi
 8000c16:	4240      	negmi	r0, r0
 8000c18:	ea5f 0c00 	movs.w	ip, r0
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c24:	4601      	mov	r1, r0
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	e01c      	b.n	8000c66 <__aeabi_l2f+0x2a>

08000c2c <__aeabi_ul2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e00a      	b.n	8000c50 <__aeabi_l2f+0x14>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_l2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__aeabi_l2f+0x14>
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	ea5f 0c01 	movs.w	ip, r1
 8000c54:	bf02      	ittt	eq
 8000c56:	4684      	moveq	ip, r0
 8000c58:	4601      	moveq	r1, r0
 8000c5a:	2000      	moveq	r0, #0
 8000c5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c60:	bf08      	it	eq
 8000c62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c6a:	fabc f28c 	clz	r2, ip
 8000c6e:	3a08      	subs	r2, #8
 8000c70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c74:	db10      	blt.n	8000c98 <__aeabi_l2f+0x5c>
 8000c76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c80:	f1c2 0220 	rsb	r2, r2, #32
 8000c84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c88:	fa20 f202 	lsr.w	r2, r0, r2
 8000c8c:	eb43 0002 	adc.w	r0, r3, r2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f102 0220 	add.w	r2, r2, #32
 8000c9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_fmul>:
 8000cb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc0:	bf1e      	ittt	ne
 8000cc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc6:	ea92 0f0c 	teqne	r2, ip
 8000cca:	ea93 0f0c 	teqne	r3, ip
 8000cce:	d06f      	beq.n	8000db0 <__aeabi_fmul+0xf8>
 8000cd0:	441a      	add	r2, r3
 8000cd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd6:	0240      	lsls	r0, r0, #9
 8000cd8:	bf18      	it	ne
 8000cda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cde:	d01e      	beq.n	8000d1e <__aeabi_fmul+0x66>
 8000ce0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ce4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cec:	fba0 3101 	umull	r3, r1, r0, r1
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cf8:	bf3e      	ittt	cc
 8000cfa:	0049      	lslcc	r1, r1, #1
 8000cfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d00:	005b      	lslcc	r3, r3, #1
 8000d02:	ea40 0001 	orr.w	r0, r0, r1
 8000d06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d0a:	2afd      	cmp	r2, #253	; 0xfd
 8000d0c:	d81d      	bhi.n	8000d4a <__aeabi_fmul+0x92>
 8000d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d16:	bf08      	it	eq
 8000d18:	f020 0001 	biceq.w	r0, r0, #1
 8000d1c:	4770      	bx	lr
 8000d1e:	f090 0f00 	teq	r0, #0
 8000d22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d26:	bf08      	it	eq
 8000d28:	0249      	lsleq	r1, r1, #9
 8000d2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d32:	3a7f      	subs	r2, #127	; 0x7f
 8000d34:	bfc2      	ittt	gt
 8000d36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3e:	4770      	bxgt	lr
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	dc5d      	bgt.n	8000e08 <__aeabi_fmul+0x150>
 8000d4c:	f112 0f19 	cmn.w	r2, #25
 8000d50:	bfdc      	itt	le
 8000d52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d56:	4770      	bxle	lr
 8000d58:	f1c2 0200 	rsb	r2, r2, #0
 8000d5c:	0041      	lsls	r1, r0, #1
 8000d5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d62:	f1c2 0220 	rsb	r2, r2, #32
 8000d66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d6e:	f140 0000 	adc.w	r0, r0, #0
 8000d72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d76:	bf08      	it	eq
 8000d78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7c:	4770      	bx	lr
 8000d7e:	f092 0f00 	teq	r2, #0
 8000d82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0040      	lsleq	r0, r0, #1
 8000d8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d8e:	3a01      	subeq	r2, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fmul+0xce>
 8000d92:	ea40 000c 	orr.w	r0, r0, ip
 8000d96:	f093 0f00 	teq	r3, #0
 8000d9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0049      	lsleq	r1, r1, #1
 8000da2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000da6:	3b01      	subeq	r3, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fmul+0xe6>
 8000daa:	ea41 010c 	orr.w	r1, r1, ip
 8000dae:	e78f      	b.n	8000cd0 <__aeabi_fmul+0x18>
 8000db0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	bf18      	it	ne
 8000dba:	ea93 0f0c 	teqne	r3, ip
 8000dbe:	d00a      	beq.n	8000dd6 <__aeabi_fmul+0x11e>
 8000dc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dc4:	bf18      	it	ne
 8000dc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	d1d8      	bne.n	8000d7e <__aeabi_fmul+0xc6>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f090 0f00 	teq	r0, #0
 8000dda:	bf17      	itett	ne
 8000ddc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000de0:	4608      	moveq	r0, r1
 8000de2:	f091 0f00 	teqne	r1, #0
 8000de6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dea:	d014      	beq.n	8000e16 <__aeabi_fmul+0x15e>
 8000dec:	ea92 0f0c 	teq	r2, ip
 8000df0:	d101      	bne.n	8000df6 <__aeabi_fmul+0x13e>
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	d10f      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000df6:	ea93 0f0c 	teq	r3, ip
 8000dfa:	d103      	bne.n	8000e04 <__aeabi_fmul+0x14c>
 8000dfc:	024b      	lsls	r3, r1, #9
 8000dfe:	bf18      	it	ne
 8000e00:	4608      	movne	r0, r1
 8000e02:	d108      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000e04:	ea80 0001 	eor.w	r0, r0, r1
 8000e08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e14:	4770      	bx	lr
 8000e16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_fdiv>:
 8000e20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e28:	bf1e      	ittt	ne
 8000e2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2e:	ea92 0f0c 	teqne	r2, ip
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d069      	beq.n	8000f0c <__aeabi_fdiv+0xec>
 8000e38:	eba2 0203 	sub.w	r2, r2, r3
 8000e3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e40:	0249      	lsls	r1, r1, #9
 8000e42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e46:	d037      	beq.n	8000eb8 <__aeabi_fdiv+0x98>
 8000e48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	bf38      	it	cc
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e66:	428b      	cmp	r3, r1
 8000e68:	bf24      	itt	cs
 8000e6a:	1a5b      	subcs	r3, r3, r1
 8000e6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e74:	bf24      	itt	cs
 8000e76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e82:	bf24      	itt	cs
 8000e84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	bf18      	it	ne
 8000e9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ea2:	d1e0      	bne.n	8000e66 <__aeabi_fdiv+0x46>
 8000ea4:	2afd      	cmp	r2, #253	; 0xfd
 8000ea6:	f63f af50 	bhi.w	8000d4a <__aeabi_fmul+0x92>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb0:	bf08      	it	eq
 8000eb2:	f020 0001 	biceq.w	r0, r0, #1
 8000eb6:	4770      	bx	lr
 8000eb8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ebc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ec0:	327f      	adds	r2, #127	; 0x7f
 8000ec2:	bfc2      	ittt	gt
 8000ec4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ec8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ecc:	4770      	bxgt	lr
 8000ece:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	3a01      	subs	r2, #1
 8000ed8:	e737      	b.n	8000d4a <__aeabi_fmul+0x92>
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fdiv+0xc2>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fdiv+0xda>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e795      	b.n	8000e38 <__aeabi_fdiv+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	d108      	bne.n	8000f28 <__aeabi_fdiv+0x108>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	f47f af7d 	bne.w	8000e16 <__aeabi_fmul+0x15e>
 8000f1c:	ea93 0f0c 	teq	r3, ip
 8000f20:	f47f af70 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e776      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	d104      	bne.n	8000f38 <__aeabi_fdiv+0x118>
 8000f2e:	024b      	lsls	r3, r1, #9
 8000f30:	f43f af4c 	beq.w	8000dcc <__aeabi_fmul+0x114>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e76e      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f3c:	bf18      	it	ne
 8000f3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	d1ca      	bne.n	8000eda <__aeabi_fdiv+0xba>
 8000f44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f48:	f47f af5c 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f50:	f47f af3c 	bne.w	8000dcc <__aeabi_fmul+0x114>
 8000f54:	e75f      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f56:	bf00      	nop

08000f58 <__aeabi_f2uiz>:
 8000f58:	0042      	lsls	r2, r0, #1
 8000f5a:	d20e      	bcs.n	8000f7a <__aeabi_f2uiz+0x22>
 8000f5c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f60:	d30b      	bcc.n	8000f7a <__aeabi_f2uiz+0x22>
 8000f62:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f66:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f6a:	d409      	bmi.n	8000f80 <__aeabi_f2uiz+0x28>
 8000f6c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f74:	fa23 f002 	lsr.w	r0, r3, r2
 8000f78:	4770      	bx	lr
 8000f7a:	f04f 0000 	mov.w	r0, #0
 8000f7e:	4770      	bx	lr
 8000f80:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f84:	d101      	bne.n	8000f8a <__aeabi_f2uiz+0x32>
 8000f86:	0242      	lsls	r2, r0, #9
 8000f88:	d102      	bne.n	8000f90 <__aeabi_f2uiz+0x38>
 8000f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8e:	4770      	bx	lr
 8000f90:	f04f 0000 	mov.w	r0, #0
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4a06      	ldr	r2, [pc, #24]	; (8000fc0 <vApplicationGetIdleTaskMemory+0x28>)
 8000fa8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	4a05      	ldr	r2, [pc, #20]	; (8000fc4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000fae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2280      	movs	r2, #128	; 0x80
 8000fb4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fb6:	bf00      	nop
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr
 8000fc0:	200000a4 	.word	0x200000a4
 8000fc4:	20000158 	.word	0x20000158

08000fc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc8:	b5b0      	push	{r4, r5, r7, lr}
 8000fca:	b09e      	sub	sp, #120	; 0x78
 8000fcc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fce:	f000 fdd3 	bl	8001b78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd2:	f000 f89b 	bl	800110c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd6:	f000 fa6f 	bl	80014b8 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000fda:	f000 f8db 	bl	8001194 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000fde:	f000 f907 	bl	80011f0 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000fe2:	f000 f93b 	bl	800125c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000fe6:	f000 f9bb 	bl	8001360 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000fea:	f000 fa3b 	bl	8001464 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  ssd1306_init();
 8000fee:	f003 fc97 	bl	8004920 <ssd1306_init>
  ssd1306_clear(GB_SSD1306_COLOR_BLACK);
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f003 fd5c 	bl	8004ab0 <ssd1306_clear>
  ssd1306_update_data();
 8000ff8:	f003 fd06 	bl	8004a08 <ssd1306_update_data>


  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);   // main channel
 8000ffc:	2104      	movs	r1, #4
 8000ffe:	4838      	ldr	r0, [pc, #224]	; (80010e0 <main+0x118>)
 8001000:	f002 fb3a 	bl	8003678 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_1);   // indirect channel
 8001004:	2100      	movs	r1, #0
 8001006:	4836      	ldr	r0, [pc, #216]	; (80010e0 <main+0x118>)
 8001008:	f002 fa76 	bl	80034f8 <HAL_TIM_IC_Start>

  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);   // main channel
 800100c:	2100      	movs	r1, #0
 800100e:	4835      	ldr	r0, [pc, #212]	; (80010e4 <main+0x11c>)
 8001010:	f002 fb32 	bl	8003678 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_2);   // indirect channel
 8001014:	2104      	movs	r1, #4
 8001016:	4833      	ldr	r0, [pc, #204]	; (80010e4 <main+0x11c>)
 8001018:	f002 fa6e 	bl	80034f8 <HAL_TIM_IC_Start>

  hlw8012_setResistors(CURRENT_RESISTOR, VOLTAGE_RESISTOR_UPSTREAM, VOLTAGE_RESISTOR_DOWNSTREAM);
 800101c:	f04f 0200 	mov.w	r2, #0
 8001020:	4b31      	ldr	r3, [pc, #196]	; (80010e8 <main+0x120>)
 8001022:	e9cd 2300 	strd	r2, r3, [sp]
 8001026:	a32a      	add	r3, pc, #168	; (adr r3, 80010d0 <main+0x108>)
 8001028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102c:	a12a      	add	r1, pc, #168	; (adr r1, 80010d8 <main+0x110>)
 800102e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001032:	f003 fc27 	bl	8004884 <hlw8012_setResistors>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001036:	4b2d      	ldr	r3, [pc, #180]	; (80010ec <main+0x124>)
 8001038:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800103c:	461d      	mov	r5, r3
 800103e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001040:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001042:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001046:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800104a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800104e:	2100      	movs	r1, #0
 8001050:	4618      	mov	r0, r3
 8001052:	f003 ff8f 	bl	8004f74 <osThreadCreate>
 8001056:	4603      	mov	r3, r0
 8001058:	4a25      	ldr	r2, [pc, #148]	; (80010f0 <main+0x128>)
 800105a:	6013      	str	r3, [r2, #0]

  /* definition and creation of HLW8012 */
  osThreadDef(HLW8012, HLW8012_func, osPriorityHigh, 0, 128);
 800105c:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <main+0x12c>)
 800105e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001062:	461d      	mov	r5, r3
 8001064:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001066:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001068:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800106c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HLW8012Handle = osThreadCreate(osThread(HLW8012), NULL);
 8001070:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f003 ff7c 	bl	8004f74 <osThreadCreate>
 800107c:	4603      	mov	r3, r0
 800107e:	4a1e      	ldr	r2, [pc, #120]	; (80010f8 <main+0x130>)
 8001080:	6013      	str	r3, [r2, #0]

  /* definition and creation of OLED */
  osThreadDef(OLED, OLED_func, osPriorityHigh, 0, 128);
 8001082:	4b1e      	ldr	r3, [pc, #120]	; (80010fc <main+0x134>)
 8001084:	f107 041c 	add.w	r4, r7, #28
 8001088:	461d      	mov	r5, r3
 800108a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800108c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800108e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001092:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  OLEDHandle = osThreadCreate(osThread(OLED), NULL);
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	2100      	movs	r1, #0
 800109c:	4618      	mov	r0, r3
 800109e:	f003 ff69 	bl	8004f74 <osThreadCreate>
 80010a2:	4603      	mov	r3, r0
 80010a4:	4a16      	ldr	r2, [pc, #88]	; (8001100 <main+0x138>)
 80010a6:	6013      	str	r3, [r2, #0]

  /* definition and creation of ESP8266 */
  osThreadDef(ESP8266, ESP8266_func, osPriorityHigh, 0, 128);
 80010a8:	4b16      	ldr	r3, [pc, #88]	; (8001104 <main+0x13c>)
 80010aa:	463c      	mov	r4, r7
 80010ac:	461d      	mov	r5, r3
 80010ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ESP8266Handle = osThreadCreate(osThread(ESP8266), NULL);
 80010ba:	463b      	mov	r3, r7
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f003 ff58 	bl	8004f74 <osThreadCreate>
 80010c4:	4603      	mov	r3, r0
 80010c6:	4a10      	ldr	r2, [pc, #64]	; (8001108 <main+0x140>)
 80010c8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80010ca:	f003 ff4c 	bl	8004f66 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010ce:	e7fe      	b.n	80010ce <main+0x106>
 80010d0:	00000000 	.word	0x00000000
 80010d4:	4141edd8 	.word	0x4141edd8
 80010d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80010dc:	3f50624d 	.word	0x3f50624d
 80010e0:	200015c0 	.word	0x200015c0
 80010e4:	2000151c 	.word	0x2000151c
 80010e8:	408f4000 	.word	0x408f4000
 80010ec:	08006d28 	.word	0x08006d28
 80010f0:	20001518 	.word	0x20001518
 80010f4:	08006d44 	.word	0x08006d44
 80010f8:	200015bc 	.word	0x200015bc
 80010fc:	08006d60 	.word	0x08006d60
 8001100:	20001564 	.word	0x20001564
 8001104:	08006d7c 	.word	0x08006d7c
 8001108:	20001608 	.word	0x20001608

0800110c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b090      	sub	sp, #64	; 0x40
 8001110:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001112:	f107 0318 	add.w	r3, r7, #24
 8001116:	2228      	movs	r2, #40	; 0x28
 8001118:	2100      	movs	r1, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f005 f94a 	bl	80063b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
 800112c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800112e:	2301      	movs	r3, #1
 8001130:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001132:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001136:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001138:	2300      	movs	r3, #0
 800113a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800113c:	2301      	movs	r3, #1
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001140:	2302      	movs	r3, #2
 8001142:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001144:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001148:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800114a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800114e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001150:	f107 0318 	add.w	r3, r7, #24
 8001154:	4618      	mov	r0, r3
 8001156:	f001 fc07 	bl	8002968 <HAL_RCC_OscConfig>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001160:	f000 fa8a 	bl	8001678 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001164:	230f      	movs	r3, #15
 8001166:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001168:	2302      	movs	r3, #2
 800116a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001170:	2300      	movs	r3, #0
 8001172:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	2101      	movs	r1, #1
 800117c:	4618      	mov	r0, r3
 800117e:	f001 fe73 	bl	8002e68 <HAL_RCC_ClockConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001188:	f000 fa76 	bl	8001678 <Error_Handler>
  }
}
 800118c:	bf00      	nop
 800118e:	3740      	adds	r7, #64	; 0x40
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <MX_I2C2_Init+0x50>)
 800119a:	4a13      	ldr	r2, [pc, #76]	; (80011e8 <MX_I2C2_Init+0x54>)
 800119c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <MX_I2C2_Init+0x50>)
 80011a0:	4a12      	ldr	r2, [pc, #72]	; (80011ec <MX_I2C2_Init+0x58>)
 80011a2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <MX_I2C2_Init+0x50>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <MX_I2C2_Init+0x50>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <MX_I2C2_Init+0x50>)
 80011b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011b6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011b8:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <MX_I2C2_Init+0x50>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <MX_I2C2_Init+0x50>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <MX_I2C2_Init+0x50>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <MX_I2C2_Init+0x50>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011d0:	4804      	ldr	r0, [pc, #16]	; (80011e4 <MX_I2C2_Init+0x50>)
 80011d2:	f000 ff7f 	bl	80020d4 <HAL_I2C_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80011dc:	f000 fa4c 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20001568 	.word	0x20001568
 80011e8:	40005800 	.word	0x40005800
 80011ec:	000186a0 	.word	0x000186a0

080011f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011f4:	4b17      	ldr	r3, [pc, #92]	; (8001254 <MX_SPI1_Init+0x64>)
 80011f6:	4a18      	ldr	r2, [pc, #96]	; (8001258 <MX_SPI1_Init+0x68>)
 80011f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011fa:	4b16      	ldr	r3, [pc, #88]	; (8001254 <MX_SPI1_Init+0x64>)
 80011fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001200:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001202:	4b14      	ldr	r3, [pc, #80]	; (8001254 <MX_SPI1_Init+0x64>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <MX_SPI1_Init+0x64>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800120e:	4b11      	ldr	r3, [pc, #68]	; (8001254 <MX_SPI1_Init+0x64>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001214:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <MX_SPI1_Init+0x64>)
 8001216:	2200      	movs	r2, #0
 8001218:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <MX_SPI1_Init+0x64>)
 800121c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001220:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <MX_SPI1_Init+0x64>)
 8001224:	2200      	movs	r2, #0
 8001226:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001228:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <MX_SPI1_Init+0x64>)
 800122a:	2200      	movs	r2, #0
 800122c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <MX_SPI1_Init+0x64>)
 8001230:	2200      	movs	r2, #0
 8001232:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001234:	4b07      	ldr	r3, [pc, #28]	; (8001254 <MX_SPI1_Init+0x64>)
 8001236:	2200      	movs	r2, #0
 8001238:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <MX_SPI1_Init+0x64>)
 800123c:	220a      	movs	r2, #10
 800123e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001240:	4804      	ldr	r0, [pc, #16]	; (8001254 <MX_SPI1_Init+0x64>)
 8001242:	f001 ffdb 	bl	80031fc <HAL_SPI_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800124c:	f000 fa14 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	2000160c 	.word	0x2000160c
 8001258:	40013000 	.word	0x40013000

0800125c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08c      	sub	sp, #48	; 0x30
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
 8001270:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001272:	f107 030c 	add.w	r3, r7, #12
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001288:	4b33      	ldr	r3, [pc, #204]	; (8001358 <MX_TIM3_Init+0xfc>)
 800128a:	4a34      	ldr	r2, [pc, #208]	; (800135c <MX_TIM3_Init+0x100>)
 800128c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 320;
 800128e:	4b32      	ldr	r3, [pc, #200]	; (8001358 <MX_TIM3_Init+0xfc>)
 8001290:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001294:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001296:	4b30      	ldr	r3, [pc, #192]	; (8001358 <MX_TIM3_Init+0xfc>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800129c:	4b2e      	ldr	r3, [pc, #184]	; (8001358 <MX_TIM3_Init+0xfc>)
 800129e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a4:	4b2c      	ldr	r3, [pc, #176]	; (8001358 <MX_TIM3_Init+0xfc>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012aa:	4b2b      	ldr	r3, [pc, #172]	; (8001358 <MX_TIM3_Init+0xfc>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80012b0:	4829      	ldr	r0, [pc, #164]	; (8001358 <MX_TIM3_Init+0xfc>)
 80012b2:	f002 f8d1 	bl	8003458 <HAL_TIM_IC_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80012bc:	f000 f9dc 	bl	8001678 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80012c0:	2304      	movs	r3, #4
 80012c2:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 80012c4:	2360      	movs	r3, #96	; 0x60
 80012c6:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80012c8:	2302      	movs	r3, #2
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80012cc:	2300      	movs	r3, #0
 80012ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80012d4:	f107 031c 	add.w	r3, r7, #28
 80012d8:	4619      	mov	r1, r3
 80012da:	481f      	ldr	r0, [pc, #124]	; (8001358 <MX_TIM3_Init+0xfc>)
 80012dc:	f002 fc6e 	bl	8003bbc <HAL_TIM_SlaveConfigSynchro>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80012e6:	f000 f9c7 	bl	8001678 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80012ee:	2302      	movs	r3, #2
 80012f0:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	2200      	movs	r2, #0
 8001300:	4619      	mov	r1, r3
 8001302:	4815      	ldr	r0, [pc, #84]	; (8001358 <MX_TIM3_Init+0xfc>)
 8001304:	f002 fbc6 	bl	8003a94 <HAL_TIM_IC_ConfigChannel>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 800130e:	f000 f9b3 	bl	8001678 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001312:	2302      	movs	r3, #2
 8001314:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001316:	2301      	movs	r3, #1
 8001318:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800131a:	f107 030c 	add.w	r3, r7, #12
 800131e:	2204      	movs	r2, #4
 8001320:	4619      	mov	r1, r3
 8001322:	480d      	ldr	r0, [pc, #52]	; (8001358 <MX_TIM3_Init+0xfc>)
 8001324:	f002 fbb6 	bl	8003a94 <HAL_TIM_IC_ConfigChannel>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800132e:	f000 f9a3 	bl	8001678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	4619      	mov	r1, r3
 800133e:	4806      	ldr	r0, [pc, #24]	; (8001358 <MX_TIM3_Init+0xfc>)
 8001340:	f002 ff84 	bl	800424c <HAL_TIMEx_MasterConfigSynchronization>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 800134a:	f000 f995 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	3730      	adds	r7, #48	; 0x30
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200015c0 	.word	0x200015c0
 800135c:	40000400 	.word	0x40000400

08001360 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08c      	sub	sp, #48	; 0x30
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001366:	f107 031c 	add.w	r3, r7, #28
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001376:	f107 030c 	add.w	r3, r7, #12
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800138c:	4b33      	ldr	r3, [pc, #204]	; (800145c <MX_TIM4_Init+0xfc>)
 800138e:	4a34      	ldr	r2, [pc, #208]	; (8001460 <MX_TIM4_Init+0x100>)
 8001390:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 320;
 8001392:	4b32      	ldr	r3, [pc, #200]	; (800145c <MX_TIM4_Init+0xfc>)
 8001394:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001398:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139a:	4b30      	ldr	r3, [pc, #192]	; (800145c <MX_TIM4_Init+0xfc>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80013a0:	4b2e      	ldr	r3, [pc, #184]	; (800145c <MX_TIM4_Init+0xfc>)
 80013a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013a6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a8:	4b2c      	ldr	r3, [pc, #176]	; (800145c <MX_TIM4_Init+0xfc>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ae:	4b2b      	ldr	r3, [pc, #172]	; (800145c <MX_TIM4_Init+0xfc>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80013b4:	4829      	ldr	r0, [pc, #164]	; (800145c <MX_TIM4_Init+0xfc>)
 80013b6:	f002 f84f 	bl	8003458 <HAL_TIM_IC_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80013c0:	f000 f95a 	bl	8001678 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80013c4:	2304      	movs	r3, #4
 80013c6:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80013c8:	2350      	movs	r3, #80	; 0x50
 80013ca:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013cc:	2300      	movs	r3, #0
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80013d0:	2300      	movs	r3, #0
 80013d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80013d8:	f107 031c 	add.w	r3, r7, #28
 80013dc:	4619      	mov	r1, r3
 80013de:	481f      	ldr	r0, [pc, #124]	; (800145c <MX_TIM4_Init+0xfc>)
 80013e0:	f002 fbec 	bl	8003bbc <HAL_TIM_SlaveConfigSynchro>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80013ea:	f000 f945 	bl	8001678 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013f2:	2301      	movs	r3, #1
 80013f4:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013fe:	f107 030c 	add.w	r3, r7, #12
 8001402:	2200      	movs	r2, #0
 8001404:	4619      	mov	r1, r3
 8001406:	4815      	ldr	r0, [pc, #84]	; (800145c <MX_TIM4_Init+0xfc>)
 8001408:	f002 fb44 	bl	8003a94 <HAL_TIM_IC_ConfigChannel>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8001412:	f000 f931 	bl	8001678 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001416:	2302      	movs	r3, #2
 8001418:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800141a:	2302      	movs	r3, #2
 800141c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800141e:	f107 030c 	add.w	r3, r7, #12
 8001422:	2204      	movs	r2, #4
 8001424:	4619      	mov	r1, r3
 8001426:	480d      	ldr	r0, [pc, #52]	; (800145c <MX_TIM4_Init+0xfc>)
 8001428:	f002 fb34 	bl	8003a94 <HAL_TIM_IC_ConfigChannel>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001432:	f000 f921 	bl	8001678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001436:	2300      	movs	r3, #0
 8001438:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	4619      	mov	r1, r3
 8001442:	4806      	ldr	r0, [pc, #24]	; (800145c <MX_TIM4_Init+0xfc>)
 8001444:	f002 ff02 	bl	800424c <HAL_TIMEx_MasterConfigSynchronization>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM4_Init+0xf2>
  {
    Error_Handler();
 800144e:	f000 f913 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001452:	bf00      	nop
 8001454:	3730      	adds	r7, #48	; 0x30
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	2000151c 	.word	0x2000151c
 8001460:	40000800 	.word	0x40000800

08001464 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <MX_USART2_UART_Init+0x4c>)
 800146a:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <MX_USART2_UART_Init+0x50>)
 800146c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <MX_USART2_UART_Init+0x4c>)
 8001470:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001474:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <MX_USART2_UART_Init+0x4c>)
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <MX_USART2_UART_Init+0x4c>)
 800147e:	2200      	movs	r2, #0
 8001480:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <MX_USART2_UART_Init+0x4c>)
 8001484:	2200      	movs	r2, #0
 8001486:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001488:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <MX_USART2_UART_Init+0x4c>)
 800148a:	220c      	movs	r2, #12
 800148c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800148e:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <MX_USART2_UART_Init+0x4c>)
 8001490:	2200      	movs	r2, #0
 8001492:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <MX_USART2_UART_Init+0x4c>)
 8001496:	2200      	movs	r2, #0
 8001498:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800149a:	4805      	ldr	r0, [pc, #20]	; (80014b0 <MX_USART2_UART_Init+0x4c>)
 800149c:	f002 ff46 	bl	800432c <HAL_UART_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014a6:	f000 f8e7 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20001664 	.word	0x20001664
 80014b4:	40004400 	.word	0x40004400

080014b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014be:	f107 0310 	add.w	r3, r7, #16
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014cc:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <MX_GPIO_Init+0x8c>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	4a1c      	ldr	r2, [pc, #112]	; (8001544 <MX_GPIO_Init+0x8c>)
 80014d2:	f043 0320 	orr.w	r3, r3, #32
 80014d6:	6193      	str	r3, [r2, #24]
 80014d8:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <MX_GPIO_Init+0x8c>)
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	f003 0320 	and.w	r3, r3, #32
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e4:	4b17      	ldr	r3, [pc, #92]	; (8001544 <MX_GPIO_Init+0x8c>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	4a16      	ldr	r2, [pc, #88]	; (8001544 <MX_GPIO_Init+0x8c>)
 80014ea:	f043 0304 	orr.w	r3, r3, #4
 80014ee:	6193      	str	r3, [r2, #24]
 80014f0:	4b14      	ldr	r3, [pc, #80]	; (8001544 <MX_GPIO_Init+0x8c>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <MX_GPIO_Init+0x8c>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	4a10      	ldr	r2, [pc, #64]	; (8001544 <MX_GPIO_Init+0x8c>)
 8001502:	f043 0308 	orr.w	r3, r3, #8
 8001506:	6193      	str	r3, [r2, #24]
 8001508:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <MX_GPIO_Init+0x8c>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	f003 0308 	and.w	r3, r3, #8
 8001510:	607b      	str	r3, [r7, #4]
 8001512:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001514:	2200      	movs	r2, #0
 8001516:	2110      	movs	r1, #16
 8001518:	480b      	ldr	r0, [pc, #44]	; (8001548 <MX_GPIO_Init+0x90>)
 800151a:	f000 fdc3 	bl	80020a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800151e:	2310      	movs	r3, #16
 8001520:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001522:	2301      	movs	r3, #1
 8001524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152a:	2302      	movs	r3, #2
 800152c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152e:	f107 0310 	add.w	r3, r7, #16
 8001532:	4619      	mov	r1, r3
 8001534:	4804      	ldr	r0, [pc, #16]	; (8001548 <MX_GPIO_Init+0x90>)
 8001536:	f000 fc31 	bl	8001d9c <HAL_GPIO_Init>

}
 800153a:	bf00      	nop
 800153c:	3720      	adds	r7, #32
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40021000 	.word	0x40021000
 8001548:	40010800 	.word	0x40010800

0800154c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001554:	2001      	movs	r0, #1
 8001556:	f003 fd59 	bl	800500c <osDelay>
 800155a:	e7fb      	b.n	8001554 <StartDefaultTask+0x8>

0800155c <HLW8012_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HLW8012_func */
void HLW8012_func(void const * argument)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HLW8012_func */
  /* Infinite loop */
  for(;;)
  {
	  current = hlw8012_getcurrent();
 8001564:	f002 ffda 	bl	800451c <hlw8012_getcurrent>
 8001568:	4603      	mov	r3, r0
 800156a:	4a08      	ldr	r2, [pc, #32]	; (800158c <HLW8012_func+0x30>)
 800156c:	6013      	str	r3, [r2, #0]
	  voltage = hlw8012_getvoltage();
 800156e:	f003 f839 	bl	80045e4 <hlw8012_getvoltage>
 8001572:	4603      	mov	r3, r0
 8001574:	4a06      	ldr	r2, [pc, #24]	; (8001590 <HLW8012_func+0x34>)
 8001576:	6013      	str	r3, [r2, #0]
	  power  = hlw8012_getactivepower();
 8001578:	f003 f898 	bl	80046ac <hlw8012_getactivepower>
 800157c:	4603      	mov	r3, r0
 800157e:	4a05      	ldr	r2, [pc, #20]	; (8001594 <HLW8012_func+0x38>)
 8001580:	6013      	str	r3, [r2, #0]

    osDelay(1);
 8001582:	2001      	movs	r0, #1
 8001584:	f003 fd42 	bl	800500c <osDelay>
	  current = hlw8012_getcurrent();
 8001588:	e7ec      	b.n	8001564 <HLW8012_func+0x8>
 800158a:	bf00      	nop
 800158c:	20000358 	.word	0x20000358
 8001590:	2000035c 	.word	0x2000035c
 8001594:	20000360 	.word	0x20000360

08001598 <OLED_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OLED_func */
void OLED_func(void const * argument)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OLED_func */
  /* Infinite loop */
  for(;;)
  {
	  ssd1306_GotoXY(0, 0);
 80015a0:	2100      	movs	r1, #0
 80015a2:	2000      	movs	r0, #0
 80015a4:	f003 fa6e 	bl	8004a84 <ssd1306_GotoXY>
    ssd1306_print_string("Current:", GB_SSD1306_COLOR_WHITE);
 80015a8:	2101      	movs	r1, #1
 80015aa:	481d      	ldr	r0, [pc, #116]	; (8001620 <OLED_func+0x88>)
 80015ac:	f003 fae8 	bl	8004b80 <ssd1306_print_string>
    ssd1306_float(current,GB_SSD1306_COLOR_WHITE);
 80015b0:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <OLED_func+0x8c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2101      	movs	r1, #1
 80015b6:	4618      	mov	r0, r3
 80015b8:	f003 fafc 	bl	8004bb4 <ssd1306_float>
    ssd1306_print_string(" A", GB_SSD1306_COLOR_WHITE);
 80015bc:	2101      	movs	r1, #1
 80015be:	481a      	ldr	r0, [pc, #104]	; (8001628 <OLED_func+0x90>)
 80015c0:	f003 fade 	bl	8004b80 <ssd1306_print_string>
    ssd1306_update_data();
 80015c4:	f003 fa20 	bl	8004a08 <ssd1306_update_data>

	ssd1306_GotoXY(0, 15);
 80015c8:	210f      	movs	r1, #15
 80015ca:	2000      	movs	r0, #0
 80015cc:	f003 fa5a 	bl	8004a84 <ssd1306_GotoXY>
    ssd1306_print_string("Voltage:", GB_SSD1306_COLOR_WHITE);
 80015d0:	2101      	movs	r1, #1
 80015d2:	4816      	ldr	r0, [pc, #88]	; (800162c <OLED_func+0x94>)
 80015d4:	f003 fad4 	bl	8004b80 <ssd1306_print_string>
    ssd1306_float(voltage,GB_SSD1306_COLOR_WHITE);
 80015d8:	4b15      	ldr	r3, [pc, #84]	; (8001630 <OLED_func+0x98>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2101      	movs	r1, #1
 80015de:	4618      	mov	r0, r3
 80015e0:	f003 fae8 	bl	8004bb4 <ssd1306_float>
    ssd1306_print_string(" V", GB_SSD1306_COLOR_WHITE);
 80015e4:	2101      	movs	r1, #1
 80015e6:	4813      	ldr	r0, [pc, #76]	; (8001634 <OLED_func+0x9c>)
 80015e8:	f003 faca 	bl	8004b80 <ssd1306_print_string>
	ssd1306_update_data();
 80015ec:	f003 fa0c 	bl	8004a08 <ssd1306_update_data>

	ssd1306_GotoXY(0, 24);
 80015f0:	2118      	movs	r1, #24
 80015f2:	2000      	movs	r0, #0
 80015f4:	f003 fa46 	bl	8004a84 <ssd1306_GotoXY>
	ssd1306_print_string("Power:", GB_SSD1306_COLOR_WHITE);
 80015f8:	2101      	movs	r1, #1
 80015fa:	480f      	ldr	r0, [pc, #60]	; (8001638 <OLED_func+0xa0>)
 80015fc:	f003 fac0 	bl	8004b80 <ssd1306_print_string>
	ssd1306_float(power,GB_SSD1306_COLOR_WHITE);
 8001600:	4b0e      	ldr	r3, [pc, #56]	; (800163c <OLED_func+0xa4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2101      	movs	r1, #1
 8001606:	4618      	mov	r0, r3
 8001608:	f003 fad4 	bl	8004bb4 <ssd1306_float>
	ssd1306_print_string(" W", GB_SSD1306_COLOR_WHITE);
 800160c:	2101      	movs	r1, #1
 800160e:	480c      	ldr	r0, [pc, #48]	; (8001640 <OLED_func+0xa8>)
 8001610:	f003 fab6 	bl	8004b80 <ssd1306_print_string>
	ssd1306_update_data();
 8001614:	f003 f9f8 	bl	8004a08 <ssd1306_update_data>
    osDelay(1);
 8001618:	2001      	movs	r0, #1
 800161a:	f003 fcf7 	bl	800500c <osDelay>
	  ssd1306_GotoXY(0, 0);
 800161e:	e7bf      	b.n	80015a0 <OLED_func+0x8>
 8001620:	08006d98 	.word	0x08006d98
 8001624:	20000358 	.word	0x20000358
 8001628:	08006da4 	.word	0x08006da4
 800162c:	08006da8 	.word	0x08006da8
 8001630:	2000035c 	.word	0x2000035c
 8001634:	08006db4 	.word	0x08006db4
 8001638:	08006db8 	.word	0x08006db8
 800163c:	20000360 	.word	0x20000360
 8001640:	08006dc0 	.word	0x08006dc0

08001644 <ESP8266_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ESP8266_func */
void ESP8266_func(void const * argument)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ESP8266_func */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800164c:	2001      	movs	r0, #1
 800164e:	f003 fcdd 	bl	800500c <osDelay>
 8001652:	e7fb      	b.n	800164c <ESP8266_func+0x8>

08001654 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a04      	ldr	r2, [pc, #16]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d101      	bne.n	800166a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001666:	f000 fa9d 	bl	8001ba4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40012c00 	.word	0x40012c00

08001678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800167c:	b672      	cpsid	i
}
 800167e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001680:	e7fe      	b.n	8001680 <Error_Handler+0x8>
	...

08001684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800168a:	4b18      	ldr	r3, [pc, #96]	; (80016ec <HAL_MspInit+0x68>)
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	4a17      	ldr	r2, [pc, #92]	; (80016ec <HAL_MspInit+0x68>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6193      	str	r3, [r2, #24]
 8001696:	4b15      	ldr	r3, [pc, #84]	; (80016ec <HAL_MspInit+0x68>)
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a2:	4b12      	ldr	r3, [pc, #72]	; (80016ec <HAL_MspInit+0x68>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	4a11      	ldr	r2, [pc, #68]	; (80016ec <HAL_MspInit+0x68>)
 80016a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ac:	61d3      	str	r3, [r2, #28]
 80016ae:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <HAL_MspInit+0x68>)
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	210f      	movs	r1, #15
 80016be:	f06f 0001 	mvn.w	r0, #1
 80016c2:	f000 fb40 	bl	8001d46 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016c6:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <HAL_MspInit+0x6c>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <HAL_MspInit+0x6c>)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40010000 	.word	0x40010000

080016f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b088      	sub	sp, #32
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	f107 0310 	add.w	r3, r7, #16
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a16      	ldr	r2, [pc, #88]	; (8001768 <HAL_I2C_MspInit+0x74>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d124      	bne.n	800175e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001714:	4b15      	ldr	r3, [pc, #84]	; (800176c <HAL_I2C_MspInit+0x78>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	4a14      	ldr	r2, [pc, #80]	; (800176c <HAL_I2C_MspInit+0x78>)
 800171a:	f043 0308 	orr.w	r3, r3, #8
 800171e:	6193      	str	r3, [r2, #24]
 8001720:	4b12      	ldr	r3, [pc, #72]	; (800176c <HAL_I2C_MspInit+0x78>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	f003 0308 	and.w	r3, r3, #8
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800172c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001730:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001732:	2312      	movs	r3, #18
 8001734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001736:	2303      	movs	r3, #3
 8001738:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173a:	f107 0310 	add.w	r3, r7, #16
 800173e:	4619      	mov	r1, r3
 8001740:	480b      	ldr	r0, [pc, #44]	; (8001770 <HAL_I2C_MspInit+0x7c>)
 8001742:	f000 fb2b 	bl	8001d9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <HAL_I2C_MspInit+0x78>)
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	4a08      	ldr	r2, [pc, #32]	; (800176c <HAL_I2C_MspInit+0x78>)
 800174c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001750:	61d3      	str	r3, [r2, #28]
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_I2C_MspInit+0x78>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800175e:	bf00      	nop
 8001760:	3720      	adds	r7, #32
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40005800 	.word	0x40005800
 800176c:	40021000 	.word	0x40021000
 8001770:	40010c00 	.word	0x40010c00

08001774 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177c:	f107 0310 	add.w	r3, r7, #16
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a1b      	ldr	r2, [pc, #108]	; (80017fc <HAL_SPI_MspInit+0x88>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d12f      	bne.n	80017f4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001794:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <HAL_SPI_MspInit+0x8c>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	4a19      	ldr	r2, [pc, #100]	; (8001800 <HAL_SPI_MspInit+0x8c>)
 800179a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800179e:	6193      	str	r3, [r2, #24]
 80017a0:	4b17      	ldr	r3, [pc, #92]	; (8001800 <HAL_SPI_MspInit+0x8c>)
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ac:	4b14      	ldr	r3, [pc, #80]	; (8001800 <HAL_SPI_MspInit+0x8c>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	4a13      	ldr	r2, [pc, #76]	; (8001800 <HAL_SPI_MspInit+0x8c>)
 80017b2:	f043 0304 	orr.w	r3, r3, #4
 80017b6:	6193      	str	r3, [r2, #24]
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <HAL_SPI_MspInit+0x8c>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80017c4:	23a0      	movs	r3, #160	; 0xa0
 80017c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	2302      	movs	r3, #2
 80017ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017cc:	2303      	movs	r3, #3
 80017ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d0:	f107 0310 	add.w	r3, r7, #16
 80017d4:	4619      	mov	r1, r3
 80017d6:	480b      	ldr	r0, [pc, #44]	; (8001804 <HAL_SPI_MspInit+0x90>)
 80017d8:	f000 fae0 	bl	8001d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017dc:	2340      	movs	r3, #64	; 0x40
 80017de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e8:	f107 0310 	add.w	r3, r7, #16
 80017ec:	4619      	mov	r1, r3
 80017ee:	4805      	ldr	r0, [pc, #20]	; (8001804 <HAL_SPI_MspInit+0x90>)
 80017f0:	f000 fad4 	bl	8001d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017f4:	bf00      	nop
 80017f6:	3720      	adds	r7, #32
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40013000 	.word	0x40013000
 8001800:	40021000 	.word	0x40021000
 8001804:	40010800 	.word	0x40010800

08001808 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08c      	sub	sp, #48	; 0x30
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001810:	f107 031c 	add.w	r3, r7, #28
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a3b      	ldr	r2, [pc, #236]	; (8001910 <HAL_TIM_IC_MspInit+0x108>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d13e      	bne.n	80018a6 <HAL_TIM_IC_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001828:	4b3a      	ldr	r3, [pc, #232]	; (8001914 <HAL_TIM_IC_MspInit+0x10c>)
 800182a:	69db      	ldr	r3, [r3, #28]
 800182c:	4a39      	ldr	r2, [pc, #228]	; (8001914 <HAL_TIM_IC_MspInit+0x10c>)
 800182e:	f043 0302 	orr.w	r3, r3, #2
 8001832:	61d3      	str	r3, [r2, #28]
 8001834:	4b37      	ldr	r3, [pc, #220]	; (8001914 <HAL_TIM_IC_MspInit+0x10c>)
 8001836:	69db      	ldr	r3, [r3, #28]
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	61bb      	str	r3, [r7, #24]
 800183e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001840:	4b34      	ldr	r3, [pc, #208]	; (8001914 <HAL_TIM_IC_MspInit+0x10c>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	4a33      	ldr	r2, [pc, #204]	; (8001914 <HAL_TIM_IC_MspInit+0x10c>)
 8001846:	f043 0308 	orr.w	r3, r3, #8
 800184a:	6193      	str	r3, [r2, #24]
 800184c:	4b31      	ldr	r3, [pc, #196]	; (8001914 <HAL_TIM_IC_MspInit+0x10c>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	f003 0308 	and.w	r3, r3, #8
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001858:	2320      	movs	r3, #32
 800185a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800185c:	2300      	movs	r3, #0
 800185e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001864:	f107 031c 	add.w	r3, r7, #28
 8001868:	4619      	mov	r1, r3
 800186a:	482b      	ldr	r0, [pc, #172]	; (8001918 <HAL_TIM_IC_MspInit+0x110>)
 800186c:	f000 fa96 	bl	8001d9c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001870:	4b2a      	ldr	r3, [pc, #168]	; (800191c <HAL_TIM_IC_MspInit+0x114>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001878:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800187c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800187e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001880:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001884:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001888:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800188c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800188e:	4a23      	ldr	r2, [pc, #140]	; (800191c <HAL_TIM_IC_MspInit+0x114>)
 8001890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001892:	6053      	str	r3, [r2, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001894:	2200      	movs	r2, #0
 8001896:	2105      	movs	r1, #5
 8001898:	201d      	movs	r0, #29
 800189a:	f000 fa54 	bl	8001d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800189e:	201d      	movs	r0, #29
 80018a0:	f000 fa6d 	bl	8001d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80018a4:	e030      	b.n	8001908 <HAL_TIM_IC_MspInit+0x100>
  else if(htim_ic->Instance==TIM4)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a1d      	ldr	r2, [pc, #116]	; (8001920 <HAL_TIM_IC_MspInit+0x118>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d12b      	bne.n	8001908 <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018b0:	4b18      	ldr	r3, [pc, #96]	; (8001914 <HAL_TIM_IC_MspInit+0x10c>)
 80018b2:	69db      	ldr	r3, [r3, #28]
 80018b4:	4a17      	ldr	r2, [pc, #92]	; (8001914 <HAL_TIM_IC_MspInit+0x10c>)
 80018b6:	f043 0304 	orr.w	r3, r3, #4
 80018ba:	61d3      	str	r3, [r2, #28]
 80018bc:	4b15      	ldr	r3, [pc, #84]	; (8001914 <HAL_TIM_IC_MspInit+0x10c>)
 80018be:	69db      	ldr	r3, [r3, #28]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c8:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_TIM_IC_MspInit+0x10c>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	4a11      	ldr	r2, [pc, #68]	; (8001914 <HAL_TIM_IC_MspInit+0x10c>)
 80018ce:	f043 0308 	orr.w	r3, r3, #8
 80018d2:	6193      	str	r3, [r2, #24]
 80018d4:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <HAL_TIM_IC_MspInit+0x10c>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	f003 0308 	and.w	r3, r3, #8
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018e0:	2340      	movs	r3, #64	; 0x40
 80018e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e4:	2300      	movs	r3, #0
 80018e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ec:	f107 031c 	add.w	r3, r7, #28
 80018f0:	4619      	mov	r1, r3
 80018f2:	4809      	ldr	r0, [pc, #36]	; (8001918 <HAL_TIM_IC_MspInit+0x110>)
 80018f4:	f000 fa52 	bl	8001d9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80018f8:	2200      	movs	r2, #0
 80018fa:	2105      	movs	r1, #5
 80018fc:	201e      	movs	r0, #30
 80018fe:	f000 fa22 	bl	8001d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001902:	201e      	movs	r0, #30
 8001904:	f000 fa3b 	bl	8001d7e <HAL_NVIC_EnableIRQ>
}
 8001908:	bf00      	nop
 800190a:	3730      	adds	r7, #48	; 0x30
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40000400 	.word	0x40000400
 8001914:	40021000 	.word	0x40021000
 8001918:	40010c00 	.word	0x40010c00
 800191c:	40010000 	.word	0x40010000
 8001920:	40000800 	.word	0x40000800

08001924 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 0310 	add.w	r3, r7, #16
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a1f      	ldr	r2, [pc, #124]	; (80019bc <HAL_UART_MspInit+0x98>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d137      	bne.n	80019b4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001944:	4b1e      	ldr	r3, [pc, #120]	; (80019c0 <HAL_UART_MspInit+0x9c>)
 8001946:	69db      	ldr	r3, [r3, #28]
 8001948:	4a1d      	ldr	r2, [pc, #116]	; (80019c0 <HAL_UART_MspInit+0x9c>)
 800194a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800194e:	61d3      	str	r3, [r2, #28]
 8001950:	4b1b      	ldr	r3, [pc, #108]	; (80019c0 <HAL_UART_MspInit+0x9c>)
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195c:	4b18      	ldr	r3, [pc, #96]	; (80019c0 <HAL_UART_MspInit+0x9c>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	4a17      	ldr	r2, [pc, #92]	; (80019c0 <HAL_UART_MspInit+0x9c>)
 8001962:	f043 0304 	orr.w	r3, r3, #4
 8001966:	6193      	str	r3, [r2, #24]
 8001968:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <HAL_UART_MspInit+0x9c>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001974:	2304      	movs	r3, #4
 8001976:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001978:	2302      	movs	r3, #2
 800197a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800197c:	2303      	movs	r3, #3
 800197e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001980:	f107 0310 	add.w	r3, r7, #16
 8001984:	4619      	mov	r1, r3
 8001986:	480f      	ldr	r0, [pc, #60]	; (80019c4 <HAL_UART_MspInit+0xa0>)
 8001988:	f000 fa08 	bl	8001d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800198c:	2308      	movs	r3, #8
 800198e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001998:	f107 0310 	add.w	r3, r7, #16
 800199c:	4619      	mov	r1, r3
 800199e:	4809      	ldr	r0, [pc, #36]	; (80019c4 <HAL_UART_MspInit+0xa0>)
 80019a0:	f000 f9fc 	bl	8001d9c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80019a4:	2200      	movs	r2, #0
 80019a6:	2105      	movs	r1, #5
 80019a8:	2026      	movs	r0, #38	; 0x26
 80019aa:	f000 f9cc 	bl	8001d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019ae:	2026      	movs	r0, #38	; 0x26
 80019b0:	f000 f9e5 	bl	8001d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019b4:	bf00      	nop
 80019b6:	3720      	adds	r7, #32
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40004400 	.word	0x40004400
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40010800 	.word	0x40010800

080019c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08c      	sub	sp, #48	; 0x30
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80019d8:	2200      	movs	r2, #0
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	2019      	movs	r0, #25
 80019de:	f000 f9b2 	bl	8001d46 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80019e2:	2019      	movs	r0, #25
 80019e4:	f000 f9cb 	bl	8001d7e <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80019e8:	4b1e      	ldr	r3, [pc, #120]	; (8001a64 <HAL_InitTick+0x9c>)
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	4a1d      	ldr	r2, [pc, #116]	; (8001a64 <HAL_InitTick+0x9c>)
 80019ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019f2:	6193      	str	r3, [r2, #24]
 80019f4:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <HAL_InitTick+0x9c>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a00:	f107 0210 	add.w	r2, r7, #16
 8001a04:	f107 0314 	add.w	r3, r7, #20
 8001a08:	4611      	mov	r1, r2
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f001 fba8 	bl	8003160 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001a10:	f001 fb92 	bl	8003138 <HAL_RCC_GetPCLK2Freq>
 8001a14:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a18:	4a13      	ldr	r2, [pc, #76]	; (8001a68 <HAL_InitTick+0xa0>)
 8001a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1e:	0c9b      	lsrs	r3, r3, #18
 8001a20:	3b01      	subs	r3, #1
 8001a22:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001a24:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <HAL_InitTick+0xa4>)
 8001a26:	4a12      	ldr	r2, [pc, #72]	; (8001a70 <HAL_InitTick+0xa8>)
 8001a28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001a2a:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <HAL_InitTick+0xa4>)
 8001a2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a30:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001a32:	4a0e      	ldr	r2, [pc, #56]	; (8001a6c <HAL_InitTick+0xa4>)
 8001a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a36:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001a38:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <HAL_InitTick+0xa4>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a3e:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <HAL_InitTick+0xa4>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001a44:	4809      	ldr	r0, [pc, #36]	; (8001a6c <HAL_InitTick+0xa4>)
 8001a46:	f001 fc5d 	bl	8003304 <HAL_TIM_Base_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d104      	bne.n	8001a5a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001a50:	4806      	ldr	r0, [pc, #24]	; (8001a6c <HAL_InitTick+0xa4>)
 8001a52:	f001 fcaf 	bl	80033b4 <HAL_TIM_Base_Start_IT>
 8001a56:	4603      	mov	r3, r0
 8001a58:	e000      	b.n	8001a5c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3730      	adds	r7, #48	; 0x30
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40021000 	.word	0x40021000
 8001a68:	431bde83 	.word	0x431bde83
 8001a6c:	200016a8 	.word	0x200016a8
 8001a70:	40012c00 	.word	0x40012c00

08001a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a78:	e7fe      	b.n	8001a78 <NMI_Handler+0x4>

08001a7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a7e:	e7fe      	b.n	8001a7e <HardFault_Handler+0x4>

08001a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a84:	e7fe      	b.n	8001a84 <MemManage_Handler+0x4>

08001a86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a8a:	e7fe      	b.n	8001a8a <BusFault_Handler+0x4>

08001a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a90:	e7fe      	b.n	8001a90 <UsageFault_Handler+0x4>

08001a92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr
	...

08001aa0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001aa4:	4802      	ldr	r0, [pc, #8]	; (8001ab0 <TIM1_UP_IRQHandler+0x10>)
 8001aa6:	f001 feed 	bl	8003884 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	200016a8 	.word	0x200016a8

08001ab4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001abc:	4a14      	ldr	r2, [pc, #80]	; (8001b10 <_sbrk+0x5c>)
 8001abe:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <_sbrk+0x60>)
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ac8:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <_sbrk+0x64>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d102      	bne.n	8001ad6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ad0:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <_sbrk+0x64>)
 8001ad2:	4a12      	ldr	r2, [pc, #72]	; (8001b1c <_sbrk+0x68>)
 8001ad4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ad6:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <_sbrk+0x64>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d207      	bcs.n	8001af4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ae4:	f004 fc2c 	bl	8006340 <__errno>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	220c      	movs	r2, #12
 8001aec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aee:	f04f 33ff 	mov.w	r3, #4294967295
 8001af2:	e009      	b.n	8001b08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001af4:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <_sbrk+0x64>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001afa:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <_sbrk+0x64>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	4a05      	ldr	r2, [pc, #20]	; (8001b18 <_sbrk+0x64>)
 8001b04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b06:	68fb      	ldr	r3, [r7, #12]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3718      	adds	r7, #24
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	20005000 	.word	0x20005000
 8001b14:	00000400 	.word	0x00000400
 8001b18:	20000364 	.word	0x20000364
 8001b1c:	20001720 	.word	0x20001720

08001b20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr

08001b2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b2c:	480c      	ldr	r0, [pc, #48]	; (8001b60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b2e:	490d      	ldr	r1, [pc, #52]	; (8001b64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b30:	4a0d      	ldr	r2, [pc, #52]	; (8001b68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b34:	e002      	b.n	8001b3c <LoopCopyDataInit>

08001b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b3a:	3304      	adds	r3, #4

08001b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b40:	d3f9      	bcc.n	8001b36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b42:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b44:	4c0a      	ldr	r4, [pc, #40]	; (8001b70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b48:	e001      	b.n	8001b4e <LoopFillZerobss>

08001b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b4c:	3204      	adds	r2, #4

08001b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b50:	d3fb      	bcc.n	8001b4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b52:	f7ff ffe5 	bl	8001b20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b56:	f004 fbf9 	bl	800634c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b5a:	f7ff fa35 	bl	8000fc8 <main>
  bx lr
 8001b5e:	4770      	bx	lr
  ldr r0, =_sdata
 8001b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b64:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001b68:	08007074 	.word	0x08007074
  ldr r2, =_sbss
 8001b6c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001b70:	20001720 	.word	0x20001720

08001b74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b74:	e7fe      	b.n	8001b74 <ADC1_2_IRQHandler>
	...

08001b78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b7c:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <HAL_Init+0x28>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a07      	ldr	r2, [pc, #28]	; (8001ba0 <HAL_Init+0x28>)
 8001b82:	f043 0310 	orr.w	r3, r3, #16
 8001b86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b88:	2003      	movs	r0, #3
 8001b8a:	f000 f8d1 	bl	8001d30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b8e:	200f      	movs	r0, #15
 8001b90:	f7ff ff1a 	bl	80019c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b94:	f7ff fd76 	bl	8001684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40022000 	.word	0x40022000

08001ba4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba8:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <HAL_IncTick+0x1c>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	461a      	mov	r2, r3
 8001bae:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <HAL_IncTick+0x20>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	4a03      	ldr	r2, [pc, #12]	; (8001bc4 <HAL_IncTick+0x20>)
 8001bb6:	6013      	str	r3, [r2, #0]
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr
 8001bc0:	20000008 	.word	0x20000008
 8001bc4:	200016f0 	.word	0x200016f0

08001bc8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  return uwTick;
 8001bcc:	4b02      	ldr	r3, [pc, #8]	; (8001bd8 <HAL_GetTick+0x10>)
 8001bce:	681b      	ldr	r3, [r3, #0]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr
 8001bd8:	200016f0 	.word	0x200016f0

08001bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bec:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <__NVIC_SetPriorityGrouping+0x44>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c0e:	4a04      	ldr	r2, [pc, #16]	; (8001c20 <__NVIC_SetPriorityGrouping+0x44>)
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	60d3      	str	r3, [r2, #12]
}
 8001c14:	bf00      	nop
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c28:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <__NVIC_GetPriorityGrouping+0x18>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	0a1b      	lsrs	r3, r3, #8
 8001c2e:	f003 0307 	and.w	r3, r3, #7
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	db0b      	blt.n	8001c6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	f003 021f 	and.w	r2, r3, #31
 8001c58:	4906      	ldr	r1, [pc, #24]	; (8001c74 <__NVIC_EnableIRQ+0x34>)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	095b      	lsrs	r3, r3, #5
 8001c60:	2001      	movs	r0, #1
 8001c62:	fa00 f202 	lsl.w	r2, r0, r2
 8001c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr
 8001c74:	e000e100 	.word	0xe000e100

08001c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	6039      	str	r1, [r7, #0]
 8001c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	db0a      	blt.n	8001ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	490c      	ldr	r1, [pc, #48]	; (8001cc4 <__NVIC_SetPriority+0x4c>)
 8001c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c96:	0112      	lsls	r2, r2, #4
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	440b      	add	r3, r1
 8001c9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ca0:	e00a      	b.n	8001cb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	4908      	ldr	r1, [pc, #32]	; (8001cc8 <__NVIC_SetPriority+0x50>)
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	3b04      	subs	r3, #4
 8001cb0:	0112      	lsls	r2, r2, #4
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	761a      	strb	r2, [r3, #24]
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000e100 	.word	0xe000e100
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b089      	sub	sp, #36	; 0x24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	f1c3 0307 	rsb	r3, r3, #7
 8001ce6:	2b04      	cmp	r3, #4
 8001ce8:	bf28      	it	cs
 8001cea:	2304      	movcs	r3, #4
 8001cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	2b06      	cmp	r3, #6
 8001cf4:	d902      	bls.n	8001cfc <NVIC_EncodePriority+0x30>
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	3b03      	subs	r3, #3
 8001cfa:	e000      	b.n	8001cfe <NVIC_EncodePriority+0x32>
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d00:	f04f 32ff 	mov.w	r2, #4294967295
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43da      	mvns	r2, r3
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	401a      	ands	r2, r3
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d14:	f04f 31ff 	mov.w	r1, #4294967295
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1e:	43d9      	mvns	r1, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d24:	4313      	orrs	r3, r2
         );
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3724      	adds	r7, #36	; 0x24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr

08001d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff ff4f 	bl	8001bdc <__NVIC_SetPriorityGrouping>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b086      	sub	sp, #24
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607a      	str	r2, [r7, #4]
 8001d52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d58:	f7ff ff64 	bl	8001c24 <__NVIC_GetPriorityGrouping>
 8001d5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	68b9      	ldr	r1, [r7, #8]
 8001d62:	6978      	ldr	r0, [r7, #20]
 8001d64:	f7ff ffb2 	bl	8001ccc <NVIC_EncodePriority>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff81 	bl	8001c78 <__NVIC_SetPriority>
}
 8001d76:	bf00      	nop
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4603      	mov	r3, r0
 8001d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff57 	bl	8001c40 <__NVIC_EnableIRQ>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
	...

08001d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b08b      	sub	sp, #44	; 0x2c
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001da6:	2300      	movs	r3, #0
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001daa:	2300      	movs	r3, #0
 8001dac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dae:	e169      	b.n	8002084 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001db0:	2201      	movs	r2, #1
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	69fa      	ldr	r2, [r7, #28]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	f040 8158 	bne.w	800207e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	4a9a      	ldr	r2, [pc, #616]	; (800203c <HAL_GPIO_Init+0x2a0>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d05e      	beq.n	8001e96 <HAL_GPIO_Init+0xfa>
 8001dd8:	4a98      	ldr	r2, [pc, #608]	; (800203c <HAL_GPIO_Init+0x2a0>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d875      	bhi.n	8001eca <HAL_GPIO_Init+0x12e>
 8001dde:	4a98      	ldr	r2, [pc, #608]	; (8002040 <HAL_GPIO_Init+0x2a4>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d058      	beq.n	8001e96 <HAL_GPIO_Init+0xfa>
 8001de4:	4a96      	ldr	r2, [pc, #600]	; (8002040 <HAL_GPIO_Init+0x2a4>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d86f      	bhi.n	8001eca <HAL_GPIO_Init+0x12e>
 8001dea:	4a96      	ldr	r2, [pc, #600]	; (8002044 <HAL_GPIO_Init+0x2a8>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d052      	beq.n	8001e96 <HAL_GPIO_Init+0xfa>
 8001df0:	4a94      	ldr	r2, [pc, #592]	; (8002044 <HAL_GPIO_Init+0x2a8>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d869      	bhi.n	8001eca <HAL_GPIO_Init+0x12e>
 8001df6:	4a94      	ldr	r2, [pc, #592]	; (8002048 <HAL_GPIO_Init+0x2ac>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d04c      	beq.n	8001e96 <HAL_GPIO_Init+0xfa>
 8001dfc:	4a92      	ldr	r2, [pc, #584]	; (8002048 <HAL_GPIO_Init+0x2ac>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d863      	bhi.n	8001eca <HAL_GPIO_Init+0x12e>
 8001e02:	4a92      	ldr	r2, [pc, #584]	; (800204c <HAL_GPIO_Init+0x2b0>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d046      	beq.n	8001e96 <HAL_GPIO_Init+0xfa>
 8001e08:	4a90      	ldr	r2, [pc, #576]	; (800204c <HAL_GPIO_Init+0x2b0>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d85d      	bhi.n	8001eca <HAL_GPIO_Init+0x12e>
 8001e0e:	2b12      	cmp	r3, #18
 8001e10:	d82a      	bhi.n	8001e68 <HAL_GPIO_Init+0xcc>
 8001e12:	2b12      	cmp	r3, #18
 8001e14:	d859      	bhi.n	8001eca <HAL_GPIO_Init+0x12e>
 8001e16:	a201      	add	r2, pc, #4	; (adr r2, 8001e1c <HAL_GPIO_Init+0x80>)
 8001e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e1c:	08001e97 	.word	0x08001e97
 8001e20:	08001e71 	.word	0x08001e71
 8001e24:	08001e83 	.word	0x08001e83
 8001e28:	08001ec5 	.word	0x08001ec5
 8001e2c:	08001ecb 	.word	0x08001ecb
 8001e30:	08001ecb 	.word	0x08001ecb
 8001e34:	08001ecb 	.word	0x08001ecb
 8001e38:	08001ecb 	.word	0x08001ecb
 8001e3c:	08001ecb 	.word	0x08001ecb
 8001e40:	08001ecb 	.word	0x08001ecb
 8001e44:	08001ecb 	.word	0x08001ecb
 8001e48:	08001ecb 	.word	0x08001ecb
 8001e4c:	08001ecb 	.word	0x08001ecb
 8001e50:	08001ecb 	.word	0x08001ecb
 8001e54:	08001ecb 	.word	0x08001ecb
 8001e58:	08001ecb 	.word	0x08001ecb
 8001e5c:	08001ecb 	.word	0x08001ecb
 8001e60:	08001e79 	.word	0x08001e79
 8001e64:	08001e8d 	.word	0x08001e8d
 8001e68:	4a79      	ldr	r2, [pc, #484]	; (8002050 <HAL_GPIO_Init+0x2b4>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d013      	beq.n	8001e96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e6e:	e02c      	b.n	8001eca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	623b      	str	r3, [r7, #32]
          break;
 8001e76:	e029      	b.n	8001ecc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	623b      	str	r3, [r7, #32]
          break;
 8001e80:	e024      	b.n	8001ecc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	3308      	adds	r3, #8
 8001e88:	623b      	str	r3, [r7, #32]
          break;
 8001e8a:	e01f      	b.n	8001ecc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	330c      	adds	r3, #12
 8001e92:	623b      	str	r3, [r7, #32]
          break;
 8001e94:	e01a      	b.n	8001ecc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d102      	bne.n	8001ea4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e9e:	2304      	movs	r3, #4
 8001ea0:	623b      	str	r3, [r7, #32]
          break;
 8001ea2:	e013      	b.n	8001ecc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d105      	bne.n	8001eb8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eac:	2308      	movs	r3, #8
 8001eae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69fa      	ldr	r2, [r7, #28]
 8001eb4:	611a      	str	r2, [r3, #16]
          break;
 8001eb6:	e009      	b.n	8001ecc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eb8:	2308      	movs	r3, #8
 8001eba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69fa      	ldr	r2, [r7, #28]
 8001ec0:	615a      	str	r2, [r3, #20]
          break;
 8001ec2:	e003      	b.n	8001ecc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	623b      	str	r3, [r7, #32]
          break;
 8001ec8:	e000      	b.n	8001ecc <HAL_GPIO_Init+0x130>
          break;
 8001eca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	2bff      	cmp	r3, #255	; 0xff
 8001ed0:	d801      	bhi.n	8001ed6 <HAL_GPIO_Init+0x13a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	e001      	b.n	8001eda <HAL_GPIO_Init+0x13e>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3304      	adds	r3, #4
 8001eda:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	2bff      	cmp	r3, #255	; 0xff
 8001ee0:	d802      	bhi.n	8001ee8 <HAL_GPIO_Init+0x14c>
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	e002      	b.n	8001eee <HAL_GPIO_Init+0x152>
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	3b08      	subs	r3, #8
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	210f      	movs	r1, #15
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	401a      	ands	r2, r3
 8001f00:	6a39      	ldr	r1, [r7, #32]
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	fa01 f303 	lsl.w	r3, r1, r3
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 80b1 	beq.w	800207e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f1c:	4b4d      	ldr	r3, [pc, #308]	; (8002054 <HAL_GPIO_Init+0x2b8>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	4a4c      	ldr	r2, [pc, #304]	; (8002054 <HAL_GPIO_Init+0x2b8>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	6193      	str	r3, [r2, #24]
 8001f28:	4b4a      	ldr	r3, [pc, #296]	; (8002054 <HAL_GPIO_Init+0x2b8>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f34:	4a48      	ldr	r2, [pc, #288]	; (8002058 <HAL_GPIO_Init+0x2bc>)
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	089b      	lsrs	r3, r3, #2
 8001f3a:	3302      	adds	r3, #2
 8001f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	220f      	movs	r2, #15
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	4013      	ands	r3, r2
 8001f56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a40      	ldr	r2, [pc, #256]	; (800205c <HAL_GPIO_Init+0x2c0>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d013      	beq.n	8001f88 <HAL_GPIO_Init+0x1ec>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a3f      	ldr	r2, [pc, #252]	; (8002060 <HAL_GPIO_Init+0x2c4>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d00d      	beq.n	8001f84 <HAL_GPIO_Init+0x1e8>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a3e      	ldr	r2, [pc, #248]	; (8002064 <HAL_GPIO_Init+0x2c8>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d007      	beq.n	8001f80 <HAL_GPIO_Init+0x1e4>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a3d      	ldr	r2, [pc, #244]	; (8002068 <HAL_GPIO_Init+0x2cc>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d101      	bne.n	8001f7c <HAL_GPIO_Init+0x1e0>
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e006      	b.n	8001f8a <HAL_GPIO_Init+0x1ee>
 8001f7c:	2304      	movs	r3, #4
 8001f7e:	e004      	b.n	8001f8a <HAL_GPIO_Init+0x1ee>
 8001f80:	2302      	movs	r3, #2
 8001f82:	e002      	b.n	8001f8a <HAL_GPIO_Init+0x1ee>
 8001f84:	2301      	movs	r3, #1
 8001f86:	e000      	b.n	8001f8a <HAL_GPIO_Init+0x1ee>
 8001f88:	2300      	movs	r3, #0
 8001f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f8c:	f002 0203 	and.w	r2, r2, #3
 8001f90:	0092      	lsls	r2, r2, #2
 8001f92:	4093      	lsls	r3, r2
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f9a:	492f      	ldr	r1, [pc, #188]	; (8002058 <HAL_GPIO_Init+0x2bc>)
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	089b      	lsrs	r3, r3, #2
 8001fa0:	3302      	adds	r3, #2
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d006      	beq.n	8001fc2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fb4:	4b2d      	ldr	r3, [pc, #180]	; (800206c <HAL_GPIO_Init+0x2d0>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	492c      	ldr	r1, [pc, #176]	; (800206c <HAL_GPIO_Init+0x2d0>)
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	600b      	str	r3, [r1, #0]
 8001fc0:	e006      	b.n	8001fd0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fc2:	4b2a      	ldr	r3, [pc, #168]	; (800206c <HAL_GPIO_Init+0x2d0>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	4928      	ldr	r1, [pc, #160]	; (800206c <HAL_GPIO_Init+0x2d0>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d006      	beq.n	8001fea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fdc:	4b23      	ldr	r3, [pc, #140]	; (800206c <HAL_GPIO_Init+0x2d0>)
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	4922      	ldr	r1, [pc, #136]	; (800206c <HAL_GPIO_Init+0x2d0>)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	604b      	str	r3, [r1, #4]
 8001fe8:	e006      	b.n	8001ff8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fea:	4b20      	ldr	r3, [pc, #128]	; (800206c <HAL_GPIO_Init+0x2d0>)
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	491e      	ldr	r1, [pc, #120]	; (800206c <HAL_GPIO_Init+0x2d0>)
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d006      	beq.n	8002012 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002004:	4b19      	ldr	r3, [pc, #100]	; (800206c <HAL_GPIO_Init+0x2d0>)
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	4918      	ldr	r1, [pc, #96]	; (800206c <HAL_GPIO_Init+0x2d0>)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	4313      	orrs	r3, r2
 800200e:	608b      	str	r3, [r1, #8]
 8002010:	e006      	b.n	8002020 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002012:	4b16      	ldr	r3, [pc, #88]	; (800206c <HAL_GPIO_Init+0x2d0>)
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	43db      	mvns	r3, r3
 800201a:	4914      	ldr	r1, [pc, #80]	; (800206c <HAL_GPIO_Init+0x2d0>)
 800201c:	4013      	ands	r3, r2
 800201e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d021      	beq.n	8002070 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800202c:	4b0f      	ldr	r3, [pc, #60]	; (800206c <HAL_GPIO_Init+0x2d0>)
 800202e:	68da      	ldr	r2, [r3, #12]
 8002030:	490e      	ldr	r1, [pc, #56]	; (800206c <HAL_GPIO_Init+0x2d0>)
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	4313      	orrs	r3, r2
 8002036:	60cb      	str	r3, [r1, #12]
 8002038:	e021      	b.n	800207e <HAL_GPIO_Init+0x2e2>
 800203a:	bf00      	nop
 800203c:	10320000 	.word	0x10320000
 8002040:	10310000 	.word	0x10310000
 8002044:	10220000 	.word	0x10220000
 8002048:	10210000 	.word	0x10210000
 800204c:	10120000 	.word	0x10120000
 8002050:	10110000 	.word	0x10110000
 8002054:	40021000 	.word	0x40021000
 8002058:	40010000 	.word	0x40010000
 800205c:	40010800 	.word	0x40010800
 8002060:	40010c00 	.word	0x40010c00
 8002064:	40011000 	.word	0x40011000
 8002068:	40011400 	.word	0x40011400
 800206c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002070:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <HAL_GPIO_Init+0x304>)
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	43db      	mvns	r3, r3
 8002078:	4909      	ldr	r1, [pc, #36]	; (80020a0 <HAL_GPIO_Init+0x304>)
 800207a:	4013      	ands	r3, r2
 800207c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	3301      	adds	r3, #1
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208a:	fa22 f303 	lsr.w	r3, r2, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	f47f ae8e 	bne.w	8001db0 <HAL_GPIO_Init+0x14>
  }
}
 8002094:	bf00      	nop
 8002096:	bf00      	nop
 8002098:	372c      	adds	r7, #44	; 0x2c
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr
 80020a0:	40010400 	.word	0x40010400

080020a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	807b      	strh	r3, [r7, #2]
 80020b0:	4613      	mov	r3, r2
 80020b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020b4:	787b      	ldrb	r3, [r7, #1]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ba:	887a      	ldrh	r2, [r7, #2]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020c0:	e003      	b.n	80020ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020c2:	887b      	ldrh	r3, [r7, #2]
 80020c4:	041a      	lsls	r2, r3, #16
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	611a      	str	r2, [r3, #16]
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr

080020d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e12b      	b.n	800233e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d106      	bne.n	8002100 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7ff fafa 	bl	80016f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2224      	movs	r2, #36	; 0x24
 8002104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 0201 	bic.w	r2, r2, #1
 8002116:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002126:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002136:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002138:	f000 ffea 	bl	8003110 <HAL_RCC_GetPCLK1Freq>
 800213c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	4a81      	ldr	r2, [pc, #516]	; (8002348 <HAL_I2C_Init+0x274>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d807      	bhi.n	8002158 <HAL_I2C_Init+0x84>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4a80      	ldr	r2, [pc, #512]	; (800234c <HAL_I2C_Init+0x278>)
 800214c:	4293      	cmp	r3, r2
 800214e:	bf94      	ite	ls
 8002150:	2301      	movls	r3, #1
 8002152:	2300      	movhi	r3, #0
 8002154:	b2db      	uxtb	r3, r3
 8002156:	e006      	b.n	8002166 <HAL_I2C_Init+0x92>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4a7d      	ldr	r2, [pc, #500]	; (8002350 <HAL_I2C_Init+0x27c>)
 800215c:	4293      	cmp	r3, r2
 800215e:	bf94      	ite	ls
 8002160:	2301      	movls	r3, #1
 8002162:	2300      	movhi	r3, #0
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e0e7      	b.n	800233e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	4a78      	ldr	r2, [pc, #480]	; (8002354 <HAL_I2C_Init+0x280>)
 8002172:	fba2 2303 	umull	r2, r3, r2, r3
 8002176:	0c9b      	lsrs	r3, r3, #18
 8002178:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	430a      	orrs	r2, r1
 800218c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	4a6a      	ldr	r2, [pc, #424]	; (8002348 <HAL_I2C_Init+0x274>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d802      	bhi.n	80021a8 <HAL_I2C_Init+0xd4>
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	3301      	adds	r3, #1
 80021a6:	e009      	b.n	80021bc <HAL_I2C_Init+0xe8>
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021ae:	fb02 f303 	mul.w	r3, r2, r3
 80021b2:	4a69      	ldr	r2, [pc, #420]	; (8002358 <HAL_I2C_Init+0x284>)
 80021b4:	fba2 2303 	umull	r2, r3, r2, r3
 80021b8:	099b      	lsrs	r3, r3, #6
 80021ba:	3301      	adds	r3, #1
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6812      	ldr	r2, [r2, #0]
 80021c0:	430b      	orrs	r3, r1
 80021c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80021ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	495c      	ldr	r1, [pc, #368]	; (8002348 <HAL_I2C_Init+0x274>)
 80021d8:	428b      	cmp	r3, r1
 80021da:	d819      	bhi.n	8002210 <HAL_I2C_Init+0x13c>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	1e59      	subs	r1, r3, #1
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80021ea:	1c59      	adds	r1, r3, #1
 80021ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80021f0:	400b      	ands	r3, r1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00a      	beq.n	800220c <HAL_I2C_Init+0x138>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	1e59      	subs	r1, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	fbb1 f3f3 	udiv	r3, r1, r3
 8002204:	3301      	adds	r3, #1
 8002206:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800220a:	e051      	b.n	80022b0 <HAL_I2C_Init+0x1dc>
 800220c:	2304      	movs	r3, #4
 800220e:	e04f      	b.n	80022b0 <HAL_I2C_Init+0x1dc>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d111      	bne.n	800223c <HAL_I2C_Init+0x168>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	1e58      	subs	r0, r3, #1
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6859      	ldr	r1, [r3, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	440b      	add	r3, r1
 8002226:	fbb0 f3f3 	udiv	r3, r0, r3
 800222a:	3301      	adds	r3, #1
 800222c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002230:	2b00      	cmp	r3, #0
 8002232:	bf0c      	ite	eq
 8002234:	2301      	moveq	r3, #1
 8002236:	2300      	movne	r3, #0
 8002238:	b2db      	uxtb	r3, r3
 800223a:	e012      	b.n	8002262 <HAL_I2C_Init+0x18e>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	1e58      	subs	r0, r3, #1
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6859      	ldr	r1, [r3, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	0099      	lsls	r1, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002252:	3301      	adds	r3, #1
 8002254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002258:	2b00      	cmp	r3, #0
 800225a:	bf0c      	ite	eq
 800225c:	2301      	moveq	r3, #1
 800225e:	2300      	movne	r3, #0
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <HAL_I2C_Init+0x196>
 8002266:	2301      	movs	r3, #1
 8002268:	e022      	b.n	80022b0 <HAL_I2C_Init+0x1dc>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10e      	bne.n	8002290 <HAL_I2C_Init+0x1bc>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1e58      	subs	r0, r3, #1
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6859      	ldr	r1, [r3, #4]
 800227a:	460b      	mov	r3, r1
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	440b      	add	r3, r1
 8002280:	fbb0 f3f3 	udiv	r3, r0, r3
 8002284:	3301      	adds	r3, #1
 8002286:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800228a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800228e:	e00f      	b.n	80022b0 <HAL_I2C_Init+0x1dc>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	1e58      	subs	r0, r3, #1
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6859      	ldr	r1, [r3, #4]
 8002298:	460b      	mov	r3, r1
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	0099      	lsls	r1, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022a6:	3301      	adds	r3, #1
 80022a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	6809      	ldr	r1, [r1, #0]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69da      	ldr	r2, [r3, #28]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6911      	ldr	r1, [r2, #16]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68d2      	ldr	r2, [r2, #12]
 80022ea:	4311      	orrs	r1, r2
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6812      	ldr	r2, [r2, #0]
 80022f0:	430b      	orrs	r3, r1
 80022f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	695a      	ldr	r2, [r3, #20]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0201 	orr.w	r2, r2, #1
 800231e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2220      	movs	r2, #32
 800232a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	000186a0 	.word	0x000186a0
 800234c:	001e847f 	.word	0x001e847f
 8002350:	003d08ff 	.word	0x003d08ff
 8002354:	431bde83 	.word	0x431bde83
 8002358:	10624dd3 	.word	0x10624dd3

0800235c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b088      	sub	sp, #32
 8002360:	af02      	add	r7, sp, #8
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	607a      	str	r2, [r7, #4]
 8002366:	461a      	mov	r2, r3
 8002368:	460b      	mov	r3, r1
 800236a:	817b      	strh	r3, [r7, #10]
 800236c:	4613      	mov	r3, r2
 800236e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002370:	f7ff fc2a 	bl	8001bc8 <HAL_GetTick>
 8002374:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b20      	cmp	r3, #32
 8002380:	f040 80e0 	bne.w	8002544 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	2319      	movs	r3, #25
 800238a:	2201      	movs	r2, #1
 800238c:	4970      	ldr	r1, [pc, #448]	; (8002550 <HAL_I2C_Master_Transmit+0x1f4>)
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f000 f964 	bl	800265c <I2C_WaitOnFlagUntilTimeout>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800239a:	2302      	movs	r3, #2
 800239c:	e0d3      	b.n	8002546 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d101      	bne.n	80023ac <HAL_I2C_Master_Transmit+0x50>
 80023a8:	2302      	movs	r3, #2
 80023aa:	e0cc      	b.n	8002546 <HAL_I2C_Master_Transmit+0x1ea>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d007      	beq.n	80023d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f042 0201 	orr.w	r2, r2, #1
 80023d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2221      	movs	r2, #33	; 0x21
 80023e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2210      	movs	r2, #16
 80023ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	893a      	ldrh	r2, [r7, #8]
 8002402:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002408:	b29a      	uxth	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	4a50      	ldr	r2, [pc, #320]	; (8002554 <HAL_I2C_Master_Transmit+0x1f8>)
 8002412:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002414:	8979      	ldrh	r1, [r7, #10]
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	6a3a      	ldr	r2, [r7, #32]
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 f89c 	bl	8002558 <I2C_MasterRequestWrite>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e08d      	b.n	8002546 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	613b      	str	r3, [r7, #16]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	613b      	str	r3, [r7, #16]
 800243e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002440:	e066      	b.n	8002510 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	6a39      	ldr	r1, [r7, #32]
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 f9de 	bl	8002808 <I2C_WaitOnTXEFlagUntilTimeout>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00d      	beq.n	800246e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	2b04      	cmp	r3, #4
 8002458:	d107      	bne.n	800246a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002468:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e06b      	b.n	8002546 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	781a      	ldrb	r2, [r3, #0]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	1c5a      	adds	r2, r3, #1
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002488:	b29b      	uxth	r3, r3
 800248a:	3b01      	subs	r3, #1
 800248c:	b29a      	uxth	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002496:	3b01      	subs	r3, #1
 8002498:	b29a      	uxth	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d11b      	bne.n	80024e4 <HAL_I2C_Master_Transmit+0x188>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d017      	beq.n	80024e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	781a      	ldrb	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	1c5a      	adds	r2, r3, #1
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	3b01      	subs	r3, #1
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024dc:	3b01      	subs	r3, #1
 80024de:	b29a      	uxth	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	6a39      	ldr	r1, [r7, #32]
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f000 f9ce 	bl	800288a <I2C_WaitOnBTFFlagUntilTimeout>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00d      	beq.n	8002510 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f8:	2b04      	cmp	r3, #4
 80024fa:	d107      	bne.n	800250c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800250a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e01a      	b.n	8002546 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002514:	2b00      	cmp	r3, #0
 8002516:	d194      	bne.n	8002442 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002526:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2220      	movs	r2, #32
 800252c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002540:	2300      	movs	r3, #0
 8002542:	e000      	b.n	8002546 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002544:	2302      	movs	r3, #2
  }
}
 8002546:	4618      	mov	r0, r3
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	00100002 	.word	0x00100002
 8002554:	ffff0000 	.word	0xffff0000

08002558 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b088      	sub	sp, #32
 800255c:	af02      	add	r7, sp, #8
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	607a      	str	r2, [r7, #4]
 8002562:	603b      	str	r3, [r7, #0]
 8002564:	460b      	mov	r3, r1
 8002566:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2b08      	cmp	r3, #8
 8002572:	d006      	beq.n	8002582 <I2C_MasterRequestWrite+0x2a>
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d003      	beq.n	8002582 <I2C_MasterRequestWrite+0x2a>
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002580:	d108      	bne.n	8002594 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	e00b      	b.n	80025ac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002598:	2b12      	cmp	r3, #18
 800259a:	d107      	bne.n	80025ac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f000 f84f 	bl	800265c <I2C_WaitOnFlagUntilTimeout>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00d      	beq.n	80025e0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025d2:	d103      	bne.n	80025dc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e035      	b.n	800264c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025e8:	d108      	bne.n	80025fc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025ea:	897b      	ldrh	r3, [r7, #10]
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	461a      	mov	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025f8:	611a      	str	r2, [r3, #16]
 80025fa:	e01b      	b.n	8002634 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80025fc:	897b      	ldrh	r3, [r7, #10]
 80025fe:	11db      	asrs	r3, r3, #7
 8002600:	b2db      	uxtb	r3, r3
 8002602:	f003 0306 	and.w	r3, r3, #6
 8002606:	b2db      	uxtb	r3, r3
 8002608:	f063 030f 	orn	r3, r3, #15
 800260c:	b2da      	uxtb	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	490e      	ldr	r1, [pc, #56]	; (8002654 <I2C_MasterRequestWrite+0xfc>)
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 f875 	bl	800270a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e010      	b.n	800264c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800262a:	897b      	ldrh	r3, [r7, #10]
 800262c:	b2da      	uxtb	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	4907      	ldr	r1, [pc, #28]	; (8002658 <I2C_MasterRequestWrite+0x100>)
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 f865 	bl	800270a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3718      	adds	r7, #24
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	00010008 	.word	0x00010008
 8002658:	00010002 	.word	0x00010002

0800265c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	603b      	str	r3, [r7, #0]
 8002668:	4613      	mov	r3, r2
 800266a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800266c:	e025      	b.n	80026ba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002674:	d021      	beq.n	80026ba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002676:	f7ff faa7 	bl	8001bc8 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	429a      	cmp	r2, r3
 8002684:	d302      	bcc.n	800268c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d116      	bne.n	80026ba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2220      	movs	r2, #32
 8002696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	f043 0220 	orr.w	r2, r3, #32
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e023      	b.n	8002702 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	0c1b      	lsrs	r3, r3, #16
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d10d      	bne.n	80026e0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	43da      	mvns	r2, r3
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	4013      	ands	r3, r2
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	bf0c      	ite	eq
 80026d6:	2301      	moveq	r3, #1
 80026d8:	2300      	movne	r3, #0
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	461a      	mov	r2, r3
 80026de:	e00c      	b.n	80026fa <I2C_WaitOnFlagUntilTimeout+0x9e>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	43da      	mvns	r2, r3
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	4013      	ands	r3, r2
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	bf0c      	ite	eq
 80026f2:	2301      	moveq	r3, #1
 80026f4:	2300      	movne	r3, #0
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	461a      	mov	r2, r3
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d0b6      	beq.n	800266e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b084      	sub	sp, #16
 800270e:	af00      	add	r7, sp, #0
 8002710:	60f8      	str	r0, [r7, #12]
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	607a      	str	r2, [r7, #4]
 8002716:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002718:	e051      	b.n	80027be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002728:	d123      	bne.n	8002772 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002738:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002742:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2220      	movs	r2, #32
 800274e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	f043 0204 	orr.w	r2, r3, #4
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e046      	b.n	8002800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002778:	d021      	beq.n	80027be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800277a:	f7ff fa25 	bl	8001bc8 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	429a      	cmp	r2, r3
 8002788:	d302      	bcc.n	8002790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d116      	bne.n	80027be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2220      	movs	r2, #32
 800279a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f043 0220 	orr.w	r2, r3, #32
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e020      	b.n	8002800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	0c1b      	lsrs	r3, r3, #16
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d10c      	bne.n	80027e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	43da      	mvns	r2, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	4013      	ands	r3, r2
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	bf14      	ite	ne
 80027da:	2301      	movne	r3, #1
 80027dc:	2300      	moveq	r3, #0
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	e00b      	b.n	80027fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	43da      	mvns	r2, r3
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	4013      	ands	r3, r2
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	bf14      	ite	ne
 80027f4:	2301      	movne	r3, #1
 80027f6:	2300      	moveq	r3, #0
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d18d      	bne.n	800271a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002814:	e02d      	b.n	8002872 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 f878 	bl	800290c <I2C_IsAcknowledgeFailed>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e02d      	b.n	8002882 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800282c:	d021      	beq.n	8002872 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800282e:	f7ff f9cb 	bl	8001bc8 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	429a      	cmp	r2, r3
 800283c:	d302      	bcc.n	8002844 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d116      	bne.n	8002872 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2220      	movs	r2, #32
 800284e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	f043 0220 	orr.w	r2, r3, #32
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e007      	b.n	8002882 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287c:	2b80      	cmp	r3, #128	; 0x80
 800287e:	d1ca      	bne.n	8002816 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b084      	sub	sp, #16
 800288e:	af00      	add	r7, sp, #0
 8002890:	60f8      	str	r0, [r7, #12]
 8002892:	60b9      	str	r1, [r7, #8]
 8002894:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002896:	e02d      	b.n	80028f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f000 f837 	bl	800290c <I2C_IsAcknowledgeFailed>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e02d      	b.n	8002904 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ae:	d021      	beq.n	80028f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028b0:	f7ff f98a 	bl	8001bc8 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d302      	bcc.n	80028c6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d116      	bne.n	80028f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2220      	movs	r2, #32
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	f043 0220 	orr.w	r2, r3, #32
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e007      	b.n	8002904 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	f003 0304 	and.w	r3, r3, #4
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d1ca      	bne.n	8002898 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800291e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002922:	d11b      	bne.n	800295c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800292c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2220      	movs	r2, #32
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002948:	f043 0204 	orr.w	r2, r3, #4
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e000      	b.n	800295e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e26c      	b.n	8002e54 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 8087 	beq.w	8002a96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002988:	4b92      	ldr	r3, [pc, #584]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 030c 	and.w	r3, r3, #12
 8002990:	2b04      	cmp	r3, #4
 8002992:	d00c      	beq.n	80029ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002994:	4b8f      	ldr	r3, [pc, #572]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 030c 	and.w	r3, r3, #12
 800299c:	2b08      	cmp	r3, #8
 800299e:	d112      	bne.n	80029c6 <HAL_RCC_OscConfig+0x5e>
 80029a0:	4b8c      	ldr	r3, [pc, #560]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ac:	d10b      	bne.n	80029c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ae:	4b89      	ldr	r3, [pc, #548]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d06c      	beq.n	8002a94 <HAL_RCC_OscConfig+0x12c>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d168      	bne.n	8002a94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e246      	b.n	8002e54 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ce:	d106      	bne.n	80029de <HAL_RCC_OscConfig+0x76>
 80029d0:	4b80      	ldr	r3, [pc, #512]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a7f      	ldr	r2, [pc, #508]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 80029d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029da:	6013      	str	r3, [r2, #0]
 80029dc:	e02e      	b.n	8002a3c <HAL_RCC_OscConfig+0xd4>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10c      	bne.n	8002a00 <HAL_RCC_OscConfig+0x98>
 80029e6:	4b7b      	ldr	r3, [pc, #492]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a7a      	ldr	r2, [pc, #488]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 80029ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	4b78      	ldr	r3, [pc, #480]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a77      	ldr	r2, [pc, #476]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 80029f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	e01d      	b.n	8002a3c <HAL_RCC_OscConfig+0xd4>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a08:	d10c      	bne.n	8002a24 <HAL_RCC_OscConfig+0xbc>
 8002a0a:	4b72      	ldr	r3, [pc, #456]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a71      	ldr	r2, [pc, #452]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	4b6f      	ldr	r3, [pc, #444]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a6e      	ldr	r2, [pc, #440]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	e00b      	b.n	8002a3c <HAL_RCC_OscConfig+0xd4>
 8002a24:	4b6b      	ldr	r3, [pc, #428]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a6a      	ldr	r2, [pc, #424]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002a2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a2e:	6013      	str	r3, [r2, #0]
 8002a30:	4b68      	ldr	r3, [pc, #416]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a67      	ldr	r2, [pc, #412]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002a36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d013      	beq.n	8002a6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a44:	f7ff f8c0 	bl	8001bc8 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a4c:	f7ff f8bc 	bl	8001bc8 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b64      	cmp	r3, #100	; 0x64
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e1fa      	b.n	8002e54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5e:	4b5d      	ldr	r3, [pc, #372]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCC_OscConfig+0xe4>
 8002a6a:	e014      	b.n	8002a96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6c:	f7ff f8ac 	bl	8001bc8 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a74:	f7ff f8a8 	bl	8001bc8 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b64      	cmp	r3, #100	; 0x64
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e1e6      	b.n	8002e54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a86:	4b53      	ldr	r3, [pc, #332]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0x10c>
 8002a92:	e000      	b.n	8002a96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d063      	beq.n	8002b6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aa2:	4b4c      	ldr	r3, [pc, #304]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00b      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002aae:	4b49      	ldr	r3, [pc, #292]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	d11c      	bne.n	8002af4 <HAL_RCC_OscConfig+0x18c>
 8002aba:	4b46      	ldr	r3, [pc, #280]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d116      	bne.n	8002af4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ac6:	4b43      	ldr	r3, [pc, #268]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d005      	beq.n	8002ade <HAL_RCC_OscConfig+0x176>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d001      	beq.n	8002ade <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e1ba      	b.n	8002e54 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ade:	4b3d      	ldr	r3, [pc, #244]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	4939      	ldr	r1, [pc, #228]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af2:	e03a      	b.n	8002b6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d020      	beq.n	8002b3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002afc:	4b36      	ldr	r3, [pc, #216]	; (8002bd8 <HAL_RCC_OscConfig+0x270>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b02:	f7ff f861 	bl	8001bc8 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b0a:	f7ff f85d 	bl	8001bc8 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e19b      	b.n	8002e54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1c:	4b2d      	ldr	r3, [pc, #180]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0f0      	beq.n	8002b0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b28:	4b2a      	ldr	r3, [pc, #168]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	4927      	ldr	r1, [pc, #156]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	600b      	str	r3, [r1, #0]
 8002b3c:	e015      	b.n	8002b6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b3e:	4b26      	ldr	r3, [pc, #152]	; (8002bd8 <HAL_RCC_OscConfig+0x270>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b44:	f7ff f840 	bl	8001bc8 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b4c:	f7ff f83c 	bl	8001bc8 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e17a      	b.n	8002e54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b5e:	4b1d      	ldr	r3, [pc, #116]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d03a      	beq.n	8002bec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d019      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b7e:	4b17      	ldr	r3, [pc, #92]	; (8002bdc <HAL_RCC_OscConfig+0x274>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b84:	f7ff f820 	bl	8001bc8 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b8c:	f7ff f81c 	bl	8001bc8 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e15a      	b.n	8002e54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b9e:	4b0d      	ldr	r3, [pc, #52]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0f0      	beq.n	8002b8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002baa:	2001      	movs	r0, #1
 8002bac:	f000 fb08 	bl	80031c0 <RCC_Delay>
 8002bb0:	e01c      	b.n	8002bec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bb2:	4b0a      	ldr	r3, [pc, #40]	; (8002bdc <HAL_RCC_OscConfig+0x274>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb8:	f7ff f806 	bl	8001bc8 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bbe:	e00f      	b.n	8002be0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bc0:	f7ff f802 	bl	8001bc8 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d908      	bls.n	8002be0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e140      	b.n	8002e54 <HAL_RCC_OscConfig+0x4ec>
 8002bd2:	bf00      	nop
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	42420000 	.word	0x42420000
 8002bdc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be0:	4b9e      	ldr	r3, [pc, #632]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1e9      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 80a6 	beq.w	8002d46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bfe:	4b97      	ldr	r3, [pc, #604]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10d      	bne.n	8002c26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c0a:	4b94      	ldr	r3, [pc, #592]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	4a93      	ldr	r2, [pc, #588]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c14:	61d3      	str	r3, [r2, #28]
 8002c16:	4b91      	ldr	r3, [pc, #580]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	60bb      	str	r3, [r7, #8]
 8002c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c22:	2301      	movs	r3, #1
 8002c24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c26:	4b8e      	ldr	r3, [pc, #568]	; (8002e60 <HAL_RCC_OscConfig+0x4f8>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d118      	bne.n	8002c64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c32:	4b8b      	ldr	r3, [pc, #556]	; (8002e60 <HAL_RCC_OscConfig+0x4f8>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a8a      	ldr	r2, [pc, #552]	; (8002e60 <HAL_RCC_OscConfig+0x4f8>)
 8002c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c3e:	f7fe ffc3 	bl	8001bc8 <HAL_GetTick>
 8002c42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c46:	f7fe ffbf 	bl	8001bc8 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b64      	cmp	r3, #100	; 0x64
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e0fd      	b.n	8002e54 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c58:	4b81      	ldr	r3, [pc, #516]	; (8002e60 <HAL_RCC_OscConfig+0x4f8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0f0      	beq.n	8002c46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d106      	bne.n	8002c7a <HAL_RCC_OscConfig+0x312>
 8002c6c:	4b7b      	ldr	r3, [pc, #492]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	4a7a      	ldr	r2, [pc, #488]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	6213      	str	r3, [r2, #32]
 8002c78:	e02d      	b.n	8002cd6 <HAL_RCC_OscConfig+0x36e>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10c      	bne.n	8002c9c <HAL_RCC_OscConfig+0x334>
 8002c82:	4b76      	ldr	r3, [pc, #472]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	4a75      	ldr	r2, [pc, #468]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002c88:	f023 0301 	bic.w	r3, r3, #1
 8002c8c:	6213      	str	r3, [r2, #32]
 8002c8e:	4b73      	ldr	r3, [pc, #460]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	4a72      	ldr	r2, [pc, #456]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002c94:	f023 0304 	bic.w	r3, r3, #4
 8002c98:	6213      	str	r3, [r2, #32]
 8002c9a:	e01c      	b.n	8002cd6 <HAL_RCC_OscConfig+0x36e>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	2b05      	cmp	r3, #5
 8002ca2:	d10c      	bne.n	8002cbe <HAL_RCC_OscConfig+0x356>
 8002ca4:	4b6d      	ldr	r3, [pc, #436]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	4a6c      	ldr	r2, [pc, #432]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002caa:	f043 0304 	orr.w	r3, r3, #4
 8002cae:	6213      	str	r3, [r2, #32]
 8002cb0:	4b6a      	ldr	r3, [pc, #424]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	4a69      	ldr	r2, [pc, #420]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002cb6:	f043 0301 	orr.w	r3, r3, #1
 8002cba:	6213      	str	r3, [r2, #32]
 8002cbc:	e00b      	b.n	8002cd6 <HAL_RCC_OscConfig+0x36e>
 8002cbe:	4b67      	ldr	r3, [pc, #412]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	4a66      	ldr	r2, [pc, #408]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002cc4:	f023 0301 	bic.w	r3, r3, #1
 8002cc8:	6213      	str	r3, [r2, #32]
 8002cca:	4b64      	ldr	r3, [pc, #400]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	4a63      	ldr	r2, [pc, #396]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002cd0:	f023 0304 	bic.w	r3, r3, #4
 8002cd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d015      	beq.n	8002d0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cde:	f7fe ff73 	bl	8001bc8 <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce4:	e00a      	b.n	8002cfc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce6:	f7fe ff6f 	bl	8001bc8 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e0ab      	b.n	8002e54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cfc:	4b57      	ldr	r3, [pc, #348]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0ee      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x37e>
 8002d08:	e014      	b.n	8002d34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d0a:	f7fe ff5d 	bl	8001bc8 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d10:	e00a      	b.n	8002d28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d12:	f7fe ff59 	bl	8001bc8 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e095      	b.n	8002e54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d28:	4b4c      	ldr	r3, [pc, #304]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1ee      	bne.n	8002d12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d34:	7dfb      	ldrb	r3, [r7, #23]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d105      	bne.n	8002d46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d3a:	4b48      	ldr	r3, [pc, #288]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	4a47      	ldr	r2, [pc, #284]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 8081 	beq.w	8002e52 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d50:	4b42      	ldr	r3, [pc, #264]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 030c 	and.w	r3, r3, #12
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d061      	beq.n	8002e20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	69db      	ldr	r3, [r3, #28]
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d146      	bne.n	8002df2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d64:	4b3f      	ldr	r3, [pc, #252]	; (8002e64 <HAL_RCC_OscConfig+0x4fc>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6a:	f7fe ff2d 	bl	8001bc8 <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d72:	f7fe ff29 	bl	8001bc8 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e067      	b.n	8002e54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d84:	4b35      	ldr	r3, [pc, #212]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1f0      	bne.n	8002d72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d98:	d108      	bne.n	8002dac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d9a:	4b30      	ldr	r3, [pc, #192]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	492d      	ldr	r1, [pc, #180]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dac:	4b2b      	ldr	r3, [pc, #172]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a19      	ldr	r1, [r3, #32]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	430b      	orrs	r3, r1
 8002dbe:	4927      	ldr	r1, [pc, #156]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dc4:	4b27      	ldr	r3, [pc, #156]	; (8002e64 <HAL_RCC_OscConfig+0x4fc>)
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dca:	f7fe fefd 	bl	8001bc8 <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd2:	f7fe fef9 	bl	8001bc8 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e037      	b.n	8002e54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002de4:	4b1d      	ldr	r3, [pc, #116]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0f0      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x46a>
 8002df0:	e02f      	b.n	8002e52 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df2:	4b1c      	ldr	r3, [pc, #112]	; (8002e64 <HAL_RCC_OscConfig+0x4fc>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df8:	f7fe fee6 	bl	8001bc8 <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e00:	f7fe fee2 	bl	8001bc8 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e020      	b.n	8002e54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e12:	4b12      	ldr	r3, [pc, #72]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1f0      	bne.n	8002e00 <HAL_RCC_OscConfig+0x498>
 8002e1e:	e018      	b.n	8002e52 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d101      	bne.n	8002e2c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e013      	b.n	8002e54 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e2c:	4b0b      	ldr	r3, [pc, #44]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d106      	bne.n	8002e4e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d001      	beq.n	8002e52 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e000      	b.n	8002e54 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3718      	adds	r7, #24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	40007000 	.word	0x40007000
 8002e64:	42420060 	.word	0x42420060

08002e68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e0d0      	b.n	800301e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e7c:	4b6a      	ldr	r3, [pc, #424]	; (8003028 <HAL_RCC_ClockConfig+0x1c0>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d910      	bls.n	8002eac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8a:	4b67      	ldr	r3, [pc, #412]	; (8003028 <HAL_RCC_ClockConfig+0x1c0>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f023 0207 	bic.w	r2, r3, #7
 8002e92:	4965      	ldr	r1, [pc, #404]	; (8003028 <HAL_RCC_ClockConfig+0x1c0>)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9a:	4b63      	ldr	r3, [pc, #396]	; (8003028 <HAL_RCC_ClockConfig+0x1c0>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d001      	beq.n	8002eac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e0b8      	b.n	800301e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d020      	beq.n	8002efa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d005      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ec4:	4b59      	ldr	r3, [pc, #356]	; (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	4a58      	ldr	r2, [pc, #352]	; (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8002eca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ece:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0308 	and.w	r3, r3, #8
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d005      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002edc:	4b53      	ldr	r3, [pc, #332]	; (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	4a52      	ldr	r2, [pc, #328]	; (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8002ee2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ee6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee8:	4b50      	ldr	r3, [pc, #320]	; (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	494d      	ldr	r1, [pc, #308]	; (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d040      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d107      	bne.n	8002f1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0e:	4b47      	ldr	r3, [pc, #284]	; (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d115      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e07f      	b.n	800301e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d107      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f26:	4b41      	ldr	r3, [pc, #260]	; (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d109      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e073      	b.n	800301e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f36:	4b3d      	ldr	r3, [pc, #244]	; (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e06b      	b.n	800301e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f46:	4b39      	ldr	r3, [pc, #228]	; (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f023 0203 	bic.w	r2, r3, #3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	4936      	ldr	r1, [pc, #216]	; (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f58:	f7fe fe36 	bl	8001bc8 <HAL_GetTick>
 8002f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5e:	e00a      	b.n	8002f76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f60:	f7fe fe32 	bl	8001bc8 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e053      	b.n	800301e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f76:	4b2d      	ldr	r3, [pc, #180]	; (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f003 020c 	and.w	r2, r3, #12
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d1eb      	bne.n	8002f60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f88:	4b27      	ldr	r3, [pc, #156]	; (8003028 <HAL_RCC_ClockConfig+0x1c0>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d210      	bcs.n	8002fb8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f96:	4b24      	ldr	r3, [pc, #144]	; (8003028 <HAL_RCC_ClockConfig+0x1c0>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f023 0207 	bic.w	r2, r3, #7
 8002f9e:	4922      	ldr	r1, [pc, #136]	; (8003028 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa6:	4b20      	ldr	r3, [pc, #128]	; (8003028 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d001      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e032      	b.n	800301e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d008      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fc4:	4b19      	ldr	r3, [pc, #100]	; (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	4916      	ldr	r1, [pc, #88]	; (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0308 	and.w	r3, r3, #8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d009      	beq.n	8002ff6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fe2:	4b12      	ldr	r3, [pc, #72]	; (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	490e      	ldr	r1, [pc, #56]	; (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ff6:	f000 f821 	bl	800303c <HAL_RCC_GetSysClockFreq>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	; (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	091b      	lsrs	r3, r3, #4
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	490a      	ldr	r1, [pc, #40]	; (8003030 <HAL_RCC_ClockConfig+0x1c8>)
 8003008:	5ccb      	ldrb	r3, [r1, r3]
 800300a:	fa22 f303 	lsr.w	r3, r2, r3
 800300e:	4a09      	ldr	r2, [pc, #36]	; (8003034 <HAL_RCC_ClockConfig+0x1cc>)
 8003010:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003012:	4b09      	ldr	r3, [pc, #36]	; (8003038 <HAL_RCC_ClockConfig+0x1d0>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f7fe fcd6 	bl	80019c8 <HAL_InitTick>

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40022000 	.word	0x40022000
 800302c:	40021000 	.word	0x40021000
 8003030:	08006de4 	.word	0x08006de4
 8003034:	20000000 	.word	0x20000000
 8003038:	20000004 	.word	0x20000004

0800303c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800303c:	b490      	push	{r4, r7}
 800303e:	b08a      	sub	sp, #40	; 0x28
 8003040:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003042:	4b2a      	ldr	r3, [pc, #168]	; (80030ec <HAL_RCC_GetSysClockFreq+0xb0>)
 8003044:	1d3c      	adds	r4, r7, #4
 8003046:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003048:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800304c:	f240 2301 	movw	r3, #513	; 0x201
 8003050:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003052:	2300      	movs	r3, #0
 8003054:	61fb      	str	r3, [r7, #28]
 8003056:	2300      	movs	r3, #0
 8003058:	61bb      	str	r3, [r7, #24]
 800305a:	2300      	movs	r3, #0
 800305c:	627b      	str	r3, [r7, #36]	; 0x24
 800305e:	2300      	movs	r3, #0
 8003060:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003062:	2300      	movs	r3, #0
 8003064:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003066:	4b22      	ldr	r3, [pc, #136]	; (80030f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	f003 030c 	and.w	r3, r3, #12
 8003072:	2b04      	cmp	r3, #4
 8003074:	d002      	beq.n	800307c <HAL_RCC_GetSysClockFreq+0x40>
 8003076:	2b08      	cmp	r3, #8
 8003078:	d003      	beq.n	8003082 <HAL_RCC_GetSysClockFreq+0x46>
 800307a:	e02d      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800307c:	4b1d      	ldr	r3, [pc, #116]	; (80030f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800307e:	623b      	str	r3, [r7, #32]
      break;
 8003080:	e02d      	b.n	80030de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	0c9b      	lsrs	r3, r3, #18
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800308e:	4413      	add	r3, r2
 8003090:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003094:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d013      	beq.n	80030c8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030a0:	4b13      	ldr	r3, [pc, #76]	; (80030f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	0c5b      	lsrs	r3, r3, #17
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80030ae:	4413      	add	r3, r2
 80030b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80030b4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	4a0e      	ldr	r2, [pc, #56]	; (80030f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030ba:	fb02 f203 	mul.w	r2, r2, r3
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
 80030c6:	e004      	b.n	80030d2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	4a0b      	ldr	r2, [pc, #44]	; (80030f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80030cc:	fb02 f303 	mul.w	r3, r2, r3
 80030d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	623b      	str	r3, [r7, #32]
      break;
 80030d6:	e002      	b.n	80030de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030d8:	4b06      	ldr	r3, [pc, #24]	; (80030f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030da:	623b      	str	r3, [r7, #32]
      break;
 80030dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030de:	6a3b      	ldr	r3, [r7, #32]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3728      	adds	r7, #40	; 0x28
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bc90      	pop	{r4, r7}
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	08006dc4 	.word	0x08006dc4
 80030f0:	40021000 	.word	0x40021000
 80030f4:	007a1200 	.word	0x007a1200
 80030f8:	003d0900 	.word	0x003d0900

080030fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003100:	4b02      	ldr	r3, [pc, #8]	; (800310c <HAL_RCC_GetHCLKFreq+0x10>)
 8003102:	681b      	ldr	r3, [r3, #0]
}
 8003104:	4618      	mov	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	bc80      	pop	{r7}
 800310a:	4770      	bx	lr
 800310c:	20000000 	.word	0x20000000

08003110 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003114:	f7ff fff2 	bl	80030fc <HAL_RCC_GetHCLKFreq>
 8003118:	4602      	mov	r2, r0
 800311a:	4b05      	ldr	r3, [pc, #20]	; (8003130 <HAL_RCC_GetPCLK1Freq+0x20>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	0a1b      	lsrs	r3, r3, #8
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	4903      	ldr	r1, [pc, #12]	; (8003134 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003126:	5ccb      	ldrb	r3, [r1, r3]
 8003128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800312c:	4618      	mov	r0, r3
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40021000 	.word	0x40021000
 8003134:	08006df4 	.word	0x08006df4

08003138 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800313c:	f7ff ffde 	bl	80030fc <HAL_RCC_GetHCLKFreq>
 8003140:	4602      	mov	r2, r0
 8003142:	4b05      	ldr	r3, [pc, #20]	; (8003158 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	0adb      	lsrs	r3, r3, #11
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	4903      	ldr	r1, [pc, #12]	; (800315c <HAL_RCC_GetPCLK2Freq+0x24>)
 800314e:	5ccb      	ldrb	r3, [r1, r3]
 8003150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003154:	4618      	mov	r0, r3
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40021000 	.word	0x40021000
 800315c:	08006df4 	.word	0x08006df4

08003160 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	220f      	movs	r2, #15
 800316e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003170:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <HAL_RCC_GetClockConfig+0x58>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f003 0203 	and.w	r2, r3, #3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800317c:	4b0e      	ldr	r3, [pc, #56]	; (80031b8 <HAL_RCC_GetClockConfig+0x58>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003188:	4b0b      	ldr	r3, [pc, #44]	; (80031b8 <HAL_RCC_GetClockConfig+0x58>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003194:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <HAL_RCC_GetClockConfig+0x58>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	08db      	lsrs	r3, r3, #3
 800319a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80031a2:	4b06      	ldr	r3, [pc, #24]	; (80031bc <HAL_RCC_GetClockConfig+0x5c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0207 	and.w	r2, r3, #7
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr
 80031b8:	40021000 	.word	0x40021000
 80031bc:	40022000 	.word	0x40022000

080031c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031c8:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <RCC_Delay+0x34>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a0a      	ldr	r2, [pc, #40]	; (80031f8 <RCC_Delay+0x38>)
 80031ce:	fba2 2303 	umull	r2, r3, r2, r3
 80031d2:	0a5b      	lsrs	r3, r3, #9
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	fb02 f303 	mul.w	r3, r2, r3
 80031da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031dc:	bf00      	nop
  }
  while (Delay --);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	1e5a      	subs	r2, r3, #1
 80031e2:	60fa      	str	r2, [r7, #12]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1f9      	bne.n	80031dc <RCC_Delay+0x1c>
}
 80031e8:	bf00      	nop
 80031ea:	bf00      	nop
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr
 80031f4:	20000000 	.word	0x20000000
 80031f8:	10624dd3 	.word	0x10624dd3

080031fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e076      	b.n	80032fc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	2b00      	cmp	r3, #0
 8003214:	d108      	bne.n	8003228 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800321e:	d009      	beq.n	8003234 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	61da      	str	r2, [r3, #28]
 8003226:	e005      	b.n	8003234 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d106      	bne.n	8003254 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7fe fa90 	bl	8001774 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2202      	movs	r2, #2
 8003258:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800326a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800327c:	431a      	orrs	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	431a      	orrs	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032a4:	431a      	orrs	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b8:	ea42 0103 	orr.w	r1, r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	0c1a      	lsrs	r2, r3, #16
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f002 0204 	and.w	r2, r2, #4
 80032da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	69da      	ldr	r2, [r3, #28]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e041      	b.n	800339a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d106      	bne.n	8003330 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f839 	bl	80033a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2202      	movs	r2, #2
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3304      	adds	r3, #4
 8003340:	4619      	mov	r1, r3
 8003342:	4610      	mov	r0, r2
 8003344:	f000 fce4 	bl	8003d10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr

080033b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d001      	beq.n	80033cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e03a      	b.n	8003442 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2202      	movs	r2, #2
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0201 	orr.w	r2, r2, #1
 80033e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a18      	ldr	r2, [pc, #96]	; (800344c <HAL_TIM_Base_Start_IT+0x98>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d00e      	beq.n	800340c <HAL_TIM_Base_Start_IT+0x58>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f6:	d009      	beq.n	800340c <HAL_TIM_Base_Start_IT+0x58>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a14      	ldr	r2, [pc, #80]	; (8003450 <HAL_TIM_Base_Start_IT+0x9c>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d004      	beq.n	800340c <HAL_TIM_Base_Start_IT+0x58>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a13      	ldr	r2, [pc, #76]	; (8003454 <HAL_TIM_Base_Start_IT+0xa0>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d111      	bne.n	8003430 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2b06      	cmp	r3, #6
 800341c:	d010      	beq.n	8003440 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f042 0201 	orr.w	r2, r2, #1
 800342c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800342e:	e007      	b.n	8003440 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 0201 	orr.w	r2, r2, #1
 800343e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3714      	adds	r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	bc80      	pop	{r7}
 800344a:	4770      	bx	lr
 800344c:	40012c00 	.word	0x40012c00
 8003450:	40000400 	.word	0x40000400
 8003454:	40000800 	.word	0x40000800

08003458 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e041      	b.n	80034ee <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d106      	bne.n	8003484 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7fe f9c2 	bl	8001808 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3304      	adds	r3, #4
 8003494:	4619      	mov	r1, r3
 8003496:	4610      	mov	r0, r2
 8003498:	f000 fc3a 	bl	8003d10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
	...

080034f8 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d104      	bne.n	8003512 <HAL_TIM_IC_Start+0x1a>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800350e:	b2db      	uxtb	r3, r3
 8003510:	e013      	b.n	800353a <HAL_TIM_IC_Start+0x42>
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	2b04      	cmp	r3, #4
 8003516:	d104      	bne.n	8003522 <HAL_TIM_IC_Start+0x2a>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800351e:	b2db      	uxtb	r3, r3
 8003520:	e00b      	b.n	800353a <HAL_TIM_IC_Start+0x42>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	2b08      	cmp	r3, #8
 8003526:	d104      	bne.n	8003532 <HAL_TIM_IC_Start+0x3a>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800352e:	b2db      	uxtb	r3, r3
 8003530:	e003      	b.n	800353a <HAL_TIM_IC_Start+0x42>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003538:	b2db      	uxtb	r3, r3
 800353a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d104      	bne.n	800354c <HAL_TIM_IC_Start+0x54>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003548:	b2db      	uxtb	r3, r3
 800354a:	e013      	b.n	8003574 <HAL_TIM_IC_Start+0x7c>
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	2b04      	cmp	r3, #4
 8003550:	d104      	bne.n	800355c <HAL_TIM_IC_Start+0x64>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003558:	b2db      	uxtb	r3, r3
 800355a:	e00b      	b.n	8003574 <HAL_TIM_IC_Start+0x7c>
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	2b08      	cmp	r3, #8
 8003560:	d104      	bne.n	800356c <HAL_TIM_IC_Start+0x74>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003568:	b2db      	uxtb	r3, r3
 800356a:	e003      	b.n	8003574 <HAL_TIM_IC_Start+0x7c>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003572:	b2db      	uxtb	r3, r3
 8003574:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003576:	7bfb      	ldrb	r3, [r7, #15]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d102      	bne.n	8003582 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800357c:	7bbb      	ldrb	r3, [r7, #14]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d001      	beq.n	8003586 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e06d      	b.n	8003662 <HAL_TIM_IC_Start+0x16a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d104      	bne.n	8003596 <HAL_TIM_IC_Start+0x9e>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2202      	movs	r2, #2
 8003590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003594:	e013      	b.n	80035be <HAL_TIM_IC_Start+0xc6>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2b04      	cmp	r3, #4
 800359a:	d104      	bne.n	80035a6 <HAL_TIM_IC_Start+0xae>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2202      	movs	r2, #2
 80035a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035a4:	e00b      	b.n	80035be <HAL_TIM_IC_Start+0xc6>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d104      	bne.n	80035b6 <HAL_TIM_IC_Start+0xbe>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035b4:	e003      	b.n	80035be <HAL_TIM_IC_Start+0xc6>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2202      	movs	r2, #2
 80035ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d104      	bne.n	80035ce <HAL_TIM_IC_Start+0xd6>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035cc:	e013      	b.n	80035f6 <HAL_TIM_IC_Start+0xfe>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2b04      	cmp	r3, #4
 80035d2:	d104      	bne.n	80035de <HAL_TIM_IC_Start+0xe6>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035dc:	e00b      	b.n	80035f6 <HAL_TIM_IC_Start+0xfe>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d104      	bne.n	80035ee <HAL_TIM_IC_Start+0xf6>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2202      	movs	r2, #2
 80035e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035ec:	e003      	b.n	80035f6 <HAL_TIM_IC_Start+0xfe>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2202      	movs	r2, #2
 80035f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2201      	movs	r2, #1
 80035fc:	6839      	ldr	r1, [r7, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 fdff 	bl	8004202 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a18      	ldr	r2, [pc, #96]	; (800366c <HAL_TIM_IC_Start+0x174>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d00e      	beq.n	800362c <HAL_TIM_IC_Start+0x134>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003616:	d009      	beq.n	800362c <HAL_TIM_IC_Start+0x134>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a14      	ldr	r2, [pc, #80]	; (8003670 <HAL_TIM_IC_Start+0x178>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d004      	beq.n	800362c <HAL_TIM_IC_Start+0x134>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a13      	ldr	r2, [pc, #76]	; (8003674 <HAL_TIM_IC_Start+0x17c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d111      	bne.n	8003650 <HAL_TIM_IC_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 0307 	and.w	r3, r3, #7
 8003636:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2b06      	cmp	r3, #6
 800363c:	d010      	beq.n	8003660 <HAL_TIM_IC_Start+0x168>
    {
      __HAL_TIM_ENABLE(htim);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f042 0201 	orr.w	r2, r2, #1
 800364c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800364e:	e007      	b.n	8003660 <HAL_TIM_IC_Start+0x168>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 0201 	orr.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	40012c00 	.word	0x40012c00
 8003670:	40000400 	.word	0x40000400
 8003674:	40000800 	.word	0x40000800

08003678 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d104      	bne.n	8003692 <HAL_TIM_IC_Start_IT+0x1a>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800368e:	b2db      	uxtb	r3, r3
 8003690:	e013      	b.n	80036ba <HAL_TIM_IC_Start_IT+0x42>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	2b04      	cmp	r3, #4
 8003696:	d104      	bne.n	80036a2 <HAL_TIM_IC_Start_IT+0x2a>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	e00b      	b.n	80036ba <HAL_TIM_IC_Start_IT+0x42>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2b08      	cmp	r3, #8
 80036a6:	d104      	bne.n	80036b2 <HAL_TIM_IC_Start_IT+0x3a>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	e003      	b.n	80036ba <HAL_TIM_IC_Start_IT+0x42>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d104      	bne.n	80036cc <HAL_TIM_IC_Start_IT+0x54>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	e013      	b.n	80036f4 <HAL_TIM_IC_Start_IT+0x7c>
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	d104      	bne.n	80036dc <HAL_TIM_IC_Start_IT+0x64>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	e00b      	b.n	80036f4 <HAL_TIM_IC_Start_IT+0x7c>
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	2b08      	cmp	r3, #8
 80036e0:	d104      	bne.n	80036ec <HAL_TIM_IC_Start_IT+0x74>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	e003      	b.n	80036f4 <HAL_TIM_IC_Start_IT+0x7c>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80036f6:	7bfb      	ldrb	r3, [r7, #15]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d102      	bne.n	8003702 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80036fc:	7bbb      	ldrb	r3, [r7, #14]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d001      	beq.n	8003706 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e0b3      	b.n	800386e <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d104      	bne.n	8003716 <HAL_TIM_IC_Start_IT+0x9e>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003714:	e013      	b.n	800373e <HAL_TIM_IC_Start_IT+0xc6>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2b04      	cmp	r3, #4
 800371a:	d104      	bne.n	8003726 <HAL_TIM_IC_Start_IT+0xae>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003724:	e00b      	b.n	800373e <HAL_TIM_IC_Start_IT+0xc6>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	2b08      	cmp	r3, #8
 800372a:	d104      	bne.n	8003736 <HAL_TIM_IC_Start_IT+0xbe>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003734:	e003      	b.n	800373e <HAL_TIM_IC_Start_IT+0xc6>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2202      	movs	r2, #2
 800373a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d104      	bne.n	800374e <HAL_TIM_IC_Start_IT+0xd6>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2202      	movs	r2, #2
 8003748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800374c:	e013      	b.n	8003776 <HAL_TIM_IC_Start_IT+0xfe>
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b04      	cmp	r3, #4
 8003752:	d104      	bne.n	800375e <HAL_TIM_IC_Start_IT+0xe6>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2202      	movs	r2, #2
 8003758:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800375c:	e00b      	b.n	8003776 <HAL_TIM_IC_Start_IT+0xfe>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b08      	cmp	r3, #8
 8003762:	d104      	bne.n	800376e <HAL_TIM_IC_Start_IT+0xf6>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2202      	movs	r2, #2
 8003768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800376c:	e003      	b.n	8003776 <HAL_TIM_IC_Start_IT+0xfe>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2202      	movs	r2, #2
 8003772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	2b0c      	cmp	r3, #12
 800377a:	d841      	bhi.n	8003800 <HAL_TIM_IC_Start_IT+0x188>
 800377c:	a201      	add	r2, pc, #4	; (adr r2, 8003784 <HAL_TIM_IC_Start_IT+0x10c>)
 800377e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003782:	bf00      	nop
 8003784:	080037b9 	.word	0x080037b9
 8003788:	08003801 	.word	0x08003801
 800378c:	08003801 	.word	0x08003801
 8003790:	08003801 	.word	0x08003801
 8003794:	080037cb 	.word	0x080037cb
 8003798:	08003801 	.word	0x08003801
 800379c:	08003801 	.word	0x08003801
 80037a0:	08003801 	.word	0x08003801
 80037a4:	080037dd 	.word	0x080037dd
 80037a8:	08003801 	.word	0x08003801
 80037ac:	08003801 	.word	0x08003801
 80037b0:	08003801 	.word	0x08003801
 80037b4:	080037ef 	.word	0x080037ef
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68da      	ldr	r2, [r3, #12]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0202 	orr.w	r2, r2, #2
 80037c6:	60da      	str	r2, [r3, #12]
      break;
 80037c8:	e01b      	b.n	8003802 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68da      	ldr	r2, [r3, #12]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f042 0204 	orr.w	r2, r2, #4
 80037d8:	60da      	str	r2, [r3, #12]
      break;
 80037da:	e012      	b.n	8003802 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68da      	ldr	r2, [r3, #12]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0208 	orr.w	r2, r2, #8
 80037ea:	60da      	str	r2, [r3, #12]
      break;
 80037ec:	e009      	b.n	8003802 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68da      	ldr	r2, [r3, #12]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f042 0210 	orr.w	r2, r2, #16
 80037fc:	60da      	str	r2, [r3, #12]
      break;
 80037fe:	e000      	b.n	8003802 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8003800:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2201      	movs	r2, #1
 8003808:	6839      	ldr	r1, [r7, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f000 fcf9 	bl	8004202 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a18      	ldr	r2, [pc, #96]	; (8003878 <HAL_TIM_IC_Start_IT+0x200>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d00e      	beq.n	8003838 <HAL_TIM_IC_Start_IT+0x1c0>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003822:	d009      	beq.n	8003838 <HAL_TIM_IC_Start_IT+0x1c0>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a14      	ldr	r2, [pc, #80]	; (800387c <HAL_TIM_IC_Start_IT+0x204>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d004      	beq.n	8003838 <HAL_TIM_IC_Start_IT+0x1c0>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a13      	ldr	r2, [pc, #76]	; (8003880 <HAL_TIM_IC_Start_IT+0x208>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d111      	bne.n	800385c <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2b06      	cmp	r3, #6
 8003848:	d010      	beq.n	800386c <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f042 0201 	orr.w	r2, r2, #1
 8003858:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800385a:	e007      	b.n	800386c <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0201 	orr.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40012c00 	.word	0x40012c00
 800387c:	40000400 	.word	0x40000400
 8003880:	40000800 	.word	0x40000800

08003884 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b02      	cmp	r3, #2
 8003898:	d122      	bne.n	80038e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d11b      	bne.n	80038e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f06f 0202 	mvn.w	r2, #2
 80038b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 fa07 	bl	8003cda <HAL_TIM_IC_CaptureCallback>
 80038cc:	e005      	b.n	80038da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f9fa 	bl	8003cc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 fa09 	bl	8003cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	f003 0304 	and.w	r3, r3, #4
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d122      	bne.n	8003934 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d11b      	bne.n	8003934 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f06f 0204 	mvn.w	r2, #4
 8003904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2202      	movs	r2, #2
 800390a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f9dd 	bl	8003cda <HAL_TIM_IC_CaptureCallback>
 8003920:	e005      	b.n	800392e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f9d0 	bl	8003cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 f9df 	bl	8003cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	f003 0308 	and.w	r3, r3, #8
 800393e:	2b08      	cmp	r3, #8
 8003940:	d122      	bne.n	8003988 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f003 0308 	and.w	r3, r3, #8
 800394c:	2b08      	cmp	r3, #8
 800394e:	d11b      	bne.n	8003988 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f06f 0208 	mvn.w	r2, #8
 8003958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2204      	movs	r2, #4
 800395e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f9b3 	bl	8003cda <HAL_TIM_IC_CaptureCallback>
 8003974:	e005      	b.n	8003982 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f9a6 	bl	8003cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 f9b5 	bl	8003cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	f003 0310 	and.w	r3, r3, #16
 8003992:	2b10      	cmp	r3, #16
 8003994:	d122      	bne.n	80039dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f003 0310 	and.w	r3, r3, #16
 80039a0:	2b10      	cmp	r3, #16
 80039a2:	d11b      	bne.n	80039dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f06f 0210 	mvn.w	r2, #16
 80039ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2208      	movs	r2, #8
 80039b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f989 	bl	8003cda <HAL_TIM_IC_CaptureCallback>
 80039c8:	e005      	b.n	80039d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f97c 	bl	8003cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f98b 	bl	8003cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d10e      	bne.n	8003a08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d107      	bne.n	8003a08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f06f 0201 	mvn.w	r2, #1
 8003a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7fd fe26 	bl	8001654 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a12:	2b80      	cmp	r3, #128	; 0x80
 8003a14:	d10e      	bne.n	8003a34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a20:	2b80      	cmp	r3, #128	; 0x80
 8003a22:	d107      	bne.n	8003a34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 fc73 	bl	800431a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3e:	2b40      	cmp	r3, #64	; 0x40
 8003a40:	d10e      	bne.n	8003a60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4c:	2b40      	cmp	r3, #64	; 0x40
 8003a4e:	d107      	bne.n	8003a60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f94f 	bl	8003cfe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	f003 0320 	and.w	r3, r3, #32
 8003a6a:	2b20      	cmp	r3, #32
 8003a6c:	d10e      	bne.n	8003a8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	f003 0320 	and.w	r3, r3, #32
 8003a78:	2b20      	cmp	r3, #32
 8003a7a:	d107      	bne.n	8003a8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f06f 0220 	mvn.w	r2, #32
 8003a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 fc3e 	bl	8004308 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a8c:	bf00      	nop
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d101      	bne.n	8003aae <HAL_TIM_IC_ConfigChannel+0x1a>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e082      	b.n	8003bb4 <HAL_TIM_IC_ConfigChannel+0x120>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d11b      	bne.n	8003af4 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6818      	ldr	r0, [r3, #0]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	6819      	ldr	r1, [r3, #0]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f000 fa10 	bl	8003ef0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	699a      	ldr	r2, [r3, #24]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 020c 	bic.w	r2, r2, #12
 8003ade:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6999      	ldr	r1, [r3, #24]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	619a      	str	r2, [r3, #24]
 8003af2:	e05a      	b.n	8003baa <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	d11c      	bne.n	8003b34 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6818      	ldr	r0, [r3, #0]
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	6819      	ldr	r1, [r3, #0]
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f000 fa79 	bl	8004000 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	699a      	ldr	r2, [r3, #24]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003b1c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6999      	ldr	r1, [r3, #24]
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	021a      	lsls	r2, r3, #8
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	619a      	str	r2, [r3, #24]
 8003b32:	e03a      	b.n	8003baa <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b08      	cmp	r3, #8
 8003b38:	d11b      	bne.n	8003b72 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6818      	ldr	r0, [r3, #0]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	6819      	ldr	r1, [r3, #0]
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f000 fac4 	bl	80040d6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	69da      	ldr	r2, [r3, #28]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 020c 	bic.w	r2, r2, #12
 8003b5c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	69d9      	ldr	r1, [r3, #28]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	61da      	str	r2, [r3, #28]
 8003b70:	e01b      	b.n	8003baa <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6818      	ldr	r0, [r3, #0]
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	6819      	ldr	r1, [r3, #0]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f000 fae3 	bl	800414c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	69da      	ldr	r2, [r3, #28]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003b94:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	69d9      	ldr	r1, [r3, #28]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	021a      	lsls	r2, r3, #8
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	e031      	b.n	8003c38 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003be4:	6839      	ldr	r1, [r7, #0]
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f8f4 	bl	8003dd4 <TIM_SlaveTimer_SetConfig>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d009      	beq.n	8003c06 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e018      	b.n	8003c38 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68da      	ldr	r2, [r3, #12]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c14:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68da      	ldr	r2, [r3, #12]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c24:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	2b0c      	cmp	r3, #12
 8003c52:	d831      	bhi.n	8003cb8 <HAL_TIM_ReadCapturedValue+0x78>
 8003c54:	a201      	add	r2, pc, #4	; (adr r2, 8003c5c <HAL_TIM_ReadCapturedValue+0x1c>)
 8003c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5a:	bf00      	nop
 8003c5c:	08003c91 	.word	0x08003c91
 8003c60:	08003cb9 	.word	0x08003cb9
 8003c64:	08003cb9 	.word	0x08003cb9
 8003c68:	08003cb9 	.word	0x08003cb9
 8003c6c:	08003c9b 	.word	0x08003c9b
 8003c70:	08003cb9 	.word	0x08003cb9
 8003c74:	08003cb9 	.word	0x08003cb9
 8003c78:	08003cb9 	.word	0x08003cb9
 8003c7c:	08003ca5 	.word	0x08003ca5
 8003c80:	08003cb9 	.word	0x08003cb9
 8003c84:	08003cb9 	.word	0x08003cb9
 8003c88:	08003cb9 	.word	0x08003cb9
 8003c8c:	08003caf 	.word	0x08003caf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c96:	60fb      	str	r3, [r7, #12]

      break;
 8003c98:	e00f      	b.n	8003cba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca0:	60fb      	str	r3, [r7, #12]

      break;
 8003ca2:	e00a      	b.n	8003cba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003caa:	60fb      	str	r3, [r7, #12]

      break;
 8003cac:	e005      	b.n	8003cba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb4:	60fb      	str	r3, [r7, #12]

      break;
 8003cb6:	e000      	b.n	8003cba <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003cb8:	bf00      	nop
  }

  return tmpreg;
 8003cba:	68fb      	ldr	r3, [r7, #12]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3714      	adds	r7, #20
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bc80      	pop	{r7}
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop

08003cc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc80      	pop	{r7}
 8003cd8:	4770      	bx	lr

08003cda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bc80      	pop	{r7}
 8003cea:	4770      	bx	lr

08003cec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bc80      	pop	{r7}
 8003cfc:	4770      	bx	lr

08003cfe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bc80      	pop	{r7}
 8003d0e:	4770      	bx	lr

08003d10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a29      	ldr	r2, [pc, #164]	; (8003dc8 <TIM_Base_SetConfig+0xb8>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d00b      	beq.n	8003d40 <TIM_Base_SetConfig+0x30>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d2e:	d007      	beq.n	8003d40 <TIM_Base_SetConfig+0x30>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a26      	ldr	r2, [pc, #152]	; (8003dcc <TIM_Base_SetConfig+0xbc>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d003      	beq.n	8003d40 <TIM_Base_SetConfig+0x30>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a25      	ldr	r2, [pc, #148]	; (8003dd0 <TIM_Base_SetConfig+0xc0>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d108      	bne.n	8003d52 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a1c      	ldr	r2, [pc, #112]	; (8003dc8 <TIM_Base_SetConfig+0xb8>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d00b      	beq.n	8003d72 <TIM_Base_SetConfig+0x62>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d60:	d007      	beq.n	8003d72 <TIM_Base_SetConfig+0x62>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a19      	ldr	r2, [pc, #100]	; (8003dcc <TIM_Base_SetConfig+0xbc>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d003      	beq.n	8003d72 <TIM_Base_SetConfig+0x62>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a18      	ldr	r2, [pc, #96]	; (8003dd0 <TIM_Base_SetConfig+0xc0>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d108      	bne.n	8003d84 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a07      	ldr	r2, [pc, #28]	; (8003dc8 <TIM_Base_SetConfig+0xb8>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d103      	bne.n	8003db8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	691a      	ldr	r2, [r3, #16]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	615a      	str	r2, [r3, #20]
}
 8003dbe:	bf00      	nop
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bc80      	pop	{r7}
 8003dc6:	4770      	bx	lr
 8003dc8:	40012c00 	.word	0x40012c00
 8003dcc:	40000400 	.word	0x40000400
 8003dd0:	40000800 	.word	0x40000800

08003dd4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dec:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f023 0307 	bic.w	r3, r3, #7
 8003dfe:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	2b70      	cmp	r3, #112	; 0x70
 8003e18:	d01a      	beq.n	8003e50 <TIM_SlaveTimer_SetConfig+0x7c>
 8003e1a:	2b70      	cmp	r3, #112	; 0x70
 8003e1c:	d860      	bhi.n	8003ee0 <TIM_SlaveTimer_SetConfig+0x10c>
 8003e1e:	2b60      	cmp	r3, #96	; 0x60
 8003e20:	d054      	beq.n	8003ecc <TIM_SlaveTimer_SetConfig+0xf8>
 8003e22:	2b60      	cmp	r3, #96	; 0x60
 8003e24:	d85c      	bhi.n	8003ee0 <TIM_SlaveTimer_SetConfig+0x10c>
 8003e26:	2b50      	cmp	r3, #80	; 0x50
 8003e28:	d046      	beq.n	8003eb8 <TIM_SlaveTimer_SetConfig+0xe4>
 8003e2a:	2b50      	cmp	r3, #80	; 0x50
 8003e2c:	d858      	bhi.n	8003ee0 <TIM_SlaveTimer_SetConfig+0x10c>
 8003e2e:	2b40      	cmp	r3, #64	; 0x40
 8003e30:	d019      	beq.n	8003e66 <TIM_SlaveTimer_SetConfig+0x92>
 8003e32:	2b40      	cmp	r3, #64	; 0x40
 8003e34:	d854      	bhi.n	8003ee0 <TIM_SlaveTimer_SetConfig+0x10c>
 8003e36:	2b30      	cmp	r3, #48	; 0x30
 8003e38:	d054      	beq.n	8003ee4 <TIM_SlaveTimer_SetConfig+0x110>
 8003e3a:	2b30      	cmp	r3, #48	; 0x30
 8003e3c:	d850      	bhi.n	8003ee0 <TIM_SlaveTimer_SetConfig+0x10c>
 8003e3e:	2b20      	cmp	r3, #32
 8003e40:	d050      	beq.n	8003ee4 <TIM_SlaveTimer_SetConfig+0x110>
 8003e42:	2b20      	cmp	r3, #32
 8003e44:	d84c      	bhi.n	8003ee0 <TIM_SlaveTimer_SetConfig+0x10c>
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d04c      	beq.n	8003ee4 <TIM_SlaveTimer_SetConfig+0x110>
 8003e4a:	2b10      	cmp	r3, #16
 8003e4c:	d04a      	beq.n	8003ee4 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8003e4e:	e047      	b.n	8003ee0 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6818      	ldr	r0, [r3, #0]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	68d9      	ldr	r1, [r3, #12]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	689a      	ldr	r2, [r3, #8]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	f000 f9b0 	bl	80041c4 <TIM_ETR_SetConfig>
      break;
 8003e64:	e03f      	b.n	8003ee6 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2b05      	cmp	r3, #5
 8003e6c:	d101      	bne.n	8003e72 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e03a      	b.n	8003ee8 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6a1a      	ldr	r2, [r3, #32]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0201 	bic.w	r2, r2, #1
 8003e88:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e98:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	011b      	lsls	r3, r3, #4
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	621a      	str	r2, [r3, #32]
      break;
 8003eb6:	e016      	b.n	8003ee6 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	6899      	ldr	r1, [r3, #8]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	f000 f86d 	bl	8003fa4 <TIM_TI1_ConfigInputStage>
      break;
 8003eca:	e00c      	b.n	8003ee6 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6818      	ldr	r0, [r3, #0]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	6899      	ldr	r1, [r3, #8]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	f000 f8cd 	bl	8004078 <TIM_TI2_ConfigInputStage>
      break;
 8003ede:	e002      	b.n	8003ee6 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8003ee0:	bf00      	nop
 8003ee2:	e000      	b.n	8003ee6 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8003ee4:	bf00      	nop
  }
  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3718      	adds	r7, #24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b087      	sub	sp, #28
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
 8003efc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	f023 0201 	bic.w	r2, r3, #1
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	4a1f      	ldr	r2, [pc, #124]	; (8003f98 <TIM_TI1_SetConfig+0xa8>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d00b      	beq.n	8003f36 <TIM_TI1_SetConfig+0x46>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f24:	d007      	beq.n	8003f36 <TIM_TI1_SetConfig+0x46>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	4a1c      	ldr	r2, [pc, #112]	; (8003f9c <TIM_TI1_SetConfig+0xac>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d003      	beq.n	8003f36 <TIM_TI1_SetConfig+0x46>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	4a1b      	ldr	r2, [pc, #108]	; (8003fa0 <TIM_TI1_SetConfig+0xb0>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d101      	bne.n	8003f3a <TIM_TI1_SetConfig+0x4a>
 8003f36:	2301      	movs	r3, #1
 8003f38:	e000      	b.n	8003f3c <TIM_TI1_SetConfig+0x4c>
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d008      	beq.n	8003f52 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	f023 0303 	bic.w	r3, r3, #3
 8003f46:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	617b      	str	r3, [r7, #20]
 8003f50:	e003      	b.n	8003f5a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f043 0301 	orr.w	r3, r3, #1
 8003f58:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	011b      	lsls	r3, r3, #4
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	f023 030a 	bic.w	r3, r3, #10
 8003f74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f003 030a 	and.w	r3, r3, #10
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	621a      	str	r2, [r3, #32]
}
 8003f8e:	bf00      	nop
 8003f90:	371c      	adds	r7, #28
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bc80      	pop	{r7}
 8003f96:	4770      	bx	lr
 8003f98:	40012c00 	.word	0x40012c00
 8003f9c:	40000400 	.word	0x40000400
 8003fa0:	40000800 	.word	0x40000800

08003fa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b087      	sub	sp, #28
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	f023 0201 	bic.w	r2, r3, #1
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	011b      	lsls	r3, r3, #4
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f023 030a 	bic.w	r3, r3, #10
 8003fe0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	621a      	str	r2, [r3, #32]
}
 8003ff6:	bf00      	nop
 8003ff8:	371c      	adds	r7, #28
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bc80      	pop	{r7}
 8003ffe:	4770      	bx	lr

08004000 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004000:	b480      	push	{r7}
 8004002:	b087      	sub	sp, #28
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
 800400c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	f023 0210 	bic.w	r2, r3, #16
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800402c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	021b      	lsls	r3, r3, #8
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	4313      	orrs	r3, r2
 8004036:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800403e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	031b      	lsls	r3, r3, #12
 8004044:	b29b      	uxth	r3, r3
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	4313      	orrs	r3, r2
 800404a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004052:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	011b      	lsls	r3, r3, #4
 8004058:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	4313      	orrs	r3, r2
 8004060:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	621a      	str	r2, [r3, #32]
}
 800406e:	bf00      	nop
 8004070:	371c      	adds	r7, #28
 8004072:	46bd      	mov	sp, r7
 8004074:	bc80      	pop	{r7}
 8004076:	4770      	bx	lr

08004078 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004078:	b480      	push	{r7}
 800407a:	b087      	sub	sp, #28
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	f023 0210 	bic.w	r2, r3, #16
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	031b      	lsls	r3, r3, #12
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	011b      	lsls	r3, r3, #4
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	4313      	orrs	r3, r2
 80040be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	621a      	str	r2, [r3, #32]
}
 80040cc:	bf00      	nop
 80040ce:	371c      	adds	r7, #28
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bc80      	pop	{r7}
 80040d4:	4770      	bx	lr

080040d6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b087      	sub	sp, #28
 80040da:	af00      	add	r7, sp, #0
 80040dc:	60f8      	str	r0, [r7, #12]
 80040de:	60b9      	str	r1, [r7, #8]
 80040e0:	607a      	str	r2, [r7, #4]
 80040e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	69db      	ldr	r3, [r3, #28]
 80040f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f023 0303 	bic.w	r3, r3, #3
 8004102:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4313      	orrs	r3, r2
 800410a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004112:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	011b      	lsls	r3, r3, #4
 8004118:	b2db      	uxtb	r3, r3
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	4313      	orrs	r3, r2
 800411e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004126:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	021b      	lsls	r3, r3, #8
 800412c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	4313      	orrs	r3, r2
 8004134:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	621a      	str	r2, [r3, #32]
}
 8004142:	bf00      	nop
 8004144:	371c      	adds	r7, #28
 8004146:	46bd      	mov	sp, r7
 8004148:	bc80      	pop	{r7}
 800414a:	4770      	bx	lr

0800414c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004178:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	021b      	lsls	r3, r3, #8
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	4313      	orrs	r3, r2
 8004182:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800418a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	031b      	lsls	r3, r3, #12
 8004190:	b29b      	uxth	r3, r3
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	4313      	orrs	r3, r2
 8004196:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800419e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	031b      	lsls	r3, r3, #12
 80041a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	621a      	str	r2, [r3, #32]
}
 80041ba:	bf00      	nop
 80041bc:	371c      	adds	r7, #28
 80041be:	46bd      	mov	sp, r7
 80041c0:	bc80      	pop	{r7}
 80041c2:	4770      	bx	lr

080041c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b087      	sub	sp, #28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
 80041d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	021a      	lsls	r2, r3, #8
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	431a      	orrs	r2, r3
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	609a      	str	r2, [r3, #8]
}
 80041f8:	bf00      	nop
 80041fa:	371c      	adds	r7, #28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bc80      	pop	{r7}
 8004200:	4770      	bx	lr

08004202 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004202:	b480      	push	{r7}
 8004204:	b087      	sub	sp, #28
 8004206:	af00      	add	r7, sp, #0
 8004208:	60f8      	str	r0, [r7, #12]
 800420a:	60b9      	str	r1, [r7, #8]
 800420c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	f003 031f 	and.w	r3, r3, #31
 8004214:	2201      	movs	r2, #1
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6a1a      	ldr	r2, [r3, #32]
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	43db      	mvns	r3, r3
 8004224:	401a      	ands	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6a1a      	ldr	r2, [r3, #32]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	f003 031f 	and.w	r3, r3, #31
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	fa01 f303 	lsl.w	r3, r1, r3
 800423a:	431a      	orrs	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	621a      	str	r2, [r3, #32]
}
 8004240:	bf00      	nop
 8004242:	371c      	adds	r7, #28
 8004244:	46bd      	mov	sp, r7
 8004246:	bc80      	pop	{r7}
 8004248:	4770      	bx	lr
	...

0800424c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800425c:	2b01      	cmp	r3, #1
 800425e:	d101      	bne.n	8004264 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004260:	2302      	movs	r3, #2
 8004262:	e046      	b.n	80042f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2202      	movs	r2, #2
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800428a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	4313      	orrs	r3, r2
 8004294:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a16      	ldr	r2, [pc, #88]	; (80042fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d00e      	beq.n	80042c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b0:	d009      	beq.n	80042c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a12      	ldr	r2, [pc, #72]	; (8004300 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d004      	beq.n	80042c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a10      	ldr	r2, [pc, #64]	; (8004304 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d10c      	bne.n	80042e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bc80      	pop	{r7}
 80042fa:	4770      	bx	lr
 80042fc:	40012c00 	.word	0x40012c00
 8004300:	40000400 	.word	0x40000400
 8004304:	40000800 	.word	0x40000800

08004308 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	bc80      	pop	{r7}
 8004318:	4770      	bx	lr

0800431a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800431a:	b480      	push	{r7}
 800431c:	b083      	sub	sp, #12
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004322:	bf00      	nop
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	bc80      	pop	{r7}
 800432a:	4770      	bx	lr

0800432c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e03f      	b.n	80043be <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d106      	bne.n	8004358 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7fd fae6 	bl	8001924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2224      	movs	r2, #36	; 0x24
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800436e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 f829 	bl	80043c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	691a      	ldr	r2, [r3, #16]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004384:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	695a      	ldr	r2, [r3, #20]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004394:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68da      	ldr	r2, [r3, #12]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2220      	movs	r2, #32
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2220      	movs	r2, #32
 80043b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
	...

080043c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68da      	ldr	r2, [r3, #12]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689a      	ldr	r2, [r3, #8]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	431a      	orrs	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004402:	f023 030c 	bic.w	r3, r3, #12
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	6812      	ldr	r2, [r2, #0]
 800440a:	68b9      	ldr	r1, [r7, #8]
 800440c:	430b      	orrs	r3, r1
 800440e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	699a      	ldr	r2, [r3, #24]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a2c      	ldr	r2, [pc, #176]	; (80044dc <UART_SetConfig+0x114>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d103      	bne.n	8004438 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004430:	f7fe fe82 	bl	8003138 <HAL_RCC_GetPCLK2Freq>
 8004434:	60f8      	str	r0, [r7, #12]
 8004436:	e002      	b.n	800443e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004438:	f7fe fe6a 	bl	8003110 <HAL_RCC_GetPCLK1Freq>
 800443c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	4613      	mov	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	009a      	lsls	r2, r3, #2
 8004448:	441a      	add	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	fbb2 f3f3 	udiv	r3, r2, r3
 8004454:	4a22      	ldr	r2, [pc, #136]	; (80044e0 <UART_SetConfig+0x118>)
 8004456:	fba2 2303 	umull	r2, r3, r2, r3
 800445a:	095b      	lsrs	r3, r3, #5
 800445c:	0119      	lsls	r1, r3, #4
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	4613      	mov	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	009a      	lsls	r2, r3, #2
 8004468:	441a      	add	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	fbb2 f2f3 	udiv	r2, r2, r3
 8004474:	4b1a      	ldr	r3, [pc, #104]	; (80044e0 <UART_SetConfig+0x118>)
 8004476:	fba3 0302 	umull	r0, r3, r3, r2
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	2064      	movs	r0, #100	; 0x64
 800447e:	fb00 f303 	mul.w	r3, r0, r3
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	011b      	lsls	r3, r3, #4
 8004486:	3332      	adds	r3, #50	; 0x32
 8004488:	4a15      	ldr	r2, [pc, #84]	; (80044e0 <UART_SetConfig+0x118>)
 800448a:	fba2 2303 	umull	r2, r3, r2, r3
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004494:	4419      	add	r1, r3
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	4613      	mov	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	009a      	lsls	r2, r3, #2
 80044a0:	441a      	add	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80044ac:	4b0c      	ldr	r3, [pc, #48]	; (80044e0 <UART_SetConfig+0x118>)
 80044ae:	fba3 0302 	umull	r0, r3, r3, r2
 80044b2:	095b      	lsrs	r3, r3, #5
 80044b4:	2064      	movs	r0, #100	; 0x64
 80044b6:	fb00 f303 	mul.w	r3, r0, r3
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	011b      	lsls	r3, r3, #4
 80044be:	3332      	adds	r3, #50	; 0x32
 80044c0:	4a07      	ldr	r2, [pc, #28]	; (80044e0 <UART_SetConfig+0x118>)
 80044c2:	fba2 2303 	umull	r2, r3, r2, r3
 80044c6:	095b      	lsrs	r3, r3, #5
 80044c8:	f003 020f 	and.w	r2, r3, #15
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	440a      	add	r2, r1
 80044d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80044d4:	bf00      	nop
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	40013800 	.word	0x40013800
 80044e0:	51eb851f 	.word	0x51eb851f

080044e4 <hlw8012_sel_high_current>:
    double hlw8012_getvoltage_multiplier() { return _voltage_multiplier; };

double hlw8012_getpower_multiplier() { return _power_multiplier; };

void hlw8012_sel_high_current()
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOB, GPIO_Pin, PinState)
	GPIOB->ODR |= (GPIO_ODR_ODR7);
 80044e8:	4b04      	ldr	r3, [pc, #16]	; (80044fc <hlw8012_sel_high_current+0x18>)
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	4a03      	ldr	r2, [pc, #12]	; (80044fc <hlw8012_sel_high_current+0x18>)
 80044ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044f2:	60d3      	str	r3, [r2, #12]
	//GPIOC->ODR |= (GPIO_ODR_ODR13);
}
 80044f4:	bf00      	nop
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bc80      	pop	{r7}
 80044fa:	4770      	bx	lr
 80044fc:	40010c00 	.word	0x40010c00

08004500 <hlw8012_sel_low_volatge>:
void hlw8012_sel_low_volatge()
{
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0
	GPIOB->ODR &= ~(GPIO_ODR_ODR7);
 8004504:	4b04      	ldr	r3, [pc, #16]	; (8004518 <hlw8012_sel_low_volatge+0x18>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	4a03      	ldr	r2, [pc, #12]	; (8004518 <hlw8012_sel_low_volatge+0x18>)
 800450a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800450e:	60d3      	str	r3, [r2, #12]
	//GPIOC->ODR &= ~(GPIO_ODR_ODR13);
}
 8004510:	bf00      	nop
 8004512:	46bd      	mov	sp, r7
 8004514:	bc80      	pop	{r7}
 8004516:	4770      	bx	lr
 8004518:	40010c00 	.word	0x40010c00

0800451c <hlw8012_getcurrent>:
	unsigned long gb_timeIn = HAL_GetTick();	// Timestamp coming into function
	while (HAL_GetTick() - gb_timeIn < mseconds) HAL_Delay(1); // While we haven't timed out
}

float hlw8012_getcurrent()
{
 800451c:	b5b0      	push	{r4, r5, r7, lr}
 800451e:	af00      	add	r7, sp, #0
	//if(_power == 0){
	//     _current_pulse_width = 0;
	//}
	//else
	{
	hlw8012_sel_high_current();
 8004520:	f7ff ffe0 	bl	80044e4 <hlw8012_sel_high_current>
	_current_pulse_width = pulseIN_current();
 8004524:	f000 f838 	bl	8004598 <pulseIN_current>
 8004528:	4603      	mov	r3, r0
 800452a:	4618      	mov	r0, r3
 800452c:	f7fc fd14 	bl	8000f58 <__aeabi_f2uiz>
 8004530:	4603      	mov	r3, r0
 8004532:	4a16      	ldr	r2, [pc, #88]	; (800458c <hlw8012_getcurrent+0x70>)
 8004534:	6013      	str	r3, [r2, #0]
	_current = (_current_pulse_width > 0) ? (_current_multiplier / _current_pulse_width )*2: 0;
 8004536:	4b15      	ldr	r3, [pc, #84]	; (800458c <hlw8012_getcurrent+0x70>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d01d      	beq.n	800457a <hlw8012_getcurrent+0x5e>
 800453e:	4b14      	ldr	r3, [pc, #80]	; (8004590 <hlw8012_getcurrent+0x74>)
 8004540:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004544:	4b11      	ldr	r3, [pc, #68]	; (800458c <hlw8012_getcurrent+0x70>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4618      	mov	r0, r3
 800454a:	f7fb ff43 	bl	80003d4 <__aeabi_ui2d>
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	4620      	mov	r0, r4
 8004554:	4629      	mov	r1, r5
 8004556:	f7fc f8e1 	bl	800071c <__aeabi_ddiv>
 800455a:	4602      	mov	r2, r0
 800455c:	460b      	mov	r3, r1
 800455e:	4610      	mov	r0, r2
 8004560:	4619      	mov	r1, r3
 8004562:	4602      	mov	r2, r0
 8004564:	460b      	mov	r3, r1
 8004566:	f7fb fdf9 	bl	800015c <__adddf3>
 800456a:	4602      	mov	r2, r0
 800456c:	460b      	mov	r3, r1
 800456e:	4610      	mov	r0, r2
 8004570:	4619      	mov	r1, r3
 8004572:	f7fc fa43 	bl	80009fc <__aeabi_d2f>
 8004576:	4603      	mov	r3, r0
 8004578:	e001      	b.n	800457e <hlw8012_getcurrent+0x62>
 800457a:	f04f 0300 	mov.w	r3, #0
 800457e:	4a05      	ldr	r2, [pc, #20]	; (8004594 <hlw8012_getcurrent+0x78>)
 8004580:	6013      	str	r3, [r2, #0]
	//return _current;
	}
	return _current;
 8004582:	4b04      	ldr	r3, [pc, #16]	; (8004594 <hlw8012_getcurrent+0x78>)
 8004584:	681b      	ldr	r3, [r3, #0]
}
 8004586:	4618      	mov	r0, r3
 8004588:	bdb0      	pop	{r4, r5, r7, pc}
 800458a:	bf00      	nop
 800458c:	2000036c 	.word	0x2000036c
 8004590:	200016f8 	.word	0x200016f8
 8004594:	20000374 	.word	0x20000374

08004598 <pulseIN_current>:
/*
 * Period is taken from TIM4_IRQ
 *
 */
float pulseIN_current()
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
unsigned long gb_pulse_current = HAL_GetTick();	// Timestamp coming into function
 800459e:	f7fd fb13 	bl	8001bc8 <HAL_GetTick>
 80045a2:	6078      	str	r0, [r7, #4]
//tim4_ch1_capture_config();
	while (HAL_GetTick() - gb_pulse_current < 2000 )
 80045a4:	e008      	b.n	80045b8 <pulseIN_current+0x20>
	{
	tim3_ch2_capture_config();
 80045a6:	f000 fb63 	bl	8004c70 <tim3_ch2_capture_config>
		tim4_ch1_capture_config();
 80045aa:	f000 fb21 	bl	8004bf0 <tim4_ch1_capture_config>
	//	 HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
	Current_Period = TIM3_getPeriod();
 80045ae:	f000 fc17 	bl	8004de0 <TIM3_getPeriod>
 80045b2:	4603      	mov	r3, r0
 80045b4:	4a0a      	ldr	r2, [pc, #40]	; (80045e0 <pulseIN_current+0x48>)
 80045b6:	6013      	str	r3, [r2, #0]
	while (HAL_GetTick() - gb_pulse_current < 2000 )
 80045b8:	f7fd fb06 	bl	8001bc8 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80045c6:	d3ee      	bcc.n	80045a6 <pulseIN_current+0xe>
	}
	//tim4_ch1_capture_unconfig();
	tim3_ch2_capture_unconfig();
 80045c8:	f000 fb72 	bl	8004cb0 <tim3_ch2_capture_unconfig>

	//reinitialise Period to 0
	TIM4_setPeriod(0);
 80045cc:	2000      	movs	r0, #0
 80045ce:	f000 fca3 	bl	8004f18 <TIM4_setPeriod>
	//}
	return Current_Period;
 80045d2:	4b03      	ldr	r3, [pc, #12]	; (80045e0 <pulseIN_current+0x48>)
 80045d4:	681b      	ldr	r3, [r3, #0]

}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	20000380 	.word	0x20000380

080045e4 <hlw8012_getvoltage>:
float hlw8012_getvoltage()
{
 80045e4:	b5b0      	push	{r4, r5, r7, lr}
 80045e6:	af00      	add	r7, sp, #0
	hlw8012_sel_low_volatge();
 80045e8:	f7ff ff8a 	bl	8004500 <hlw8012_sel_low_volatge>
	_voltage_pulse_width = pulseIN_voltage();
 80045ec:	f000 f83a 	bl	8004664 <pulseIN_voltage>
 80045f0:	4603      	mov	r3, r0
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fc fcb0 	bl	8000f58 <__aeabi_f2uiz>
 80045f8:	4603      	mov	r3, r0
 80045fa:	4a17      	ldr	r2, [pc, #92]	; (8004658 <hlw8012_getvoltage+0x74>)
 80045fc:	6013      	str	r3, [r2, #0]
	_voltage = (_voltage_pulse_width > 0) ? _voltage_multiplier / _voltage_pulse_width/2: 0;
 80045fe:	4b16      	ldr	r3, [pc, #88]	; (8004658 <hlw8012_getvoltage+0x74>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d01f      	beq.n	8004646 <hlw8012_getvoltage+0x62>
 8004606:	4b15      	ldr	r3, [pc, #84]	; (800465c <hlw8012_getvoltage+0x78>)
 8004608:	e9d3 4500 	ldrd	r4, r5, [r3]
 800460c:	4b12      	ldr	r3, [pc, #72]	; (8004658 <hlw8012_getvoltage+0x74>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4618      	mov	r0, r3
 8004612:	f7fb fedf 	bl	80003d4 <__aeabi_ui2d>
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	4620      	mov	r0, r4
 800461c:	4629      	mov	r1, r5
 800461e:	f7fc f87d 	bl	800071c <__aeabi_ddiv>
 8004622:	4602      	mov	r2, r0
 8004624:	460b      	mov	r3, r1
 8004626:	4610      	mov	r0, r2
 8004628:	4619      	mov	r1, r3
 800462a:	f04f 0200 	mov.w	r2, #0
 800462e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004632:	f7fc f873 	bl	800071c <__aeabi_ddiv>
 8004636:	4602      	mov	r2, r0
 8004638:	460b      	mov	r3, r1
 800463a:	4610      	mov	r0, r2
 800463c:	4619      	mov	r1, r3
 800463e:	f7fc f9dd 	bl	80009fc <__aeabi_d2f>
 8004642:	4603      	mov	r3, r0
 8004644:	e001      	b.n	800464a <hlw8012_getvoltage+0x66>
 8004646:	f04f 0300 	mov.w	r3, #0
 800464a:	4a05      	ldr	r2, [pc, #20]	; (8004660 <hlw8012_getvoltage+0x7c>)
 800464c:	6013      	str	r3, [r2, #0]
	return _voltage;
 800464e:	4b04      	ldr	r3, [pc, #16]	; (8004660 <hlw8012_getvoltage+0x7c>)
 8004650:	681b      	ldr	r3, [r3, #0]
}
 8004652:	4618      	mov	r0, r3
 8004654:	bdb0      	pop	{r4, r5, r7, pc}
 8004656:	bf00      	nop
 8004658:	20000368 	.word	0x20000368
 800465c:	20001708 	.word	0x20001708
 8004660:	20000378 	.word	0x20000378

08004664 <pulseIN_voltage>:
float voltage_Period = 0;
float pulseIN_voltage()
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
	unsigned long gb_pulse_voltage = HAL_GetTick();	// Timestamp coming into function
 800466a:	f7fd faad 	bl	8001bc8 <HAL_GetTick>
 800466e:	6078      	str	r0, [r7, #4]
		while (HAL_GetTick() - gb_pulse_voltage < 2000 )
 8004670:	e006      	b.n	8004680 <pulseIN_voltage+0x1c>
		{
		//	tim4_ch1_capture_config();
	tim3_ch2_capture_config();
 8004672:	f000 fafd 	bl	8004c70 <tim3_ch2_capture_config>
		// HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
	voltage_Period = TIM3_getPeriod();
 8004676:	f000 fbb3 	bl	8004de0 <TIM3_getPeriod>
 800467a:	4603      	mov	r3, r0
 800467c:	4a0a      	ldr	r2, [pc, #40]	; (80046a8 <pulseIN_voltage+0x44>)
 800467e:	6013      	str	r3, [r2, #0]
		while (HAL_GetTick() - gb_pulse_voltage < 2000 )
 8004680:	f7fd faa2 	bl	8001bc8 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800468e:	d3f0      	bcc.n	8004672 <pulseIN_voltage+0xe>
		}
	//	tim4_ch1_capture_unconfig();
	tim3_ch2_capture_unconfig();
 8004690:	f000 fb0e 	bl	8004cb0 <tim3_ch2_capture_unconfig>

	//reinitilise Period to 0
	TIM4_setPeriod(0);
 8004694:	2000      	movs	r0, #0
 8004696:	f000 fc3f 	bl	8004f18 <TIM4_setPeriod>
	return voltage_Period;
 800469a:	4b03      	ldr	r3, [pc, #12]	; (80046a8 <pulseIN_voltage+0x44>)
 800469c:	681b      	ldr	r3, [r3, #0]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	20000384 	.word	0x20000384

080046ac <hlw8012_getactivepower>:
float hlw8012_getactivepower()
{
 80046ac:	b5b0      	push	{r4, r5, r7, lr}
 80046ae:	af00      	add	r7, sp, #0
	_power_pulse_width = pulseIN_power();
 80046b0:	f000 f83a 	bl	8004728 <pulseIN_power>
 80046b4:	4603      	mov	r3, r0
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7fc fc4e 	bl	8000f58 <__aeabi_f2uiz>
 80046bc:	4603      	mov	r3, r0
 80046be:	4a17      	ldr	r2, [pc, #92]	; (800471c <hlw8012_getactivepower+0x70>)
 80046c0:	6013      	str	r3, [r2, #0]
	_power = (_power_pulse_width > 0) ? _power_multiplier / _power_pulse_width / 2 : 0;
 80046c2:	4b16      	ldr	r3, [pc, #88]	; (800471c <hlw8012_getactivepower+0x70>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d01f      	beq.n	800470a <hlw8012_getactivepower+0x5e>
 80046ca:	4b15      	ldr	r3, [pc, #84]	; (8004720 <hlw8012_getactivepower+0x74>)
 80046cc:	e9d3 4500 	ldrd	r4, r5, [r3]
 80046d0:	4b12      	ldr	r3, [pc, #72]	; (800471c <hlw8012_getactivepower+0x70>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7fb fe7d 	bl	80003d4 <__aeabi_ui2d>
 80046da:	4602      	mov	r2, r0
 80046dc:	460b      	mov	r3, r1
 80046de:	4620      	mov	r0, r4
 80046e0:	4629      	mov	r1, r5
 80046e2:	f7fc f81b 	bl	800071c <__aeabi_ddiv>
 80046e6:	4602      	mov	r2, r0
 80046e8:	460b      	mov	r3, r1
 80046ea:	4610      	mov	r0, r2
 80046ec:	4619      	mov	r1, r3
 80046ee:	f04f 0200 	mov.w	r2, #0
 80046f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80046f6:	f7fc f811 	bl	800071c <__aeabi_ddiv>
 80046fa:	4602      	mov	r2, r0
 80046fc:	460b      	mov	r3, r1
 80046fe:	4610      	mov	r0, r2
 8004700:	4619      	mov	r1, r3
 8004702:	f7fc f97b 	bl	80009fc <__aeabi_d2f>
 8004706:	4603      	mov	r3, r0
 8004708:	e001      	b.n	800470e <hlw8012_getactivepower+0x62>
 800470a:	f04f 0300 	mov.w	r3, #0
 800470e:	4a05      	ldr	r2, [pc, #20]	; (8004724 <hlw8012_getactivepower+0x78>)
 8004710:	6013      	str	r3, [r2, #0]
	return _power;
 8004712:	4b04      	ldr	r3, [pc, #16]	; (8004724 <hlw8012_getactivepower+0x78>)
 8004714:	681b      	ldr	r3, [r3, #0]
}
 8004716:	4618      	mov	r0, r3
 8004718:	bdb0      	pop	{r4, r5, r7, pc}
 800471a:	bf00      	nop
 800471c:	20000370 	.word	0x20000370
 8004720:	20001700 	.word	0x20001700
 8004724:	2000037c 	.word	0x2000037c

08004728 <pulseIN_power>:

float Power_Period = 0;
float pulseIN_power()
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
	unsigned long gb_pulse_voltage = HAL_GetTick();	// Timestamp coming into function
 800472e:	f7fd fa4b 	bl	8001bc8 <HAL_GetTick>
 8004732:	6078      	str	r0, [r7, #4]
			while (HAL_GetTick() - gb_pulse_voltage < 2000 )
 8004734:	e008      	b.n	8004748 <pulseIN_power+0x20>
			{
	//tim4_ch1_capture_config();

				HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);   // main channel
 8004736:	2100      	movs	r1, #0
 8004738:	480d      	ldr	r0, [pc, #52]	; (8004770 <pulseIN_power+0x48>)
 800473a:	f7fe ff9d 	bl	8003678 <HAL_TIM_IC_Start_IT>
	Power_Period = TIM4_getPeriod();
 800473e:	f000 fbe1 	bl	8004f04 <TIM4_getPeriod>
 8004742:	4603      	mov	r3, r0
 8004744:	4a0b      	ldr	r2, [pc, #44]	; (8004774 <pulseIN_power+0x4c>)
 8004746:	6013      	str	r3, [r2, #0]
			while (HAL_GetTick() - gb_pulse_voltage < 2000 )
 8004748:	f7fd fa3e 	bl	8001bc8 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004756:	d3ee      	bcc.n	8004736 <pulseIN_power+0xe>
			}
	tim4_ch1_capture_unconfig();
 8004758:	f000 fa6a 	bl	8004c30 <tim4_ch1_capture_unconfig>

	//reinitilise Period to 0
	TIM3_setPeriod(0);
 800475c:	2000      	movs	r0, #0
 800475e:	f000 fb49 	bl	8004df4 <TIM3_setPeriod>
	return Power_Period;
 8004762:	4b04      	ldr	r3, [pc, #16]	; (8004774 <pulseIN_power+0x4c>)
 8004764:	681b      	ldr	r3, [r3, #0]
}
 8004766:	4618      	mov	r0, r3
 8004768:	3708      	adds	r7, #8
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	2000151c 	.word	0x2000151c
 8004774:	20000388 	.word	0x20000388

08004778 <hlw8012_calculate_default_multiplier>:
{
	  if (_power == 0) hlw8012_getactivepower();
	  if (_power > 0) _power_multiplier *= ((double) value / _power);
}
void hlw8012_calculate_default_multiplier()
{
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0
	 _current_multiplier = ( 1000000.0 * 512 * V_REF / _current_resistor / 24.0 / F_OSC );
 800477c:	4b3a      	ldr	r3, [pc, #232]	; (8004868 <hlw8012_calculate_default_multiplier+0xf0>)
 800477e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004782:	a133      	add	r1, pc, #204	; (adr r1, 8004850 <hlw8012_calculate_default_multiplier+0xd8>)
 8004784:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004788:	f7fb ffc8 	bl	800071c <__aeabi_ddiv>
 800478c:	4602      	mov	r2, r0
 800478e:	460b      	mov	r3, r1
 8004790:	4610      	mov	r0, r2
 8004792:	4619      	mov	r1, r3
 8004794:	f04f 0200 	mov.w	r2, #0
 8004798:	4b34      	ldr	r3, [pc, #208]	; (800486c <hlw8012_calculate_default_multiplier+0xf4>)
 800479a:	f7fb ffbf 	bl	800071c <__aeabi_ddiv>
 800479e:	4602      	mov	r2, r0
 80047a0:	460b      	mov	r3, r1
 80047a2:	4610      	mov	r0, r2
 80047a4:	4619      	mov	r1, r3
 80047a6:	a32c      	add	r3, pc, #176	; (adr r3, 8004858 <hlw8012_calculate_default_multiplier+0xe0>)
 80047a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ac:	f7fb ffb6 	bl	800071c <__aeabi_ddiv>
 80047b0:	4602      	mov	r2, r0
 80047b2:	460b      	mov	r3, r1
 80047b4:	492e      	ldr	r1, [pc, #184]	; (8004870 <hlw8012_calculate_default_multiplier+0xf8>)
 80047b6:	e9c1 2300 	strd	r2, r3, [r1]
	 _voltage_multiplier = ( 1000000.0 * 512 * V_REF * _voltage_resistor / 2.0 / F_OSC );
 80047ba:	4b2e      	ldr	r3, [pc, #184]	; (8004874 <hlw8012_calculate_default_multiplier+0xfc>)
 80047bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047c0:	a323      	add	r3, pc, #140	; (adr r3, 8004850 <hlw8012_calculate_default_multiplier+0xd8>)
 80047c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c6:	f7fb fe7f 	bl	80004c8 <__aeabi_dmul>
 80047ca:	4602      	mov	r2, r0
 80047cc:	460b      	mov	r3, r1
 80047ce:	4610      	mov	r0, r2
 80047d0:	4619      	mov	r1, r3
 80047d2:	f04f 0200 	mov.w	r2, #0
 80047d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80047da:	f7fb ff9f 	bl	800071c <__aeabi_ddiv>
 80047de:	4602      	mov	r2, r0
 80047e0:	460b      	mov	r3, r1
 80047e2:	4610      	mov	r0, r2
 80047e4:	4619      	mov	r1, r3
 80047e6:	a31c      	add	r3, pc, #112	; (adr r3, 8004858 <hlw8012_calculate_default_multiplier+0xe0>)
 80047e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ec:	f7fb ff96 	bl	800071c <__aeabi_ddiv>
 80047f0:	4602      	mov	r2, r0
 80047f2:	460b      	mov	r3, r1
 80047f4:	4920      	ldr	r1, [pc, #128]	; (8004878 <hlw8012_calculate_default_multiplier+0x100>)
 80047f6:	e9c1 2300 	strd	r2, r3, [r1]
	 _power_multiplier = ( 1000000.0 * 128 * V_REF * V_REF * _voltage_resistor / _current_resistor / 48.0 / F_OSC );
 80047fa:	4b1e      	ldr	r3, [pc, #120]	; (8004874 <hlw8012_calculate_default_multiplier+0xfc>)
 80047fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004800:	a317      	add	r3, pc, #92	; (adr r3, 8004860 <hlw8012_calculate_default_multiplier+0xe8>)
 8004802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004806:	f7fb fe5f 	bl	80004c8 <__aeabi_dmul>
 800480a:	4602      	mov	r2, r0
 800480c:	460b      	mov	r3, r1
 800480e:	4610      	mov	r0, r2
 8004810:	4619      	mov	r1, r3
 8004812:	4b15      	ldr	r3, [pc, #84]	; (8004868 <hlw8012_calculate_default_multiplier+0xf0>)
 8004814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004818:	f7fb ff80 	bl	800071c <__aeabi_ddiv>
 800481c:	4602      	mov	r2, r0
 800481e:	460b      	mov	r3, r1
 8004820:	4610      	mov	r0, r2
 8004822:	4619      	mov	r1, r3
 8004824:	f04f 0200 	mov.w	r2, #0
 8004828:	4b14      	ldr	r3, [pc, #80]	; (800487c <hlw8012_calculate_default_multiplier+0x104>)
 800482a:	f7fb ff77 	bl	800071c <__aeabi_ddiv>
 800482e:	4602      	mov	r2, r0
 8004830:	460b      	mov	r3, r1
 8004832:	4610      	mov	r0, r2
 8004834:	4619      	mov	r1, r3
 8004836:	a308      	add	r3, pc, #32	; (adr r3, 8004858 <hlw8012_calculate_default_multiplier+0xe0>)
 8004838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483c:	f7fb ff6e 	bl	800071c <__aeabi_ddiv>
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	490e      	ldr	r1, [pc, #56]	; (8004880 <hlw8012_calculate_default_multiplier+0x108>)
 8004846:	e9c1 2300 	strd	r2, r3, [r1]
}
 800484a:	bf00      	nop
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	00000000 	.word	0x00000000
 8004854:	41d28a18 	.word	0x41d28a18
 8004858:	00000000 	.word	0x00000000
 800485c:	414b4e3c 	.word	0x414b4e3c
 8004860:	00000000 	.word	0x00000000
 8004864:	41c68681 	.word	0x41c68681
 8004868:	20000010 	.word	0x20000010
 800486c:	40380000 	.word	0x40380000
 8004870:	200016f8 	.word	0x200016f8
 8004874:	20000018 	.word	0x20000018
 8004878:	20001708 	.word	0x20001708
 800487c:	40480000 	.word	0x40480000
 8004880:	20001700 	.word	0x20001700

08004884 <hlw8012_setResistors>:

void hlw8012_setResistors( double current, double voltage_upstream, double voltage_downstream)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800488e:	e9c7 2300 	strd	r2, r3, [r7]
	if (voltage_downstream > 0) {
 8004892:	f04f 0200 	mov.w	r2, #0
 8004896:	f04f 0300 	mov.w	r3, #0
 800489a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800489e:	f7fc f8a3 	bl	80009e8 <__aeabi_dcmpgt>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d100      	bne.n	80048aa <hlw8012_setResistors+0x26>
	        _current_resistor = current;
	        _voltage_resistor = (voltage_upstream + voltage_downstream) / voltage_downstream;
	        hlw8012_calculate_default_multiplier();
	    }
}
 80048a8:	e019      	b.n	80048de <hlw8012_setResistors+0x5a>
	        _current_resistor = current;
 80048aa:	490f      	ldr	r1, [pc, #60]	; (80048e8 <hlw8012_setResistors+0x64>)
 80048ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048b0:	e9c1 2300 	strd	r2, r3, [r1]
	        _voltage_resistor = (voltage_upstream + voltage_downstream) / voltage_downstream;
 80048b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048bc:	f7fb fc4e 	bl	800015c <__adddf3>
 80048c0:	4602      	mov	r2, r0
 80048c2:	460b      	mov	r3, r1
 80048c4:	4610      	mov	r0, r2
 80048c6:	4619      	mov	r1, r3
 80048c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048cc:	f7fb ff26 	bl	800071c <__aeabi_ddiv>
 80048d0:	4602      	mov	r2, r0
 80048d2:	460b      	mov	r3, r1
 80048d4:	4905      	ldr	r1, [pc, #20]	; (80048ec <hlw8012_setResistors+0x68>)
 80048d6:	e9c1 2300 	strd	r2, r3, [r1]
	        hlw8012_calculate_default_multiplier();
 80048da:	f7ff ff4d 	bl	8004778 <hlw8012_calculate_default_multiplier>
}
 80048de:	bf00      	nop
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	20000010 	.word	0x20000010
 80048ec:	20000018 	.word	0x20000018

080048f0 <I2C_Master_Send>:
static uint8_t GB_SSD1306_Buffer[GB_SSD1306_WIDTH * GB_SSD1306_HEIGHT / 8]; // buffer of 1024 bytes

I2C_HandleTypeDef hi2c2;

void I2C_Master_Send (uint8_t address, uint8_t *dt, uint16_t cnt)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af02      	add	r7, sp, #8
 80048f6:	4603      	mov	r3, r0
 80048f8:	6039      	str	r1, [r7, #0]
 80048fa:	71fb      	strb	r3, [r7, #7]
 80048fc:	4613      	mov	r3, r2
 80048fe:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, cnt, 1000);
 8004900:	79fb      	ldrb	r3, [r7, #7]
 8004902:	b299      	uxth	r1, r3
 8004904:	88bb      	ldrh	r3, [r7, #4]
 8004906:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800490a:	9200      	str	r2, [sp, #0]
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	4803      	ldr	r0, [pc, #12]	; (800491c <I2C_Master_Send+0x2c>)
 8004910:	f7fd fd24 	bl	800235c <HAL_I2C_Master_Transmit>

}
 8004914:	bf00      	nop
 8004916:	3708      	adds	r7, #8
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	20001568 	.word	0x20001568

08004920 <ssd1306_init>:

/* Private variable */
static GB_SSD1306_t GB_SSD1306;

void ssd1306_init()
{
 8004920:	b580      	push	{r7, lr}
 8004922:	af00      	add	r7, sp, #0

	ssd1306_sendcommand(GB_SSD1306_DISPLAY_OFF); //0xAE
 8004924:	20ae      	movs	r0, #174	; 0xae
 8004926:	f000 f855 	bl	80049d4 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_DISPLAY_CLOCK_DIV); //0xD5
 800492a:	20d5      	movs	r0, #213	; 0xd5
 800492c:	f000 f852 	bl	80049d4 <ssd1306_sendcommand>
	ssd1306_sendcommand(0x80);// A[7:4] = 1000, A[3:0] = 0000(clock divide ratio = 1)
 8004930:	2080      	movs	r0, #128	; 0x80
 8004932:	f000 f84f 	bl	80049d4 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_MULTIPLEX_RATIO); //0xA8
 8004936:	20a8      	movs	r0, #168	; 0xa8
 8004938:	f000 f84c 	bl	80049d4 <ssd1306_sendcommand>
	ssd1306_sendcommand(0x3F);
 800493c:	203f      	movs	r0, #63	; 0x3f
 800493e:	f000 f849 	bl	80049d4 <ssd1306_sendcommand>

	ssd1306_sendcommand(GB_SSD1306_DISPLAY_OFFSET); //0xD3
 8004942:	20d3      	movs	r0, #211	; 0xd3
 8004944:	f000 f846 	bl	80049d4 <ssd1306_sendcommand>
	ssd1306_sendcommand(0x00); //Display start line starts from COM0 only, that is from ROW0
 8004948:	2000      	movs	r0, #0
 800494a:	f000 f843 	bl	80049d4 <ssd1306_sendcommand>
	ssd1306_sendcommand(0x40 | 0x00); //Display Start line: starting address of display RAM, by selecting a value from 0 to 63.
 800494e:	2040      	movs	r0, #64	; 0x40
 8004950:	f000 f840 	bl	80049d4 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_CHARGEUP);//0x8D We use internal charge pump
 8004954:	208d      	movs	r0, #141	; 0x8d
 8004956:	f000 f83d 	bl	80049d4 <ssd1306_sendcommand>
	ssd1306_sendcommand(0x14);
 800495a:	2014      	movs	r0, #20
 800495c:	f000 f83a 	bl	80049d4 <ssd1306_sendcommand>

	ssd1306_sendcommand(GB_SSD1306_SET_MEMORY_ADDRESSING_COMMAND); //0x20
 8004960:	2020      	movs	r0, #32
 8004962:	f000 f837 	bl	80049d4 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_HORIZONTAL_ADDRESSING); //0x00
 8004966:	2000      	movs	r0, #0
 8004968:	f000 f834 	bl	80049d4 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_SEGMENT_REMAPPING_COM127_SEG0); //0xA0
 800496c:	20a1      	movs	r0, #161	; 0xa1
 800496e:	f000 f831 	bl	80049d4 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_COM_SCAN_DIRECTION_REMAPPED_MODE); //0xC8
 8004972:	20c8      	movs	r0, #200	; 0xc8
 8004974:	f000 f82e 	bl	80049d4 <ssd1306_sendcommand>


	ssd1306_sendcommand(GB_SSD1306_COM_HARDWARE_CONFIG_COMMAND); //0xDA
 8004978:	20da      	movs	r0, #218	; 0xda
 800497a:	f000 f82b 	bl	80049d4 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_COM_HARDWARE_CONFIG_ALTERNATE_DISABLE_REMAP);//0x02
 800497e:	2012      	movs	r0, #18
 8004980:	f000 f828 	bl	80049d4 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_CONTRAST); //0x81
 8004984:	2081      	movs	r0, #129	; 0x81
 8004986:	f000 f825 	bl	80049d4 <ssd1306_sendcommand>
	ssd1306_sendcommand(0xCF);
 800498a:	20cf      	movs	r0, #207	; 0xcf
 800498c:	f000 f822 	bl	80049d4 <ssd1306_sendcommand>

	ssd1306_sendcommand(GB_SSD1306_PRECHARGE);//0xD9
 8004990:	20d9      	movs	r0, #217	; 0xd9
 8004992:	f000 f81f 	bl	80049d4 <ssd1306_sendcommand>
	ssd1306_sendcommand(0xF1);
 8004996:	20f1      	movs	r0, #241	; 0xf1
 8004998:	f000 f81c 	bl	80049d4 <ssd1306_sendcommand>

	ssd1306_sendcommand(GB_SSD1306_VCOMH_SELECT_COMMAND);
 800499c:	20db      	movs	r0, #219	; 0xdb
 800499e:	f000 f819 	bl	80049d4 <ssd1306_sendcommand>
	ssd1306_sendcommand(0x40); // to be checked
 80049a2:	2040      	movs	r0, #64	; 0x40
 80049a4:	f000 f816 	bl	80049d4 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_DISPLAY_RESUME);//0xA4
 80049a8:	20a4      	movs	r0, #164	; 0xa4
 80049aa:	f000 f813 	bl	80049d4 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_NORMAL_DISPLAY); //0xA6
 80049ae:	20a6      	movs	r0, #166	; 0xa6
 80049b0:	f000 f810 	bl	80049d4 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_DISPLAY_ON);
 80049b4:	20af      	movs	r0, #175	; 0xaf
 80049b6:	f000 f80d 	bl	80049d4 <ssd1306_sendcommand>
//	gb_i2c_master_stop_generation(); // STOP Condition is generated
//	delay_ms(100);


	///Set default values /
		GB_SSD1306.CurrentX = 0;
 80049ba:	4b05      	ldr	r3, [pc, #20]	; (80049d0 <ssd1306_init+0xb0>)
 80049bc:	2200      	movs	r2, #0
 80049be:	801a      	strh	r2, [r3, #0]
		GB_SSD1306.CurrentY = 0;
 80049c0:	4b03      	ldr	r3, [pc, #12]	; (80049d0 <ssd1306_init+0xb0>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	805a      	strh	r2, [r3, #2]

	// Initialized OK
	GB_SSD1306.Initialized = 1;
 80049c6:	4b02      	ldr	r3, [pc, #8]	; (80049d0 <ssd1306_init+0xb0>)
 80049c8:	2201      	movs	r2, #1
 80049ca:	715a      	strb	r2, [r3, #5]

}
 80049cc:	bf00      	nop
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	2000078c 	.word	0x2000078c

080049d4 <ssd1306_sendcommand>:

void ssd1306_sendcommand(uint8_t command)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af02      	add	r7, sp, #8
 80049da:	4603      	mov	r3, r0
 80049dc:	71fb      	strb	r3, [r7, #7]
	  uint8_t tx[2];
	  tx[0] = GB_SSD1306_CONTROL_BYTE_FOR_COMMAND;
 80049de:	2300      	movs	r3, #0
 80049e0:	733b      	strb	r3, [r7, #12]
	  tx[1] = command;
 80049e2:	79fb      	ldrb	r3, [r7, #7]
 80049e4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, SSD1306_WA , tx, 2, HAL_MAX_DELAY);
 80049e6:	f107 020c 	add.w	r2, r7, #12
 80049ea:	f04f 33ff 	mov.w	r3, #4294967295
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	2302      	movs	r3, #2
 80049f2:	2178      	movs	r1, #120	; 0x78
 80049f4:	4803      	ldr	r0, [pc, #12]	; (8004a04 <ssd1306_sendcommand+0x30>)
 80049f6:	f7fd fcb1 	bl	800235c <HAL_I2C_Master_Transmit>
//	gb_i2c_address_send_w(SSD1306_WA); // INA219 I2C address is sent with Write bit
//	gb_i2c_master_send_byte(GB_SSD1306_CONTROL_BYTE_FOR_COMMAND); //0x00
//	gb_i2c_master_send_byte(command);
//	gb_i2c_master_stop_generation(); // STOP Condition is generated

}
 80049fa:	bf00      	nop
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	20001568 	.word	0x20001568

08004a08 <ssd1306_update_data>:
//	gb_i2c_master_send_byte(data);
//	gb_i2c_master_stop_generation(); // STOP Condition is generated
//
}
void ssd1306_update_data()
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
	ssd1306_sendcommand(GB_SSD1306_SET_COLUMN_ADDRESS_HV_ADDRESSING_MODE_COMMAND);
 8004a0e:	2021      	movs	r0, #33	; 0x21
 8004a10:	f7ff ffe0 	bl	80049d4 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_COLUMN_START_ADDRESS_HV_ADDRESSING_MODE);
 8004a14:	2000      	movs	r0, #0
 8004a16:	f7ff ffdd 	bl	80049d4 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_COLUMN_END_ADDRESS_HV_ADDRESSING_MODE);
 8004a1a:	207f      	movs	r0, #127	; 0x7f
 8004a1c:	f7ff ffda 	bl	80049d4 <ssd1306_sendcommand>

	ssd1306_sendcommand(GB_SSD1306_PAGE_ADDRESS_HV_ADDRESSING_MODE_COMMAND);
 8004a20:	2022      	movs	r0, #34	; 0x22
 8004a22:	f7ff ffd7 	bl	80049d4 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_PAGE_START_ADDRESS_HV_ADDRESSING_MODE);
 8004a26:	2000      	movs	r0, #0
 8004a28:	f7ff ffd4 	bl	80049d4 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_PAGE_END_ADDRESS_HV_ADDRESSING_MODE);
 8004a2c:	207d      	movs	r0, #125	; 0x7d
 8004a2e:	f7ff ffd1 	bl	80049d4 <ssd1306_sendcommand>

	  for (uint8_t packet = 0; packet < GB_SSD1306_HEIGHT; packet++) {
 8004a32:	2300      	movs	r3, #0
 8004a34:	71fb      	strb	r3, [r7, #7]
 8004a36:	e01a      	b.n	8004a6e <ssd1306_update_data+0x66>

		  uint8_t tx[2];
		  	tx[0] = GB_SSD1306_CONTROL_BYTE_FOR_DATA;
 8004a38:	2340      	movs	r3, #64	; 0x40
 8004a3a:	713b      	strb	r3, [r7, #4]
		  	//tx[2] = data;

		 // gb_i2c_start_condition_w(); // Start Condition For Writing
		  //gb_i2c_address_send_w(SSD1306_WA); // INA219 I2C address is sent with Write bit
		  //gb_i2c_master_send_byte(GB_SSD1306_CONTROL_BYTE_FOR_DATA);
      for (uint8_t packet_byte = 0; packet_byte < 16; ++packet_byte) {
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	71bb      	strb	r3, [r7, #6]
 8004a40:	e00f      	b.n	8004a62 <ssd1306_update_data+0x5a>
    	  tx[1] = GB_SSD1306_Buffer[packet*16+packet_byte];
 8004a42:	79fb      	ldrb	r3, [r7, #7]
 8004a44:	011a      	lsls	r2, r3, #4
 8004a46:	79bb      	ldrb	r3, [r7, #6]
 8004a48:	4413      	add	r3, r2
 8004a4a:	4a0d      	ldr	r2, [pc, #52]	; (8004a80 <ssd1306_update_data+0x78>)
 8004a4c:	5cd3      	ldrb	r3, [r2, r3]
 8004a4e:	717b      	strb	r3, [r7, #5]
		//	I2C_Master_Send(SSD1306_WA , &GB_SSD1306_Buffer[packet*16+packet_byte], 1);
   	  I2C_Master_Send(SSD1306_WA , tx, 2);
 8004a50:	1d3b      	adds	r3, r7, #4
 8004a52:	2202      	movs	r2, #2
 8004a54:	4619      	mov	r1, r3
 8004a56:	2078      	movs	r0, #120	; 0x78
 8004a58:	f7ff ff4a 	bl	80048f0 <I2C_Master_Send>
      for (uint8_t packet_byte = 0; packet_byte < 16; ++packet_byte) {
 8004a5c:	79bb      	ldrb	r3, [r7, #6]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	71bb      	strb	r3, [r7, #6]
 8004a62:	79bb      	ldrb	r3, [r7, #6]
 8004a64:	2b0f      	cmp	r3, #15
 8004a66:	d9ec      	bls.n	8004a42 <ssd1306_update_data+0x3a>
	  for (uint8_t packet = 0; packet < GB_SSD1306_HEIGHT; packet++) {
 8004a68:	79fb      	ldrb	r3, [r7, #7]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	71fb      	strb	r3, [r7, #7]
 8004a6e:	79fb      	ldrb	r3, [r7, #7]
 8004a70:	2b3f      	cmp	r3, #63	; 0x3f
 8004a72:	d9e1      	bls.n	8004a38 <ssd1306_update_data+0x30>
	        //	HAL_I2C_Master_Transmit(&hi2c2, SSD1306_WA , GB_SSD1306_Buffer, sizeof(GB_SSD1306_Buffer), HAL_MAX_DELAY);
	        	//gb_i2c_master_send_byte(GB_SSD1306_Buffer[packet*16+packet_byte]);
	       }
	  }
	     //   gb_i2c_master_stop_generation(); // STOP Condition is generated
}
 8004a74:	bf00      	nop
 8004a76:	bf00      	nop
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	2000038c 	.word	0x2000038c

08004a84 <ssd1306_GotoXY>:
/*
 * x is column[0-127]
 * y is row[0-63]
 */
void ssd1306_GotoXY( uint16_t x,uint16_t y)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	460a      	mov	r2, r1
 8004a8e:	80fb      	strh	r3, [r7, #6]
 8004a90:	4613      	mov	r3, r2
 8004a92:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
		GB_SSD1306.CurrentX = x;
 8004a94:	4a05      	ldr	r2, [pc, #20]	; (8004aac <ssd1306_GotoXY+0x28>)
 8004a96:	88fb      	ldrh	r3, [r7, #6]
 8004a98:	8013      	strh	r3, [r2, #0]
		GB_SSD1306.CurrentY = y;
 8004a9a:	4a04      	ldr	r2, [pc, #16]	; (8004aac <ssd1306_GotoXY+0x28>)
 8004a9c:	88bb      	ldrh	r3, [r7, #4]
 8004a9e:	8053      	strh	r3, [r2, #2]
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bc80      	pop	{r7}
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	2000078c 	.word	0x2000078c

08004ab0 <ssd1306_clear>:
}
/*
 *  Fills entire LCD with desired color
 */
void ssd1306_clear(GB_SSD1306_COLOR_t color)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	71fb      	strb	r3, [r7, #7]
	memset(GB_SSD1306_Buffer, (color == GB_SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(GB_SSD1306_Buffer));
 8004aba:	79fb      	ldrb	r3, [r7, #7]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d101      	bne.n	8004ac4 <ssd1306_clear+0x14>
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	e000      	b.n	8004ac6 <ssd1306_clear+0x16>
 8004ac4:	23ff      	movs	r3, #255	; 0xff
 8004ac6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004aca:	4619      	mov	r1, r3
 8004acc:	4803      	ldr	r0, [pc, #12]	; (8004adc <ssd1306_clear+0x2c>)
 8004ace:	f001 fc71 	bl	80063b4 <memset>
}
 8004ad2:	bf00      	nop
 8004ad4:	3708      	adds	r7, #8
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	2000038c 	.word	0x2000038c

08004ae0 <ssd1306_print_char>:
 * 5 is no of columns: font width // x is width : CurrentX :0-127
 * 8 is no of rows: font height   //y is height : CurrentY : 0-63
 *
 */
char ssd1306_print_char(char ch, GB_SSD1306_COLOR_t color)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	460a      	mov	r2, r1
 8004aea:	71fb      	strb	r3, [r7, #7]
 8004aec:	4613      	mov	r3, r2
 8004aee:	71bb      	strb	r3, [r7, #6]

	uint32_t Font_byte_value;

	for (uint32_t i = 0; i < 5 ; i++) // Font Width
 8004af0:	2300      	movs	r3, #0
 8004af2:	60fb      	str	r3, [r7, #12]
 8004af4:	e034      	b.n	8004b60 <ssd1306_print_char+0x80>
	{
			Font_byte_value = SSD1306_font5x8[(ch - 32)][i]; //mapping the vales of bits for rinting the character ch
 8004af6:	79fb      	ldrb	r3, [r7, #7]
 8004af8:	f1a3 0220 	sub.w	r2, r3, #32
 8004afc:	491d      	ldr	r1, [pc, #116]	; (8004b74 <ssd1306_print_char+0x94>)
 8004afe:	4613      	mov	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	4413      	add	r3, r2
 8004b04:	18ca      	adds	r2, r1, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	4413      	add	r3, r2
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	60bb      	str	r3, [r7, #8]

			if (color == GB_SSD1306_COLOR_WHITE)
 8004b0e:	79bb      	ldrb	r3, [r7, #6]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d10d      	bne.n	8004b30 <ssd1306_print_char+0x50>
			{
				GB_SSD1306_Buffer[GB_SSD1306.CurrentX + (GB_SSD1306.CurrentY / 8) * GB_SSD1306_WIDTH] = Font_byte_value;
 8004b14:	4b18      	ldr	r3, [pc, #96]	; (8004b78 <ssd1306_print_char+0x98>)
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	461a      	mov	r2, r3
 8004b1a:	4b17      	ldr	r3, [pc, #92]	; (8004b78 <ssd1306_print_char+0x98>)
 8004b1c:	885b      	ldrh	r3, [r3, #2]
 8004b1e:	08db      	lsrs	r3, r3, #3
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	01db      	lsls	r3, r3, #7
 8004b24:	4413      	add	r3, r2
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	b2d1      	uxtb	r1, r2
 8004b2a:	4a14      	ldr	r2, [pc, #80]	; (8004b7c <ssd1306_print_char+0x9c>)
 8004b2c:	54d1      	strb	r1, [r2, r3]
 8004b2e:	e00e      	b.n	8004b4e <ssd1306_print_char+0x6e>
			}else
			{
				GB_SSD1306_Buffer[GB_SSD1306.CurrentX + (GB_SSD1306.CurrentY / 8) * GB_SSD1306_WIDTH] = ~Font_byte_value;
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	b2da      	uxtb	r2, r3
 8004b34:	4b10      	ldr	r3, [pc, #64]	; (8004b78 <ssd1306_print_char+0x98>)
 8004b36:	881b      	ldrh	r3, [r3, #0]
 8004b38:	4619      	mov	r1, r3
 8004b3a:	4b0f      	ldr	r3, [pc, #60]	; (8004b78 <ssd1306_print_char+0x98>)
 8004b3c:	885b      	ldrh	r3, [r3, #2]
 8004b3e:	08db      	lsrs	r3, r3, #3
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	01db      	lsls	r3, r3, #7
 8004b44:	440b      	add	r3, r1
 8004b46:	43d2      	mvns	r2, r2
 8004b48:	b2d1      	uxtb	r1, r2
 8004b4a:	4a0c      	ldr	r2, [pc, #48]	; (8004b7c <ssd1306_print_char+0x9c>)
 8004b4c:	54d1      	strb	r1, [r2, r3]
			}

		  GB_SSD1306.CurrentX ++;
 8004b4e:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <ssd1306_print_char+0x98>)
 8004b50:	881b      	ldrh	r3, [r3, #0]
 8004b52:	3301      	adds	r3, #1
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	4b08      	ldr	r3, [pc, #32]	; (8004b78 <ssd1306_print_char+0x98>)
 8004b58:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i < 5 ; i++) // Font Width
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2b04      	cmp	r3, #4
 8004b64:	d9c7      	bls.n	8004af6 <ssd1306_print_char+0x16>
		}

	/* Return character written */
		return ch;
 8004b66:	79fb      	ldrb	r3, [r7, #7]

}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bc80      	pop	{r7}
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	08006dfc 	.word	0x08006dfc
 8004b78:	2000078c 	.word	0x2000078c
 8004b7c:	2000038c 	.word	0x2000038c

08004b80 <ssd1306_print_string>:

char ssd1306_print_string(char* str, GB_SSD1306_COLOR_t color)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	460b      	mov	r3, r1
 8004b8a:	70fb      	strb	r3, [r7, #3]
	while (*str)
 8004b8c:	e008      	b.n	8004ba0 <ssd1306_print_string+0x20>
	{
		ssd1306_print_char(*str++, (GB_SSD1306_COLOR_t) color);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	1c5a      	adds	r2, r3, #1
 8004b92:	607a      	str	r2, [r7, #4]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	78fa      	ldrb	r2, [r7, #3]
 8004b98:	4611      	mov	r1, r2
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7ff ffa0 	bl	8004ae0 <ssd1306_print_char>
	while (*str)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1f2      	bne.n	8004b8e <ssd1306_print_string+0xe>
	}
	/* Everything OK, zero should be returned */
		return *str;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	781b      	ldrb	r3, [r3, #0]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <ssd1306_float>:
		ssd1306_print_char(gb_buf[gb_ptr], (GB_SSD1306_COLOR_t) color);
	}
}

void ssd1306_float(float gb_value, GB_SSD1306_COLOR_t color)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	70fb      	strb	r3, [r7, #3]
	char gb_float_buff[10];
	sprintf(gb_float_buff,"%.2f",gb_value);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f7fb fc29 	bl	8000418 <__aeabi_f2d>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	460b      	mov	r3, r1
 8004bca:	f107 000c 	add.w	r0, r7, #12
 8004bce:	4907      	ldr	r1, [pc, #28]	; (8004bec <ssd1306_float+0x38>)
 8004bd0:	f001 fccc 	bl	800656c <siprintf>
	ssd1306_print_string(gb_float_buff,(GB_SSD1306_COLOR_t) color );
 8004bd4:	78fa      	ldrb	r2, [r7, #3]
 8004bd6:	f107 030c 	add.w	r3, r7, #12
 8004bda:	4611      	mov	r1, r2
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f7ff ffcf 	bl	8004b80 <ssd1306_print_string>

}
 8004be2:	bf00      	nop
 8004be4:	3718      	adds	r7, #24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	08006dd4 	.word	0x08006dd4

08004bf0 <tim4_ch1_capture_config>:
float TIM4_Period = 0;
float TIM4_Width = 0;
float TIM4_Period_Current = 0;

void tim4_ch1_capture_config()
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	af00      	add	r7, sp, #0
	   TIM4->DIER |= TIM_DIER_CC1IE; //capture interrupt enabled
 8004bf4:	4b0d      	ldr	r3, [pc, #52]	; (8004c2c <tim4_ch1_capture_config+0x3c>)
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	4a0c      	ldr	r2, [pc, #48]	; (8004c2c <tim4_ch1_capture_config+0x3c>)
 8004bfa:	f043 0302 	orr.w	r3, r3, #2
 8004bfe:	60d3      	str	r3, [r2, #12]
	   TIM4->CCER |= TIM_CCER_CC1E; // timer 4 channel1 configured for capture enabled
 8004c00:	4b0a      	ldr	r3, [pc, #40]	; (8004c2c <tim4_ch1_capture_config+0x3c>)
 8004c02:	6a1b      	ldr	r3, [r3, #32]
 8004c04:	4a09      	ldr	r2, [pc, #36]	; (8004c2c <tim4_ch1_capture_config+0x3c>)
 8004c06:	f043 0301 	orr.w	r3, r3, #1
 8004c0a:	6213      	str	r3, [r2, #32]
	   TIM4->CCER |= TIM_CCER_CC2E; // timer 4 channel1 configured for capture enabled
 8004c0c:	4b07      	ldr	r3, [pc, #28]	; (8004c2c <tim4_ch1_capture_config+0x3c>)
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	4a06      	ldr	r2, [pc, #24]	; (8004c2c <tim4_ch1_capture_config+0x3c>)
 8004c12:	f043 0310 	orr.w	r3, r3, #16
 8004c16:	6213      	str	r3, [r2, #32]
	   TIM4->CR1 |= TIM_CR1_CEN; //enable the time2
 8004c18:	4b04      	ldr	r3, [pc, #16]	; (8004c2c <tim4_ch1_capture_config+0x3c>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a03      	ldr	r2, [pc, #12]	; (8004c2c <tim4_ch1_capture_config+0x3c>)
 8004c1e:	f043 0301 	orr.w	r3, r3, #1
 8004c22:	6013      	str	r3, [r2, #0]
}
 8004c24:	bf00      	nop
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bc80      	pop	{r7}
 8004c2a:	4770      	bx	lr
 8004c2c:	40000800 	.word	0x40000800

08004c30 <tim4_ch1_capture_unconfig>:

void tim4_ch1_capture_unconfig()
{
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
		   TIM4->DIER &= ~TIM_DIER_CC1IE; //capture interrupt disabled
 8004c34:	4b0d      	ldr	r3, [pc, #52]	; (8004c6c <tim4_ch1_capture_unconfig+0x3c>)
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	4a0c      	ldr	r2, [pc, #48]	; (8004c6c <tim4_ch1_capture_unconfig+0x3c>)
 8004c3a:	f023 0302 	bic.w	r3, r3, #2
 8004c3e:	60d3      	str	r3, [r2, #12]
		   TIM4->CCER &= ~TIM_CCER_CC1E; // timer 4 channel1 unconfigured for capture enabled
 8004c40:	4b0a      	ldr	r3, [pc, #40]	; (8004c6c <tim4_ch1_capture_unconfig+0x3c>)
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	4a09      	ldr	r2, [pc, #36]	; (8004c6c <tim4_ch1_capture_unconfig+0x3c>)
 8004c46:	f023 0301 	bic.w	r3, r3, #1
 8004c4a:	6213      	str	r3, [r2, #32]
		   TIM4->CCER &= ~TIM_CCER_CC2E; //timer 4 channel2 unconfigured for capture enabled
 8004c4c:	4b07      	ldr	r3, [pc, #28]	; (8004c6c <tim4_ch1_capture_unconfig+0x3c>)
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	4a06      	ldr	r2, [pc, #24]	; (8004c6c <tim4_ch1_capture_unconfig+0x3c>)
 8004c52:	f023 0310 	bic.w	r3, r3, #16
 8004c56:	6213      	str	r3, [r2, #32]
		   TIM4->CR1 &= ~TIM_CR1_CEN; //disabled the timer
 8004c58:	4b04      	ldr	r3, [pc, #16]	; (8004c6c <tim4_ch1_capture_unconfig+0x3c>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a03      	ldr	r2, [pc, #12]	; (8004c6c <tim4_ch1_capture_unconfig+0x3c>)
 8004c5e:	f023 0301 	bic.w	r3, r3, #1
 8004c62:	6013      	str	r3, [r2, #0]
}
 8004c64:	bf00      	nop
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bc80      	pop	{r7}
 8004c6a:	4770      	bx	lr
 8004c6c:	40000800 	.word	0x40000800

08004c70 <tim3_ch2_capture_config>:

void tim3_ch2_capture_config()
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
	   TIM3->DIER |= TIM_DIER_CC2IE; //capture interrupt enable
 8004c74:	4b0d      	ldr	r3, [pc, #52]	; (8004cac <tim3_ch2_capture_config+0x3c>)
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	4a0c      	ldr	r2, [pc, #48]	; (8004cac <tim3_ch2_capture_config+0x3c>)
 8004c7a:	f043 0304 	orr.w	r3, r3, #4
 8004c7e:	60d3      	str	r3, [r2, #12]
	   TIM3->CCER |= TIM_CCER_CC1E; // timer 3 channel1 configured for capture enabled
 8004c80:	4b0a      	ldr	r3, [pc, #40]	; (8004cac <tim3_ch2_capture_config+0x3c>)
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	4a09      	ldr	r2, [pc, #36]	; (8004cac <tim3_ch2_capture_config+0x3c>)
 8004c86:	f043 0301 	orr.w	r3, r3, #1
 8004c8a:	6213      	str	r3, [r2, #32]
	   TIM3->CCER |= TIM_CCER_CC2E; //timer 3 channel2 configured for capture enabled
 8004c8c:	4b07      	ldr	r3, [pc, #28]	; (8004cac <tim3_ch2_capture_config+0x3c>)
 8004c8e:	6a1b      	ldr	r3, [r3, #32]
 8004c90:	4a06      	ldr	r2, [pc, #24]	; (8004cac <tim3_ch2_capture_config+0x3c>)
 8004c92:	f043 0310 	orr.w	r3, r3, #16
 8004c96:	6213      	str	r3, [r2, #32]
	   TIM3->CR1 |= TIM_CR1_CEN; //enable the timer
 8004c98:	4b04      	ldr	r3, [pc, #16]	; (8004cac <tim3_ch2_capture_config+0x3c>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a03      	ldr	r2, [pc, #12]	; (8004cac <tim3_ch2_capture_config+0x3c>)
 8004c9e:	f043 0301 	orr.w	r3, r3, #1
 8004ca2:	6013      	str	r3, [r2, #0]
}
 8004ca4:	bf00      	nop
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bc80      	pop	{r7}
 8004caa:	4770      	bx	lr
 8004cac:	40000400 	.word	0x40000400

08004cb0 <tim3_ch2_capture_unconfig>:

void tim3_ch2_capture_unconfig()
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	af00      	add	r7, sp, #0
		   TIM3->DIER &= ~TIM_DIER_CC2IE; //capture interrupt enable
 8004cb4:	4b0d      	ldr	r3, [pc, #52]	; (8004cec <tim3_ch2_capture_unconfig+0x3c>)
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	4a0c      	ldr	r2, [pc, #48]	; (8004cec <tim3_ch2_capture_unconfig+0x3c>)
 8004cba:	f023 0304 	bic.w	r3, r3, #4
 8004cbe:	60d3      	str	r3, [r2, #12]
		   TIM3->CCER &= ~TIM_CCER_CC1E; // timer 3 channel1 unconfigured for capture enabled
 8004cc0:	4b0a      	ldr	r3, [pc, #40]	; (8004cec <tim3_ch2_capture_unconfig+0x3c>)
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	4a09      	ldr	r2, [pc, #36]	; (8004cec <tim3_ch2_capture_unconfig+0x3c>)
 8004cc6:	f023 0301 	bic.w	r3, r3, #1
 8004cca:	6213      	str	r3, [r2, #32]
		   TIM3->CCER &= ~TIM_CCER_CC2E; ////timer 3 channel2 unconfigured for capture enabled
 8004ccc:	4b07      	ldr	r3, [pc, #28]	; (8004cec <tim3_ch2_capture_unconfig+0x3c>)
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	4a06      	ldr	r2, [pc, #24]	; (8004cec <tim3_ch2_capture_unconfig+0x3c>)
 8004cd2:	f023 0310 	bic.w	r3, r3, #16
 8004cd6:	6213      	str	r3, [r2, #32]
		   TIM3->CR1 &= ~TIM_CR1_CEN; //disable the timer
 8004cd8:	4b04      	ldr	r3, [pc, #16]	; (8004cec <tim3_ch2_capture_unconfig+0x3c>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a03      	ldr	r2, [pc, #12]	; (8004cec <tim3_ch2_capture_unconfig+0x3c>)
 8004cde:	f023 0301 	bic.w	r3, r3, #1
 8004ce2:	6013      	str	r3, [r2, #0]
}
 8004ce4:	bf00      	nop
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bc80      	pop	{r7}
 8004cea:	4770      	bx	lr
 8004cec:	40000400 	.word	0x40000400

08004cf0 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
	 if (__HAL_TIM_GET_FLAG(&htim3, TIM_FLAG_CC2) != RESET)   // Capture Compare Event 1
 8004cf4:	4b31      	ldr	r3, [pc, #196]	; (8004dbc <TIM3_IRQHandler+0xcc>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	f003 0304 	and.w	r3, r3, #4
 8004cfe:	2b04      	cmp	r3, #4
 8004d00:	d15a      	bne.n	8004db8 <TIM3_IRQHandler+0xc8>
	  {
	    if (__HAL_TIM_GET_IT_SOURCE(&htim3, TIM_IT_CC2) != RESET)   // Cross check that whether source of Interrupt is configured
 8004d02:	4b2e      	ldr	r3, [pc, #184]	; (8004dbc <TIM3_IRQHandler+0xcc>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f003 0304 	and.w	r3, r3, #4
 8004d0c:	2b04      	cmp	r3, #4
 8004d0e:	d153      	bne.n	8004db8 <TIM3_IRQHandler+0xc8>
		// if(TIM3->DIER & TIM_DIER_CC1IE)
	    {
	        __HAL_TIM_CLEAR_IT(&htim3, TIM_IT_CC2);
 8004d10:	4b2a      	ldr	r3, [pc, #168]	; (8004dbc <TIM3_IRQHandler+0xcc>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f06f 0204 	mvn.w	r2, #4
 8004d18:	611a      	str	r2, [r3, #16]
	        htim3.Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d1a:	4b28      	ldr	r3, [pc, #160]	; (8004dbc <TIM3_IRQHandler+0xcc>)
 8004d1c:	2202      	movs	r2, #2
 8004d1e:	771a      	strb	r2, [r3, #28]

	        /* Input capture event */
	        if ((htim3.Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U) // cross check that if Input Capture Interrupt is their, if input capture event is their
 8004d20:	4b26      	ldr	r3, [pc, #152]	; (8004dbc <TIM3_IRQHandler+0xcc>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d044      	beq.n	8004db8 <TIM3_IRQHandler+0xc8>
	        {
	        	if (htim3.Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // If the interrupt is triggered by channel 2( for timer 3: pin PB5)
 8004d2e:	4b23      	ldr	r3, [pc, #140]	; (8004dbc <TIM3_IRQHandler+0xcc>)
 8004d30:	7f1b      	ldrb	r3, [r3, #28]
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d140      	bne.n	8004db8 <TIM3_IRQHandler+0xc8>
	        						{
	        							// Read the IC value
	        							TIM3_IC2Value = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_2);
 8004d36:	2104      	movs	r1, #4
 8004d38:	4820      	ldr	r0, [pc, #128]	; (8004dbc <TIM3_IRQHandler+0xcc>)
 8004d3a:	f7fe ff81 	bl	8003c40 <HAL_TIM_ReadCapturedValue>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	4a1f      	ldr	r2, [pc, #124]	; (8004dc0 <TIM3_IRQHandler+0xd0>)
 8004d42:	6013      	str	r3, [r2, #0]

	        							if (TIM3_IC2Value != 0)
 8004d44:	4b1e      	ldr	r3, [pc, #120]	; (8004dc0 <TIM3_IRQHandler+0xd0>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d035      	beq.n	8004db8 <TIM3_IRQHandler+0xc8>
	        							{
	        								TIM3_IC1Value = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	481b      	ldr	r0, [pc, #108]	; (8004dbc <TIM3_IRQHandler+0xcc>)
 8004d50:	f7fe ff76 	bl	8003c40 <HAL_TIM_ReadCapturedValue>
 8004d54:	4603      	mov	r3, r0
 8004d56:	4a1b      	ldr	r2, [pc, #108]	; (8004dc4 <TIM3_IRQHandler+0xd4>)
 8004d58:	6013      	str	r3, [r2, #0]
	        								// calculate the Duty Cycle
	        								TIM3_Duty = (TIM3_IC1Value *100)/TIM3_IC2Value;
 8004d5a:	4b1a      	ldr	r3, [pc, #104]	; (8004dc4 <TIM3_IRQHandler+0xd4>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2264      	movs	r2, #100	; 0x64
 8004d60:	fb02 f203 	mul.w	r2, r2, r3
 8004d64:	4b16      	ldr	r3, [pc, #88]	; (8004dc0 <TIM3_IRQHandler+0xd0>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7fb ff4b 	bl	8000c08 <__aeabi_ui2f>
 8004d72:	4603      	mov	r3, r0
 8004d74:	4a14      	ldr	r2, [pc, #80]	; (8004dc8 <TIM3_IRQHandler+0xd8>)
 8004d76:	6013      	str	r3, [r2, #0]
	        								TIM3_Frequency = 100000/TIM3_IC2Value;
 8004d78:	4b11      	ldr	r3, [pc, #68]	; (8004dc0 <TIM3_IRQHandler+0xd0>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a13      	ldr	r2, [pc, #76]	; (8004dcc <TIM3_IRQHandler+0xdc>)
 8004d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fb ff40 	bl	8000c08 <__aeabi_ui2f>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	4a11      	ldr	r2, [pc, #68]	; (8004dd0 <TIM3_IRQHandler+0xe0>)
 8004d8c:	6013      	str	r3, [r2, #0]
	        								TIM3_Period = 1000000/TIM3_Frequency;//(Perid is in microseconds)
 8004d8e:	4b10      	ldr	r3, [pc, #64]	; (8004dd0 <TIM3_IRQHandler+0xe0>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4619      	mov	r1, r3
 8004d94:	480f      	ldr	r0, [pc, #60]	; (8004dd4 <TIM3_IRQHandler+0xe4>)
 8004d96:	f7fc f843 	bl	8000e20 <__aeabi_fdiv>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	4b0e      	ldr	r3, [pc, #56]	; (8004dd8 <TIM3_IRQHandler+0xe8>)
 8004da0:	601a      	str	r2, [r3, #0]
	        								TIM3_Width = TIM3_Period/2;  //(in microseconds)
 8004da2:	4b0d      	ldr	r3, [pc, #52]	; (8004dd8 <TIM3_IRQHandler+0xe8>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7fc f838 	bl	8000e20 <__aeabi_fdiv>
 8004db0:	4603      	mov	r3, r0
 8004db2:	461a      	mov	r2, r3
 8004db4:	4b09      	ldr	r3, [pc, #36]	; (8004ddc <TIM3_IRQHandler+0xec>)
 8004db6:	601a      	str	r2, [r3, #0]
	        }
	    }
	  }

  /* USER CODE END TIM3_IRQn 1 */
}
 8004db8:	bf00      	nop
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	200015c0 	.word	0x200015c0
 8004dc0:	20000798 	.word	0x20000798
 8004dc4:	20000794 	.word	0x20000794
 8004dc8:	200007a0 	.word	0x200007a0
 8004dcc:	000186a0 	.word	0x000186a0
 8004dd0:	2000079c 	.word	0x2000079c
 8004dd4:	49742400 	.word	0x49742400
 8004dd8:	200007a4 	.word	0x200007a4
 8004ddc:	200007a8 	.word	0x200007a8

08004de0 <TIM3_getPeriod>:

float TIM3_getPeriod()
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
	return TIM3_Period;
 8004de4:	4b02      	ldr	r3, [pc, #8]	; (8004df0 <TIM3_getPeriod+0x10>)
 8004de6:	681b      	ldr	r3, [r3, #0]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bc80      	pop	{r7}
 8004dee:	4770      	bx	lr
 8004df0:	200007a4 	.word	0x200007a4

08004df4 <TIM3_setPeriod>:
	return TIM3_Frequency;

}

void TIM3_setPeriod(uint32_t value)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
	TIM3_Period = value;
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f7fb ff03 	bl	8000c08 <__aeabi_ui2f>
 8004e02:	4603      	mov	r3, r0
 8004e04:	4a02      	ldr	r2, [pc, #8]	; (8004e10 <TIM3_setPeriod+0x1c>)
 8004e06:	6013      	str	r3, [r2, #0]

}
 8004e08:	bf00      	nop
 8004e0a:	3708      	adds	r7, #8
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	200007a4 	.word	0x200007a4

08004e14 <TIM4_IRQHandler>:
/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
	 if (__HAL_TIM_GET_FLAG(&htim4, TIM_FLAG_CC1) != RESET)   // Capture Compare Event 1
 8004e18:	4b31      	ldr	r3, [pc, #196]	; (8004ee0 <TIM4_IRQHandler+0xcc>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d15a      	bne.n	8004edc <TIM4_IRQHandler+0xc8>
			  {
			    if (__HAL_TIM_GET_IT_SOURCE(&htim4, TIM_IT_CC1) != RESET)   // Cross check that whether source of Interrupt is configured
 8004e26:	4b2e      	ldr	r3, [pc, #184]	; (8004ee0 <TIM4_IRQHandler+0xcc>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d153      	bne.n	8004edc <TIM4_IRQHandler+0xc8>
				// if(TIM3->DIER & TIM_DIER_CC1IE)
			    {
			        __HAL_TIM_CLEAR_IT(&htim4, TIM_IT_CC1);
 8004e34:	4b2a      	ldr	r3, [pc, #168]	; (8004ee0 <TIM4_IRQHandler+0xcc>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f06f 0202 	mvn.w	r2, #2
 8004e3c:	611a      	str	r2, [r3, #16]
			        htim4.Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e3e:	4b28      	ldr	r3, [pc, #160]	; (8004ee0 <TIM4_IRQHandler+0xcc>)
 8004e40:	2201      	movs	r2, #1
 8004e42:	771a      	strb	r2, [r3, #28]

			        /* Input capture event */
			        if ((htim4.Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U) // cross check that if Input Capture Interrupt is their, if input capture event is their
 8004e44:	4b26      	ldr	r3, [pc, #152]	; (8004ee0 <TIM4_IRQHandler+0xcc>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	f003 0303 	and.w	r3, r3, #3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d044      	beq.n	8004edc <TIM4_IRQHandler+0xc8>
			        {
			        	if (htim4.Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // If the interrupt is triggered by channel 1( for timer 4: pin PB6)
 8004e52:	4b23      	ldr	r3, [pc, #140]	; (8004ee0 <TIM4_IRQHandler+0xcc>)
 8004e54:	7f1b      	ldrb	r3, [r3, #28]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d140      	bne.n	8004edc <TIM4_IRQHandler+0xc8>
							{
								// Read the IC value
								TIM4_IC1Value = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	4820      	ldr	r0, [pc, #128]	; (8004ee0 <TIM4_IRQHandler+0xcc>)
 8004e5e:	f7fe feef 	bl	8003c40 <HAL_TIM_ReadCapturedValue>
 8004e62:	4603      	mov	r3, r0
 8004e64:	4a1f      	ldr	r2, [pc, #124]	; (8004ee4 <TIM4_IRQHandler+0xd0>)
 8004e66:	6013      	str	r3, [r2, #0]

								if (TIM4_IC1Value != 0)
 8004e68:	4b1e      	ldr	r3, [pc, #120]	; (8004ee4 <TIM4_IRQHandler+0xd0>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d035      	beq.n	8004edc <TIM4_IRQHandler+0xc8>
								{
									TIM4_IC2Value = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 8004e70:	2104      	movs	r1, #4
 8004e72:	481b      	ldr	r0, [pc, #108]	; (8004ee0 <TIM4_IRQHandler+0xcc>)
 8004e74:	f7fe fee4 	bl	8003c40 <HAL_TIM_ReadCapturedValue>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	4a1b      	ldr	r2, [pc, #108]	; (8004ee8 <TIM4_IRQHandler+0xd4>)
 8004e7c:	6013      	str	r3, [r2, #0]
									// calculate the Duty Cycle
									TIM4_Duty = (TIM4_IC2Value *100)/TIM4_IC1Value;
 8004e7e:	4b1a      	ldr	r3, [pc, #104]	; (8004ee8 <TIM4_IRQHandler+0xd4>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2264      	movs	r2, #100	; 0x64
 8004e84:	fb02 f203 	mul.w	r2, r2, r3
 8004e88:	4b16      	ldr	r3, [pc, #88]	; (8004ee4 <TIM4_IRQHandler+0xd0>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7fb feb9 	bl	8000c08 <__aeabi_ui2f>
 8004e96:	4603      	mov	r3, r0
 8004e98:	4a14      	ldr	r2, [pc, #80]	; (8004eec <TIM4_IRQHandler+0xd8>)
 8004e9a:	6013      	str	r3, [r2, #0]
									TIM4_Frequency = 100000/TIM4_IC1Value;
 8004e9c:	4b11      	ldr	r3, [pc, #68]	; (8004ee4 <TIM4_IRQHandler+0xd0>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a13      	ldr	r2, [pc, #76]	; (8004ef0 <TIM4_IRQHandler+0xdc>)
 8004ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7fb feae 	bl	8000c08 <__aeabi_ui2f>
 8004eac:	4603      	mov	r3, r0
 8004eae:	4a11      	ldr	r2, [pc, #68]	; (8004ef4 <TIM4_IRQHandler+0xe0>)
 8004eb0:	6013      	str	r3, [r2, #0]
									TIM4_Period = 1000000/TIM4_Frequency;//(Perid is in microseconds)
 8004eb2:	4b10      	ldr	r3, [pc, #64]	; (8004ef4 <TIM4_IRQHandler+0xe0>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	480f      	ldr	r0, [pc, #60]	; (8004ef8 <TIM4_IRQHandler+0xe4>)
 8004eba:	f7fb ffb1 	bl	8000e20 <__aeabi_fdiv>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	4b0e      	ldr	r3, [pc, #56]	; (8004efc <TIM4_IRQHandler+0xe8>)
 8004ec4:	601a      	str	r2, [r3, #0]
									TIM4_Width = TIM4_Period/2;  //(in microseconds)
 8004ec6:	4b0d      	ldr	r3, [pc, #52]	; (8004efc <TIM4_IRQHandler+0xe8>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7fb ffa6 	bl	8000e20 <__aeabi_fdiv>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	4b09      	ldr	r3, [pc, #36]	; (8004f00 <TIM4_IRQHandler+0xec>)
 8004eda:	601a      	str	r2, [r3, #0]
							}
			        }
			    }
			  }
  /* USER CODE END TIM4_IRQn 1 */
}
 8004edc:	bf00      	nop
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	2000151c 	.word	0x2000151c
 8004ee4:	200007ac 	.word	0x200007ac
 8004ee8:	200007b0 	.word	0x200007b0
 8004eec:	200007b8 	.word	0x200007b8
 8004ef0:	000186a0 	.word	0x000186a0
 8004ef4:	200007b4 	.word	0x200007b4
 8004ef8:	49742400 	.word	0x49742400
 8004efc:	200007bc 	.word	0x200007bc
 8004f00:	200007c0 	.word	0x200007c0

08004f04 <TIM4_getPeriod>:

float TIM4_getPeriod()
{
 8004f04:	b480      	push	{r7}
 8004f06:	af00      	add	r7, sp, #0
	return TIM4_Period;
 8004f08:	4b02      	ldr	r3, [pc, #8]	; (8004f14 <TIM4_getPeriod+0x10>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bc80      	pop	{r7}
 8004f12:	4770      	bx	lr
 8004f14:	200007bc 	.word	0x200007bc

08004f18 <TIM4_setPeriod>:
	return TIM4_Frequency;

}

void TIM4_setPeriod(uint32_t value)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
	TIM4_Period = value;
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f7fb fe71 	bl	8000c08 <__aeabi_ui2f>
 8004f26:	4603      	mov	r3, r0
 8004f28:	4a02      	ldr	r2, [pc, #8]	; (8004f34 <TIM4_setPeriod+0x1c>)
 8004f2a:	6013      	str	r3, [r2, #0]

}
 8004f2c:	bf00      	nop
 8004f2e:	3708      	adds	r7, #8
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	200007bc 	.word	0x200007bc

08004f38 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	4603      	mov	r3, r0
 8004f40:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004f42:	2300      	movs	r3, #0
 8004f44:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004f46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f4a:	2b84      	cmp	r3, #132	; 0x84
 8004f4c:	d005      	beq.n	8004f5a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004f4e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	4413      	add	r3, r2
 8004f56:	3303      	adds	r3, #3
 8004f58:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bc80      	pop	{r7}
 8004f64:	4770      	bx	lr

08004f66 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004f6a:	f000 fae7 	bl	800553c <vTaskStartScheduler>
  
  return osOK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f76:	b089      	sub	sp, #36	; 0x24
 8004f78:	af04      	add	r7, sp, #16
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d020      	beq.n	8004fc8 <osThreadCreate+0x54>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d01c      	beq.n	8004fc8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685c      	ldr	r4, [r3, #4]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681d      	ldr	r5, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	691e      	ldr	r6, [r3, #16]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7ff ffc9 	bl	8004f38 <makeFreeRtosPriority>
 8004fa6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fb0:	9202      	str	r2, [sp, #8]
 8004fb2:	9301      	str	r3, [sp, #4]
 8004fb4:	9100      	str	r1, [sp, #0]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	4632      	mov	r2, r6
 8004fba:	4629      	mov	r1, r5
 8004fbc:	4620      	mov	r0, r4
 8004fbe:	f000 f8e8 	bl	8005192 <xTaskCreateStatic>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	60fb      	str	r3, [r7, #12]
 8004fc6:	e01c      	b.n	8005002 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685c      	ldr	r4, [r3, #4]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fd4:	b29e      	uxth	r6, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7ff ffab 	bl	8004f38 <makeFreeRtosPriority>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	f107 030c 	add.w	r3, r7, #12
 8004fe8:	9301      	str	r3, [sp, #4]
 8004fea:	9200      	str	r2, [sp, #0]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	4632      	mov	r2, r6
 8004ff0:	4629      	mov	r1, r5
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	f000 f929 	bl	800524a <xTaskCreate>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d001      	beq.n	8005002 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004ffe:	2300      	movs	r3, #0
 8005000:	e000      	b.n	8005004 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005002:	68fb      	ldr	r3, [r7, #12]
}
 8005004:	4618      	mov	r0, r3
 8005006:	3714      	adds	r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800500c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d001      	beq.n	8005022 <osDelay+0x16>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	e000      	b.n	8005024 <osDelay+0x18>
 8005022:	2301      	movs	r3, #1
 8005024:	4618      	mov	r0, r3
 8005026:	f000 fa55 	bl	80054d4 <vTaskDelay>
  
  return osOK;
 800502a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800502c:	4618      	mov	r0, r3
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f103 0208 	add.w	r2, r3, #8
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f04f 32ff 	mov.w	r2, #4294967295
 800504c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f103 0208 	add.w	r2, r3, #8
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f103 0208 	add.w	r2, r3, #8
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	bc80      	pop	{r7}
 8005070:	4770      	bx	lr

08005072 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005072:	b480      	push	{r7}
 8005074:	b083      	sub	sp, #12
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	bc80      	pop	{r7}
 8005088:	4770      	bx	lr

0800508a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800508a:	b480      	push	{r7}
 800508c:	b085      	sub	sp, #20
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
 8005092:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	689a      	ldr	r2, [r3, #8]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	1c5a      	adds	r2, r3, #1
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	601a      	str	r2, [r3, #0]
}
 80050c6:	bf00      	nop
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bc80      	pop	{r7}
 80050ce:	4770      	bx	lr

080050d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e6:	d103      	bne.n	80050f0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	60fb      	str	r3, [r7, #12]
 80050ee:	e00c      	b.n	800510a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	3308      	adds	r3, #8
 80050f4:	60fb      	str	r3, [r7, #12]
 80050f6:	e002      	b.n	80050fe <vListInsert+0x2e>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	60fb      	str	r3, [r7, #12]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	429a      	cmp	r2, r3
 8005108:	d2f6      	bcs.n	80050f8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	685a      	ldr	r2, [r3, #4]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	683a      	ldr	r2, [r7, #0]
 8005124:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	1c5a      	adds	r2, r3, #1
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	601a      	str	r2, [r3, #0]
}
 8005136:	bf00      	nop
 8005138:	3714      	adds	r7, #20
 800513a:	46bd      	mov	sp, r7
 800513c:	bc80      	pop	{r7}
 800513e:	4770      	bx	lr

08005140 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	6892      	ldr	r2, [r2, #8]
 8005156:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	6852      	ldr	r2, [r2, #4]
 8005160:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	429a      	cmp	r2, r3
 800516a:	d103      	bne.n	8005174 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689a      	ldr	r2, [r3, #8]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	1e5a      	subs	r2, r3, #1
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3714      	adds	r7, #20
 800518c:	46bd      	mov	sp, r7
 800518e:	bc80      	pop	{r7}
 8005190:	4770      	bx	lr

08005192 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005192:	b580      	push	{r7, lr}
 8005194:	b08e      	sub	sp, #56	; 0x38
 8005196:	af04      	add	r7, sp, #16
 8005198:	60f8      	str	r0, [r7, #12]
 800519a:	60b9      	str	r1, [r7, #8]
 800519c:	607a      	str	r2, [r7, #4]
 800519e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80051a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10a      	bne.n	80051bc <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80051a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051aa:	f383 8811 	msr	BASEPRI, r3
 80051ae:	f3bf 8f6f 	isb	sy
 80051b2:	f3bf 8f4f 	dsb	sy
 80051b6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80051b8:	bf00      	nop
 80051ba:	e7fe      	b.n	80051ba <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80051bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10a      	bne.n	80051d8 <xTaskCreateStatic+0x46>
	__asm volatile
 80051c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c6:	f383 8811 	msr	BASEPRI, r3
 80051ca:	f3bf 8f6f 	isb	sy
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	61fb      	str	r3, [r7, #28]
}
 80051d4:	bf00      	nop
 80051d6:	e7fe      	b.n	80051d6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80051d8:	23b4      	movs	r3, #180	; 0xb4
 80051da:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	2bb4      	cmp	r3, #180	; 0xb4
 80051e0:	d00a      	beq.n	80051f8 <xTaskCreateStatic+0x66>
	__asm volatile
 80051e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e6:	f383 8811 	msr	BASEPRI, r3
 80051ea:	f3bf 8f6f 	isb	sy
 80051ee:	f3bf 8f4f 	dsb	sy
 80051f2:	61bb      	str	r3, [r7, #24]
}
 80051f4:	bf00      	nop
 80051f6:	e7fe      	b.n	80051f6 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80051f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d01e      	beq.n	800523c <xTaskCreateStatic+0xaa>
 80051fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005200:	2b00      	cmp	r3, #0
 8005202:	d01b      	beq.n	800523c <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005206:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800520c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005210:	2202      	movs	r2, #2
 8005212:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005216:	2300      	movs	r3, #0
 8005218:	9303      	str	r3, [sp, #12]
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	9302      	str	r3, [sp, #8]
 800521e:	f107 0314 	add.w	r3, r7, #20
 8005222:	9301      	str	r3, [sp, #4]
 8005224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	68b9      	ldr	r1, [r7, #8]
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f000 f850 	bl	80052d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005234:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005236:	f000 f8e3 	bl	8005400 <prvAddNewTaskToReadyList>
 800523a:	e001      	b.n	8005240 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800523c:	2300      	movs	r3, #0
 800523e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005240:	697b      	ldr	r3, [r7, #20]
	}
 8005242:	4618      	mov	r0, r3
 8005244:	3728      	adds	r7, #40	; 0x28
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800524a:	b580      	push	{r7, lr}
 800524c:	b08c      	sub	sp, #48	; 0x30
 800524e:	af04      	add	r7, sp, #16
 8005250:	60f8      	str	r0, [r7, #12]
 8005252:	60b9      	str	r1, [r7, #8]
 8005254:	603b      	str	r3, [r7, #0]
 8005256:	4613      	mov	r3, r2
 8005258:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800525a:	88fb      	ldrh	r3, [r7, #6]
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4618      	mov	r0, r3
 8005260:	f000 fe96 	bl	8005f90 <pvPortMalloc>
 8005264:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00e      	beq.n	800528a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800526c:	20b4      	movs	r0, #180	; 0xb4
 800526e:	f000 fe8f 	bl	8005f90 <pvPortMalloc>
 8005272:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	631a      	str	r2, [r3, #48]	; 0x30
 8005280:	e005      	b.n	800528e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005282:	6978      	ldr	r0, [r7, #20]
 8005284:	f000 ff48 	bl	8006118 <vPortFree>
 8005288:	e001      	b.n	800528e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800528a:	2300      	movs	r3, #0
 800528c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d017      	beq.n	80052c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800529c:	88fa      	ldrh	r2, [r7, #6]
 800529e:	2300      	movs	r3, #0
 80052a0:	9303      	str	r3, [sp, #12]
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	9302      	str	r3, [sp, #8]
 80052a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a8:	9301      	str	r3, [sp, #4]
 80052aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	68b9      	ldr	r1, [r7, #8]
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f000 f80e 	bl	80052d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052b8:	69f8      	ldr	r0, [r7, #28]
 80052ba:	f000 f8a1 	bl	8005400 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80052be:	2301      	movs	r3, #1
 80052c0:	61bb      	str	r3, [r7, #24]
 80052c2:	e002      	b.n	80052ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80052c4:	f04f 33ff 	mov.w	r3, #4294967295
 80052c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80052ca:	69bb      	ldr	r3, [r7, #24]
	}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3720      	adds	r7, #32
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b088      	sub	sp, #32
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
 80052e0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80052e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80052ec:	3b01      	subs	r3, #1
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4413      	add	r3, r2
 80052f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	f023 0307 	bic.w	r3, r3, #7
 80052fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	f003 0307 	and.w	r3, r3, #7
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00a      	beq.n	800531c <prvInitialiseNewTask+0x48>
	__asm volatile
 8005306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530a:	f383 8811 	msr	BASEPRI, r3
 800530e:	f3bf 8f6f 	isb	sy
 8005312:	f3bf 8f4f 	dsb	sy
 8005316:	617b      	str	r3, [r7, #20]
}
 8005318:	bf00      	nop
 800531a:	e7fe      	b.n	800531a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800531c:	2300      	movs	r3, #0
 800531e:	61fb      	str	r3, [r7, #28]
 8005320:	e012      	b.n	8005348 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	4413      	add	r3, r2
 8005328:	7819      	ldrb	r1, [r3, #0]
 800532a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	4413      	add	r3, r2
 8005330:	3334      	adds	r3, #52	; 0x34
 8005332:	460a      	mov	r2, r1
 8005334:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	4413      	add	r3, r2
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d006      	beq.n	8005350 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	3301      	adds	r3, #1
 8005346:	61fb      	str	r3, [r7, #28]
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	2b0f      	cmp	r3, #15
 800534c:	d9e9      	bls.n	8005322 <prvInitialiseNewTask+0x4e>
 800534e:	e000      	b.n	8005352 <prvInitialiseNewTask+0x7e>
		{
			break;
 8005350:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005354:	2200      	movs	r2, #0
 8005356:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800535a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535c:	2b06      	cmp	r3, #6
 800535e:	d901      	bls.n	8005364 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005360:	2306      	movs	r3, #6
 8005362:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005368:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800536a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800536e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005372:	2200      	movs	r2, #0
 8005374:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005378:	3304      	adds	r3, #4
 800537a:	4618      	mov	r0, r3
 800537c:	f7ff fe79 	bl	8005072 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005382:	3318      	adds	r3, #24
 8005384:	4618      	mov	r0, r3
 8005386:	f7ff fe74 	bl	8005072 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800538a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800538e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005392:	f1c3 0207 	rsb	r2, r3, #7
 8005396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005398:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800539a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800539e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80053a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a2:	2200      	movs	r2, #0
 80053a4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80053a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80053b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b2:	334c      	adds	r3, #76	; 0x4c
 80053b4:	2260      	movs	r2, #96	; 0x60
 80053b6:	2100      	movs	r1, #0
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 fffb 	bl	80063b4 <memset>
 80053be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c0:	4a0c      	ldr	r2, [pc, #48]	; (80053f4 <prvInitialiseNewTask+0x120>)
 80053c2:	651a      	str	r2, [r3, #80]	; 0x50
 80053c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c6:	4a0c      	ldr	r2, [pc, #48]	; (80053f8 <prvInitialiseNewTask+0x124>)
 80053c8:	655a      	str	r2, [r3, #84]	; 0x54
 80053ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053cc:	4a0b      	ldr	r2, [pc, #44]	; (80053fc <prvInitialiseNewTask+0x128>)
 80053ce:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053d0:	683a      	ldr	r2, [r7, #0]
 80053d2:	68f9      	ldr	r1, [r7, #12]
 80053d4:	69b8      	ldr	r0, [r7, #24]
 80053d6:	f000 fc29 	bl	8005c2c <pxPortInitialiseStack>
 80053da:	4602      	mov	r2, r0
 80053dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053de:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80053e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d002      	beq.n	80053ec <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80053e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053ec:	bf00      	nop
 80053ee:	3720      	adds	r7, #32
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	08006ff8 	.word	0x08006ff8
 80053f8:	08007018 	.word	0x08007018
 80053fc:	08006fd8 	.word	0x08006fd8

08005400 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005408:	f000 fd00 	bl	8005e0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800540c:	4b2a      	ldr	r3, [pc, #168]	; (80054b8 <prvAddNewTaskToReadyList+0xb8>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	3301      	adds	r3, #1
 8005412:	4a29      	ldr	r2, [pc, #164]	; (80054b8 <prvAddNewTaskToReadyList+0xb8>)
 8005414:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005416:	4b29      	ldr	r3, [pc, #164]	; (80054bc <prvAddNewTaskToReadyList+0xbc>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d109      	bne.n	8005432 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800541e:	4a27      	ldr	r2, [pc, #156]	; (80054bc <prvAddNewTaskToReadyList+0xbc>)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005424:	4b24      	ldr	r3, [pc, #144]	; (80054b8 <prvAddNewTaskToReadyList+0xb8>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d110      	bne.n	800544e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800542c:	f000 fad2 	bl	80059d4 <prvInitialiseTaskLists>
 8005430:	e00d      	b.n	800544e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005432:	4b23      	ldr	r3, [pc, #140]	; (80054c0 <prvAddNewTaskToReadyList+0xc0>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d109      	bne.n	800544e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800543a:	4b20      	ldr	r3, [pc, #128]	; (80054bc <prvAddNewTaskToReadyList+0xbc>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005444:	429a      	cmp	r2, r3
 8005446:	d802      	bhi.n	800544e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005448:	4a1c      	ldr	r2, [pc, #112]	; (80054bc <prvAddNewTaskToReadyList+0xbc>)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800544e:	4b1d      	ldr	r3, [pc, #116]	; (80054c4 <prvAddNewTaskToReadyList+0xc4>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	3301      	adds	r3, #1
 8005454:	4a1b      	ldr	r2, [pc, #108]	; (80054c4 <prvAddNewTaskToReadyList+0xc4>)
 8005456:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545c:	2201      	movs	r2, #1
 800545e:	409a      	lsls	r2, r3
 8005460:	4b19      	ldr	r3, [pc, #100]	; (80054c8 <prvAddNewTaskToReadyList+0xc8>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4313      	orrs	r3, r2
 8005466:	4a18      	ldr	r2, [pc, #96]	; (80054c8 <prvAddNewTaskToReadyList+0xc8>)
 8005468:	6013      	str	r3, [r2, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800546e:	4613      	mov	r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4413      	add	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	4a15      	ldr	r2, [pc, #84]	; (80054cc <prvAddNewTaskToReadyList+0xcc>)
 8005478:	441a      	add	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	3304      	adds	r3, #4
 800547e:	4619      	mov	r1, r3
 8005480:	4610      	mov	r0, r2
 8005482:	f7ff fe02 	bl	800508a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005486:	f000 fcf1 	bl	8005e6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800548a:	4b0d      	ldr	r3, [pc, #52]	; (80054c0 <prvAddNewTaskToReadyList+0xc0>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00e      	beq.n	80054b0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005492:	4b0a      	ldr	r3, [pc, #40]	; (80054bc <prvAddNewTaskToReadyList+0xbc>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549c:	429a      	cmp	r2, r3
 800549e:	d207      	bcs.n	80054b0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80054a0:	4b0b      	ldr	r3, [pc, #44]	; (80054d0 <prvAddNewTaskToReadyList+0xd0>)
 80054a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054a6:	601a      	str	r2, [r3, #0]
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054b0:	bf00      	nop
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	200008c4 	.word	0x200008c4
 80054bc:	200007c4 	.word	0x200007c4
 80054c0:	200008d0 	.word	0x200008d0
 80054c4:	200008e0 	.word	0x200008e0
 80054c8:	200008cc 	.word	0x200008cc
 80054cc:	200007c8 	.word	0x200007c8
 80054d0:	e000ed04 	.word	0xe000ed04

080054d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80054dc:	2300      	movs	r3, #0
 80054de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d017      	beq.n	8005516 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80054e6:	4b13      	ldr	r3, [pc, #76]	; (8005534 <vTaskDelay+0x60>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00a      	beq.n	8005504 <vTaskDelay+0x30>
	__asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	60bb      	str	r3, [r7, #8]
}
 8005500:	bf00      	nop
 8005502:	e7fe      	b.n	8005502 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005504:	f000 f884 	bl	8005610 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005508:	2100      	movs	r1, #0
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 fb28 	bl	8005b60 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005510:	f000 f88c 	bl	800562c <xTaskResumeAll>
 8005514:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d107      	bne.n	800552c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800551c:	4b06      	ldr	r3, [pc, #24]	; (8005538 <vTaskDelay+0x64>)
 800551e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	f3bf 8f4f 	dsb	sy
 8005528:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800552c:	bf00      	nop
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	200008ec 	.word	0x200008ec
 8005538:	e000ed04 	.word	0xe000ed04

0800553c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b08a      	sub	sp, #40	; 0x28
 8005540:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005542:	2300      	movs	r3, #0
 8005544:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005546:	2300      	movs	r3, #0
 8005548:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800554a:	463a      	mov	r2, r7
 800554c:	1d39      	adds	r1, r7, #4
 800554e:	f107 0308 	add.w	r3, r7, #8
 8005552:	4618      	mov	r0, r3
 8005554:	f7fb fd20 	bl	8000f98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005558:	6839      	ldr	r1, [r7, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	9202      	str	r2, [sp, #8]
 8005560:	9301      	str	r3, [sp, #4]
 8005562:	2300      	movs	r3, #0
 8005564:	9300      	str	r3, [sp, #0]
 8005566:	2300      	movs	r3, #0
 8005568:	460a      	mov	r2, r1
 800556a:	4921      	ldr	r1, [pc, #132]	; (80055f0 <vTaskStartScheduler+0xb4>)
 800556c:	4821      	ldr	r0, [pc, #132]	; (80055f4 <vTaskStartScheduler+0xb8>)
 800556e:	f7ff fe10 	bl	8005192 <xTaskCreateStatic>
 8005572:	4603      	mov	r3, r0
 8005574:	4a20      	ldr	r2, [pc, #128]	; (80055f8 <vTaskStartScheduler+0xbc>)
 8005576:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005578:	4b1f      	ldr	r3, [pc, #124]	; (80055f8 <vTaskStartScheduler+0xbc>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005580:	2301      	movs	r3, #1
 8005582:	617b      	str	r3, [r7, #20]
 8005584:	e001      	b.n	800558a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005586:	2300      	movs	r3, #0
 8005588:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d11b      	bne.n	80055c8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	613b      	str	r3, [r7, #16]
}
 80055a2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80055a4:	4b15      	ldr	r3, [pc, #84]	; (80055fc <vTaskStartScheduler+0xc0>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	334c      	adds	r3, #76	; 0x4c
 80055aa:	4a15      	ldr	r2, [pc, #84]	; (8005600 <vTaskStartScheduler+0xc4>)
 80055ac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80055ae:	4b15      	ldr	r3, [pc, #84]	; (8005604 <vTaskStartScheduler+0xc8>)
 80055b0:	f04f 32ff 	mov.w	r2, #4294967295
 80055b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80055b6:	4b14      	ldr	r3, [pc, #80]	; (8005608 <vTaskStartScheduler+0xcc>)
 80055b8:	2201      	movs	r2, #1
 80055ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80055bc:	4b13      	ldr	r3, [pc, #76]	; (800560c <vTaskStartScheduler+0xd0>)
 80055be:	2200      	movs	r2, #0
 80055c0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80055c2:	f000 fbb1 	bl	8005d28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80055c6:	e00e      	b.n	80055e6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ce:	d10a      	bne.n	80055e6 <vTaskStartScheduler+0xaa>
	__asm volatile
 80055d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	60fb      	str	r3, [r7, #12]
}
 80055e2:	bf00      	nop
 80055e4:	e7fe      	b.n	80055e4 <vTaskStartScheduler+0xa8>
}
 80055e6:	bf00      	nop
 80055e8:	3718      	adds	r7, #24
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	08006ddc 	.word	0x08006ddc
 80055f4:	080059a5 	.word	0x080059a5
 80055f8:	200008e8 	.word	0x200008e8
 80055fc:	200007c4 	.word	0x200007c4
 8005600:	20000024 	.word	0x20000024
 8005604:	200008e4 	.word	0x200008e4
 8005608:	200008d0 	.word	0x200008d0
 800560c:	200008c8 	.word	0x200008c8

08005610 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005610:	b480      	push	{r7}
 8005612:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005614:	4b04      	ldr	r3, [pc, #16]	; (8005628 <vTaskSuspendAll+0x18>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3301      	adds	r3, #1
 800561a:	4a03      	ldr	r2, [pc, #12]	; (8005628 <vTaskSuspendAll+0x18>)
 800561c:	6013      	str	r3, [r2, #0]
}
 800561e:	bf00      	nop
 8005620:	46bd      	mov	sp, r7
 8005622:	bc80      	pop	{r7}
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	200008ec 	.word	0x200008ec

0800562c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005632:	2300      	movs	r3, #0
 8005634:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005636:	2300      	movs	r3, #0
 8005638:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800563a:	4b41      	ldr	r3, [pc, #260]	; (8005740 <xTaskResumeAll+0x114>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10a      	bne.n	8005658 <xTaskResumeAll+0x2c>
	__asm volatile
 8005642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005646:	f383 8811 	msr	BASEPRI, r3
 800564a:	f3bf 8f6f 	isb	sy
 800564e:	f3bf 8f4f 	dsb	sy
 8005652:	603b      	str	r3, [r7, #0]
}
 8005654:	bf00      	nop
 8005656:	e7fe      	b.n	8005656 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005658:	f000 fbd8 	bl	8005e0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800565c:	4b38      	ldr	r3, [pc, #224]	; (8005740 <xTaskResumeAll+0x114>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	3b01      	subs	r3, #1
 8005662:	4a37      	ldr	r2, [pc, #220]	; (8005740 <xTaskResumeAll+0x114>)
 8005664:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005666:	4b36      	ldr	r3, [pc, #216]	; (8005740 <xTaskResumeAll+0x114>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d161      	bne.n	8005732 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800566e:	4b35      	ldr	r3, [pc, #212]	; (8005744 <xTaskResumeAll+0x118>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d05d      	beq.n	8005732 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005676:	e02e      	b.n	80056d6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005678:	4b33      	ldr	r3, [pc, #204]	; (8005748 <xTaskResumeAll+0x11c>)
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	3318      	adds	r3, #24
 8005684:	4618      	mov	r0, r3
 8005686:	f7ff fd5b 	bl	8005140 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	3304      	adds	r3, #4
 800568e:	4618      	mov	r0, r3
 8005690:	f7ff fd56 	bl	8005140 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005698:	2201      	movs	r2, #1
 800569a:	409a      	lsls	r2, r3
 800569c:	4b2b      	ldr	r3, [pc, #172]	; (800574c <xTaskResumeAll+0x120>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	4a2a      	ldr	r2, [pc, #168]	; (800574c <xTaskResumeAll+0x120>)
 80056a4:	6013      	str	r3, [r2, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056aa:	4613      	mov	r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	4413      	add	r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4a27      	ldr	r2, [pc, #156]	; (8005750 <xTaskResumeAll+0x124>)
 80056b4:	441a      	add	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	3304      	adds	r3, #4
 80056ba:	4619      	mov	r1, r3
 80056bc:	4610      	mov	r0, r2
 80056be:	f7ff fce4 	bl	800508a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056c6:	4b23      	ldr	r3, [pc, #140]	; (8005754 <xTaskResumeAll+0x128>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d302      	bcc.n	80056d6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80056d0:	4b21      	ldr	r3, [pc, #132]	; (8005758 <xTaskResumeAll+0x12c>)
 80056d2:	2201      	movs	r2, #1
 80056d4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056d6:	4b1c      	ldr	r3, [pc, #112]	; (8005748 <xTaskResumeAll+0x11c>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1cc      	bne.n	8005678 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d001      	beq.n	80056e8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80056e4:	f000 fa18 	bl	8005b18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80056e8:	4b1c      	ldr	r3, [pc, #112]	; (800575c <xTaskResumeAll+0x130>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d010      	beq.n	8005716 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80056f4:	f000 f836 	bl	8005764 <xTaskIncrementTick>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d002      	beq.n	8005704 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80056fe:	4b16      	ldr	r3, [pc, #88]	; (8005758 <xTaskResumeAll+0x12c>)
 8005700:	2201      	movs	r2, #1
 8005702:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	3b01      	subs	r3, #1
 8005708:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1f1      	bne.n	80056f4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005710:	4b12      	ldr	r3, [pc, #72]	; (800575c <xTaskResumeAll+0x130>)
 8005712:	2200      	movs	r2, #0
 8005714:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005716:	4b10      	ldr	r3, [pc, #64]	; (8005758 <xTaskResumeAll+0x12c>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d009      	beq.n	8005732 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800571e:	2301      	movs	r3, #1
 8005720:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005722:	4b0f      	ldr	r3, [pc, #60]	; (8005760 <xTaskResumeAll+0x134>)
 8005724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	f3bf 8f4f 	dsb	sy
 800572e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005732:	f000 fb9b 	bl	8005e6c <vPortExitCritical>

	return xAlreadyYielded;
 8005736:	68bb      	ldr	r3, [r7, #8]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	200008ec 	.word	0x200008ec
 8005744:	200008c4 	.word	0x200008c4
 8005748:	20000884 	.word	0x20000884
 800574c:	200008cc 	.word	0x200008cc
 8005750:	200007c8 	.word	0x200007c8
 8005754:	200007c4 	.word	0x200007c4
 8005758:	200008d8 	.word	0x200008d8
 800575c:	200008d4 	.word	0x200008d4
 8005760:	e000ed04 	.word	0xe000ed04

08005764 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800576a:	2300      	movs	r3, #0
 800576c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800576e:	4b51      	ldr	r3, [pc, #324]	; (80058b4 <xTaskIncrementTick+0x150>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	f040 808d 	bne.w	8005892 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005778:	4b4f      	ldr	r3, [pc, #316]	; (80058b8 <xTaskIncrementTick+0x154>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	3301      	adds	r3, #1
 800577e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005780:	4a4d      	ldr	r2, [pc, #308]	; (80058b8 <xTaskIncrementTick+0x154>)
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d120      	bne.n	80057ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800578c:	4b4b      	ldr	r3, [pc, #300]	; (80058bc <xTaskIncrementTick+0x158>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00a      	beq.n	80057ac <xTaskIncrementTick+0x48>
	__asm volatile
 8005796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579a:	f383 8811 	msr	BASEPRI, r3
 800579e:	f3bf 8f6f 	isb	sy
 80057a2:	f3bf 8f4f 	dsb	sy
 80057a6:	603b      	str	r3, [r7, #0]
}
 80057a8:	bf00      	nop
 80057aa:	e7fe      	b.n	80057aa <xTaskIncrementTick+0x46>
 80057ac:	4b43      	ldr	r3, [pc, #268]	; (80058bc <xTaskIncrementTick+0x158>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	60fb      	str	r3, [r7, #12]
 80057b2:	4b43      	ldr	r3, [pc, #268]	; (80058c0 <xTaskIncrementTick+0x15c>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a41      	ldr	r2, [pc, #260]	; (80058bc <xTaskIncrementTick+0x158>)
 80057b8:	6013      	str	r3, [r2, #0]
 80057ba:	4a41      	ldr	r2, [pc, #260]	; (80058c0 <xTaskIncrementTick+0x15c>)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6013      	str	r3, [r2, #0]
 80057c0:	4b40      	ldr	r3, [pc, #256]	; (80058c4 <xTaskIncrementTick+0x160>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	3301      	adds	r3, #1
 80057c6:	4a3f      	ldr	r2, [pc, #252]	; (80058c4 <xTaskIncrementTick+0x160>)
 80057c8:	6013      	str	r3, [r2, #0]
 80057ca:	f000 f9a5 	bl	8005b18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80057ce:	4b3e      	ldr	r3, [pc, #248]	; (80058c8 <xTaskIncrementTick+0x164>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d34d      	bcc.n	8005874 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057d8:	4b38      	ldr	r3, [pc, #224]	; (80058bc <xTaskIncrementTick+0x158>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <xTaskIncrementTick+0x82>
 80057e2:	2301      	movs	r3, #1
 80057e4:	e000      	b.n	80057e8 <xTaskIncrementTick+0x84>
 80057e6:	2300      	movs	r3, #0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d004      	beq.n	80057f6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057ec:	4b36      	ldr	r3, [pc, #216]	; (80058c8 <xTaskIncrementTick+0x164>)
 80057ee:	f04f 32ff 	mov.w	r2, #4294967295
 80057f2:	601a      	str	r2, [r3, #0]
					break;
 80057f4:	e03e      	b.n	8005874 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80057f6:	4b31      	ldr	r3, [pc, #196]	; (80058bc <xTaskIncrementTick+0x158>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	429a      	cmp	r2, r3
 800580c:	d203      	bcs.n	8005816 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800580e:	4a2e      	ldr	r2, [pc, #184]	; (80058c8 <xTaskIncrementTick+0x164>)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6013      	str	r3, [r2, #0]
						break;
 8005814:	e02e      	b.n	8005874 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	3304      	adds	r3, #4
 800581a:	4618      	mov	r0, r3
 800581c:	f7ff fc90 	bl	8005140 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005824:	2b00      	cmp	r3, #0
 8005826:	d004      	beq.n	8005832 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	3318      	adds	r3, #24
 800582c:	4618      	mov	r0, r3
 800582e:	f7ff fc87 	bl	8005140 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005836:	2201      	movs	r2, #1
 8005838:	409a      	lsls	r2, r3
 800583a:	4b24      	ldr	r3, [pc, #144]	; (80058cc <xTaskIncrementTick+0x168>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4313      	orrs	r3, r2
 8005840:	4a22      	ldr	r2, [pc, #136]	; (80058cc <xTaskIncrementTick+0x168>)
 8005842:	6013      	str	r3, [r2, #0]
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005848:	4613      	mov	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4413      	add	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4a1f      	ldr	r2, [pc, #124]	; (80058d0 <xTaskIncrementTick+0x16c>)
 8005852:	441a      	add	r2, r3
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	3304      	adds	r3, #4
 8005858:	4619      	mov	r1, r3
 800585a:	4610      	mov	r0, r2
 800585c:	f7ff fc15 	bl	800508a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005864:	4b1b      	ldr	r3, [pc, #108]	; (80058d4 <xTaskIncrementTick+0x170>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586a:	429a      	cmp	r2, r3
 800586c:	d3b4      	bcc.n	80057d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800586e:	2301      	movs	r3, #1
 8005870:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005872:	e7b1      	b.n	80057d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005874:	4b17      	ldr	r3, [pc, #92]	; (80058d4 <xTaskIncrementTick+0x170>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800587a:	4915      	ldr	r1, [pc, #84]	; (80058d0 <xTaskIncrementTick+0x16c>)
 800587c:	4613      	mov	r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	4413      	add	r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	440b      	add	r3, r1
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d907      	bls.n	800589c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800588c:	2301      	movs	r3, #1
 800588e:	617b      	str	r3, [r7, #20]
 8005890:	e004      	b.n	800589c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005892:	4b11      	ldr	r3, [pc, #68]	; (80058d8 <xTaskIncrementTick+0x174>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	3301      	adds	r3, #1
 8005898:	4a0f      	ldr	r2, [pc, #60]	; (80058d8 <xTaskIncrementTick+0x174>)
 800589a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800589c:	4b0f      	ldr	r3, [pc, #60]	; (80058dc <xTaskIncrementTick+0x178>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d001      	beq.n	80058a8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80058a4:	2301      	movs	r3, #1
 80058a6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80058a8:	697b      	ldr	r3, [r7, #20]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3718      	adds	r7, #24
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	200008ec 	.word	0x200008ec
 80058b8:	200008c8 	.word	0x200008c8
 80058bc:	2000087c 	.word	0x2000087c
 80058c0:	20000880 	.word	0x20000880
 80058c4:	200008dc 	.word	0x200008dc
 80058c8:	200008e4 	.word	0x200008e4
 80058cc:	200008cc 	.word	0x200008cc
 80058d0:	200007c8 	.word	0x200007c8
 80058d4:	200007c4 	.word	0x200007c4
 80058d8:	200008d4 	.word	0x200008d4
 80058dc:	200008d8 	.word	0x200008d8

080058e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80058e0:	b480      	push	{r7}
 80058e2:	b087      	sub	sp, #28
 80058e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058e6:	4b29      	ldr	r3, [pc, #164]	; (800598c <vTaskSwitchContext+0xac>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d003      	beq.n	80058f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80058ee:	4b28      	ldr	r3, [pc, #160]	; (8005990 <vTaskSwitchContext+0xb0>)
 80058f0:	2201      	movs	r2, #1
 80058f2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058f4:	e044      	b.n	8005980 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80058f6:	4b26      	ldr	r3, [pc, #152]	; (8005990 <vTaskSwitchContext+0xb0>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80058fc:	4b25      	ldr	r3, [pc, #148]	; (8005994 <vTaskSwitchContext+0xb4>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	fab3 f383 	clz	r3, r3
 8005908:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800590a:	7afb      	ldrb	r3, [r7, #11]
 800590c:	f1c3 031f 	rsb	r3, r3, #31
 8005910:	617b      	str	r3, [r7, #20]
 8005912:	4921      	ldr	r1, [pc, #132]	; (8005998 <vTaskSwitchContext+0xb8>)
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	4613      	mov	r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4413      	add	r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	440b      	add	r3, r1
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10a      	bne.n	800593c <vTaskSwitchContext+0x5c>
	__asm volatile
 8005926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592a:	f383 8811 	msr	BASEPRI, r3
 800592e:	f3bf 8f6f 	isb	sy
 8005932:	f3bf 8f4f 	dsb	sy
 8005936:	607b      	str	r3, [r7, #4]
}
 8005938:	bf00      	nop
 800593a:	e7fe      	b.n	800593a <vTaskSwitchContext+0x5a>
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	4613      	mov	r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	4413      	add	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4a14      	ldr	r2, [pc, #80]	; (8005998 <vTaskSwitchContext+0xb8>)
 8005948:	4413      	add	r3, r2
 800594a:	613b      	str	r3, [r7, #16]
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	605a      	str	r2, [r3, #4]
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	3308      	adds	r3, #8
 800595e:	429a      	cmp	r2, r3
 8005960:	d104      	bne.n	800596c <vTaskSwitchContext+0x8c>
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	605a      	str	r2, [r3, #4]
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	4a0a      	ldr	r2, [pc, #40]	; (800599c <vTaskSwitchContext+0xbc>)
 8005974:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005976:	4b09      	ldr	r3, [pc, #36]	; (800599c <vTaskSwitchContext+0xbc>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	334c      	adds	r3, #76	; 0x4c
 800597c:	4a08      	ldr	r2, [pc, #32]	; (80059a0 <vTaskSwitchContext+0xc0>)
 800597e:	6013      	str	r3, [r2, #0]
}
 8005980:	bf00      	nop
 8005982:	371c      	adds	r7, #28
 8005984:	46bd      	mov	sp, r7
 8005986:	bc80      	pop	{r7}
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	200008ec 	.word	0x200008ec
 8005990:	200008d8 	.word	0x200008d8
 8005994:	200008cc 	.word	0x200008cc
 8005998:	200007c8 	.word	0x200007c8
 800599c:	200007c4 	.word	0x200007c4
 80059a0:	20000024 	.word	0x20000024

080059a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80059ac:	f000 f852 	bl	8005a54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80059b0:	4b06      	ldr	r3, [pc, #24]	; (80059cc <prvIdleTask+0x28>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d9f9      	bls.n	80059ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80059b8:	4b05      	ldr	r3, [pc, #20]	; (80059d0 <prvIdleTask+0x2c>)
 80059ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059be:	601a      	str	r2, [r3, #0]
 80059c0:	f3bf 8f4f 	dsb	sy
 80059c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80059c8:	e7f0      	b.n	80059ac <prvIdleTask+0x8>
 80059ca:	bf00      	nop
 80059cc:	200007c8 	.word	0x200007c8
 80059d0:	e000ed04 	.word	0xe000ed04

080059d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059da:	2300      	movs	r3, #0
 80059dc:	607b      	str	r3, [r7, #4]
 80059de:	e00c      	b.n	80059fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	4613      	mov	r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	4413      	add	r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4a12      	ldr	r2, [pc, #72]	; (8005a34 <prvInitialiseTaskLists+0x60>)
 80059ec:	4413      	add	r3, r2
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7ff fb20 	bl	8005034 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	3301      	adds	r3, #1
 80059f8:	607b      	str	r3, [r7, #4]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b06      	cmp	r3, #6
 80059fe:	d9ef      	bls.n	80059e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a00:	480d      	ldr	r0, [pc, #52]	; (8005a38 <prvInitialiseTaskLists+0x64>)
 8005a02:	f7ff fb17 	bl	8005034 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a06:	480d      	ldr	r0, [pc, #52]	; (8005a3c <prvInitialiseTaskLists+0x68>)
 8005a08:	f7ff fb14 	bl	8005034 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a0c:	480c      	ldr	r0, [pc, #48]	; (8005a40 <prvInitialiseTaskLists+0x6c>)
 8005a0e:	f7ff fb11 	bl	8005034 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a12:	480c      	ldr	r0, [pc, #48]	; (8005a44 <prvInitialiseTaskLists+0x70>)
 8005a14:	f7ff fb0e 	bl	8005034 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a18:	480b      	ldr	r0, [pc, #44]	; (8005a48 <prvInitialiseTaskLists+0x74>)
 8005a1a:	f7ff fb0b 	bl	8005034 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a1e:	4b0b      	ldr	r3, [pc, #44]	; (8005a4c <prvInitialiseTaskLists+0x78>)
 8005a20:	4a05      	ldr	r2, [pc, #20]	; (8005a38 <prvInitialiseTaskLists+0x64>)
 8005a22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a24:	4b0a      	ldr	r3, [pc, #40]	; (8005a50 <prvInitialiseTaskLists+0x7c>)
 8005a26:	4a05      	ldr	r2, [pc, #20]	; (8005a3c <prvInitialiseTaskLists+0x68>)
 8005a28:	601a      	str	r2, [r3, #0]
}
 8005a2a:	bf00      	nop
 8005a2c:	3708      	adds	r7, #8
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	200007c8 	.word	0x200007c8
 8005a38:	20000854 	.word	0x20000854
 8005a3c:	20000868 	.word	0x20000868
 8005a40:	20000884 	.word	0x20000884
 8005a44:	20000898 	.word	0x20000898
 8005a48:	200008b0 	.word	0x200008b0
 8005a4c:	2000087c 	.word	0x2000087c
 8005a50:	20000880 	.word	0x20000880

08005a54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a5a:	e019      	b.n	8005a90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a5c:	f000 f9d6 	bl	8005e0c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005a60:	4b10      	ldr	r3, [pc, #64]	; (8005aa4 <prvCheckTasksWaitingTermination+0x50>)
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	3304      	adds	r3, #4
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7ff fb67 	bl	8005140 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a72:	4b0d      	ldr	r3, [pc, #52]	; (8005aa8 <prvCheckTasksWaitingTermination+0x54>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	3b01      	subs	r3, #1
 8005a78:	4a0b      	ldr	r2, [pc, #44]	; (8005aa8 <prvCheckTasksWaitingTermination+0x54>)
 8005a7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a7c:	4b0b      	ldr	r3, [pc, #44]	; (8005aac <prvCheckTasksWaitingTermination+0x58>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	3b01      	subs	r3, #1
 8005a82:	4a0a      	ldr	r2, [pc, #40]	; (8005aac <prvCheckTasksWaitingTermination+0x58>)
 8005a84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a86:	f000 f9f1 	bl	8005e6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f810 	bl	8005ab0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a90:	4b06      	ldr	r3, [pc, #24]	; (8005aac <prvCheckTasksWaitingTermination+0x58>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d1e1      	bne.n	8005a5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a98:	bf00      	nop
 8005a9a:	bf00      	nop
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	20000898 	.word	0x20000898
 8005aa8:	200008c4 	.word	0x200008c4
 8005aac:	200008ac 	.word	0x200008ac

08005ab0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	334c      	adds	r3, #76	; 0x4c
 8005abc:	4618      	mov	r0, r3
 8005abe:	f000 fce9 	bl	8006494 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d108      	bne.n	8005ade <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 fb21 	bl	8006118 <vPortFree>
				vPortFree( pxTCB );
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 fb1e 	bl	8006118 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005adc:	e018      	b.n	8005b10 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d103      	bne.n	8005af0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 fb15 	bl	8006118 <vPortFree>
	}
 8005aee:	e00f      	b.n	8005b10 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d00a      	beq.n	8005b10 <prvDeleteTCB+0x60>
	__asm volatile
 8005afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afe:	f383 8811 	msr	BASEPRI, r3
 8005b02:	f3bf 8f6f 	isb	sy
 8005b06:	f3bf 8f4f 	dsb	sy
 8005b0a:	60fb      	str	r3, [r7, #12]
}
 8005b0c:	bf00      	nop
 8005b0e:	e7fe      	b.n	8005b0e <prvDeleteTCB+0x5e>
	}
 8005b10:	bf00      	nop
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b1e:	4b0e      	ldr	r3, [pc, #56]	; (8005b58 <prvResetNextTaskUnblockTime+0x40>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d101      	bne.n	8005b2c <prvResetNextTaskUnblockTime+0x14>
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e000      	b.n	8005b2e <prvResetNextTaskUnblockTime+0x16>
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d004      	beq.n	8005b3c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b32:	4b0a      	ldr	r3, [pc, #40]	; (8005b5c <prvResetNextTaskUnblockTime+0x44>)
 8005b34:	f04f 32ff 	mov.w	r2, #4294967295
 8005b38:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b3a:	e008      	b.n	8005b4e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005b3c:	4b06      	ldr	r3, [pc, #24]	; (8005b58 <prvResetNextTaskUnblockTime+0x40>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	4a04      	ldr	r2, [pc, #16]	; (8005b5c <prvResetNextTaskUnblockTime+0x44>)
 8005b4c:	6013      	str	r3, [r2, #0]
}
 8005b4e:	bf00      	nop
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bc80      	pop	{r7}
 8005b56:	4770      	bx	lr
 8005b58:	2000087c 	.word	0x2000087c
 8005b5c:	200008e4 	.word	0x200008e4

08005b60 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b6a:	4b29      	ldr	r3, [pc, #164]	; (8005c10 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b70:	4b28      	ldr	r3, [pc, #160]	; (8005c14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	3304      	adds	r3, #4
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7ff fae2 	bl	8005140 <uxListRemove>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10b      	bne.n	8005b9a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005b82:	4b24      	ldr	r3, [pc, #144]	; (8005c14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b88:	2201      	movs	r2, #1
 8005b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8e:	43da      	mvns	r2, r3
 8005b90:	4b21      	ldr	r3, [pc, #132]	; (8005c18 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4013      	ands	r3, r2
 8005b96:	4a20      	ldr	r2, [pc, #128]	; (8005c18 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005b98:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba0:	d10a      	bne.n	8005bb8 <prvAddCurrentTaskToDelayedList+0x58>
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d007      	beq.n	8005bb8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ba8:	4b1a      	ldr	r3, [pc, #104]	; (8005c14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	3304      	adds	r3, #4
 8005bae:	4619      	mov	r1, r3
 8005bb0:	481a      	ldr	r0, [pc, #104]	; (8005c1c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005bb2:	f7ff fa6a 	bl	800508a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005bb6:	e026      	b.n	8005c06 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005bc0:	4b14      	ldr	r3, [pc, #80]	; (8005c14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d209      	bcs.n	8005be4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bd0:	4b13      	ldr	r3, [pc, #76]	; (8005c20 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	4b0f      	ldr	r3, [pc, #60]	; (8005c14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	3304      	adds	r3, #4
 8005bda:	4619      	mov	r1, r3
 8005bdc:	4610      	mov	r0, r2
 8005bde:	f7ff fa77 	bl	80050d0 <vListInsert>
}
 8005be2:	e010      	b.n	8005c06 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005be4:	4b0f      	ldr	r3, [pc, #60]	; (8005c24 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	4b0a      	ldr	r3, [pc, #40]	; (8005c14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	3304      	adds	r3, #4
 8005bee:	4619      	mov	r1, r3
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	f7ff fa6d 	bl	80050d0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005bf6:	4b0c      	ldr	r3, [pc, #48]	; (8005c28 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d202      	bcs.n	8005c06 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005c00:	4a09      	ldr	r2, [pc, #36]	; (8005c28 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	6013      	str	r3, [r2, #0]
}
 8005c06:	bf00      	nop
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	200008c8 	.word	0x200008c8
 8005c14:	200007c4 	.word	0x200007c4
 8005c18:	200008cc 	.word	0x200008cc
 8005c1c:	200008b0 	.word	0x200008b0
 8005c20:	20000880 	.word	0x20000880
 8005c24:	2000087c 	.word	0x2000087c
 8005c28:	200008e4 	.word	0x200008e4

08005c2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	3b04      	subs	r3, #4
 8005c3c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005c44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	3b04      	subs	r3, #4
 8005c4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f023 0201 	bic.w	r2, r3, #1
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	3b04      	subs	r3, #4
 8005c5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005c5c:	4a08      	ldr	r2, [pc, #32]	; (8005c80 <pxPortInitialiseStack+0x54>)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	3b14      	subs	r3, #20
 8005c66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	3b20      	subs	r3, #32
 8005c72:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005c74:	68fb      	ldr	r3, [r7, #12]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3714      	adds	r7, #20
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bc80      	pop	{r7}
 8005c7e:	4770      	bx	lr
 8005c80:	08005c85 	.word	0x08005c85

08005c84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005c8e:	4b12      	ldr	r3, [pc, #72]	; (8005cd8 <prvTaskExitError+0x54>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c96:	d00a      	beq.n	8005cae <prvTaskExitError+0x2a>
	__asm volatile
 8005c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9c:	f383 8811 	msr	BASEPRI, r3
 8005ca0:	f3bf 8f6f 	isb	sy
 8005ca4:	f3bf 8f4f 	dsb	sy
 8005ca8:	60fb      	str	r3, [r7, #12]
}
 8005caa:	bf00      	nop
 8005cac:	e7fe      	b.n	8005cac <prvTaskExitError+0x28>
	__asm volatile
 8005cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb2:	f383 8811 	msr	BASEPRI, r3
 8005cb6:	f3bf 8f6f 	isb	sy
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	60bb      	str	r3, [r7, #8]
}
 8005cc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005cc2:	bf00      	nop
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d0fc      	beq.n	8005cc4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005cca:	bf00      	nop
 8005ccc:	bf00      	nop
 8005cce:	3714      	adds	r7, #20
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bc80      	pop	{r7}
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	20000020 	.word	0x20000020
 8005cdc:	00000000 	.word	0x00000000

08005ce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ce0:	4b07      	ldr	r3, [pc, #28]	; (8005d00 <pxCurrentTCBConst2>)
 8005ce2:	6819      	ldr	r1, [r3, #0]
 8005ce4:	6808      	ldr	r0, [r1, #0]
 8005ce6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005cea:	f380 8809 	msr	PSP, r0
 8005cee:	f3bf 8f6f 	isb	sy
 8005cf2:	f04f 0000 	mov.w	r0, #0
 8005cf6:	f380 8811 	msr	BASEPRI, r0
 8005cfa:	f04e 0e0d 	orr.w	lr, lr, #13
 8005cfe:	4770      	bx	lr

08005d00 <pxCurrentTCBConst2>:
 8005d00:	200007c4 	.word	0x200007c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005d04:	bf00      	nop
 8005d06:	bf00      	nop

08005d08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005d08:	4806      	ldr	r0, [pc, #24]	; (8005d24 <prvPortStartFirstTask+0x1c>)
 8005d0a:	6800      	ldr	r0, [r0, #0]
 8005d0c:	6800      	ldr	r0, [r0, #0]
 8005d0e:	f380 8808 	msr	MSP, r0
 8005d12:	b662      	cpsie	i
 8005d14:	b661      	cpsie	f
 8005d16:	f3bf 8f4f 	dsb	sy
 8005d1a:	f3bf 8f6f 	isb	sy
 8005d1e:	df00      	svc	0
 8005d20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005d22:	bf00      	nop
 8005d24:	e000ed08 	.word	0xe000ed08

08005d28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d2e:	4b32      	ldr	r3, [pc, #200]	; (8005df8 <xPortStartScheduler+0xd0>)
 8005d30:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	22ff      	movs	r2, #255	; 0xff
 8005d3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d48:	78fb      	ldrb	r3, [r7, #3]
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	4b2a      	ldr	r3, [pc, #168]	; (8005dfc <xPortStartScheduler+0xd4>)
 8005d54:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d56:	4b2a      	ldr	r3, [pc, #168]	; (8005e00 <xPortStartScheduler+0xd8>)
 8005d58:	2207      	movs	r2, #7
 8005d5a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d5c:	e009      	b.n	8005d72 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005d5e:	4b28      	ldr	r3, [pc, #160]	; (8005e00 <xPortStartScheduler+0xd8>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	3b01      	subs	r3, #1
 8005d64:	4a26      	ldr	r2, [pc, #152]	; (8005e00 <xPortStartScheduler+0xd8>)
 8005d66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d68:	78fb      	ldrb	r3, [r7, #3]
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d72:	78fb      	ldrb	r3, [r7, #3]
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d7a:	2b80      	cmp	r3, #128	; 0x80
 8005d7c:	d0ef      	beq.n	8005d5e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d7e:	4b20      	ldr	r3, [pc, #128]	; (8005e00 <xPortStartScheduler+0xd8>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f1c3 0307 	rsb	r3, r3, #7
 8005d86:	2b04      	cmp	r3, #4
 8005d88:	d00a      	beq.n	8005da0 <xPortStartScheduler+0x78>
	__asm volatile
 8005d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8e:	f383 8811 	msr	BASEPRI, r3
 8005d92:	f3bf 8f6f 	isb	sy
 8005d96:	f3bf 8f4f 	dsb	sy
 8005d9a:	60bb      	str	r3, [r7, #8]
}
 8005d9c:	bf00      	nop
 8005d9e:	e7fe      	b.n	8005d9e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005da0:	4b17      	ldr	r3, [pc, #92]	; (8005e00 <xPortStartScheduler+0xd8>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	021b      	lsls	r3, r3, #8
 8005da6:	4a16      	ldr	r2, [pc, #88]	; (8005e00 <xPortStartScheduler+0xd8>)
 8005da8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005daa:	4b15      	ldr	r3, [pc, #84]	; (8005e00 <xPortStartScheduler+0xd8>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005db2:	4a13      	ldr	r2, [pc, #76]	; (8005e00 <xPortStartScheduler+0xd8>)
 8005db4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	b2da      	uxtb	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005dbe:	4b11      	ldr	r3, [pc, #68]	; (8005e04 <xPortStartScheduler+0xdc>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a10      	ldr	r2, [pc, #64]	; (8005e04 <xPortStartScheduler+0xdc>)
 8005dc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005dc8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005dca:	4b0e      	ldr	r3, [pc, #56]	; (8005e04 <xPortStartScheduler+0xdc>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a0d      	ldr	r2, [pc, #52]	; (8005e04 <xPortStartScheduler+0xdc>)
 8005dd0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005dd4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005dd6:	f000 f8b9 	bl	8005f4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005dda:	4b0b      	ldr	r3, [pc, #44]	; (8005e08 <xPortStartScheduler+0xe0>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005de0:	f7ff ff92 	bl	8005d08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005de4:	f7ff fd7c 	bl	80058e0 <vTaskSwitchContext>
	prvTaskExitError();
 8005de8:	f7ff ff4c 	bl	8005c84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	e000e400 	.word	0xe000e400
 8005dfc:	200008f0 	.word	0x200008f0
 8005e00:	200008f4 	.word	0x200008f4
 8005e04:	e000ed20 	.word	0xe000ed20
 8005e08:	20000020 	.word	0x20000020

08005e0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
	__asm volatile
 8005e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	607b      	str	r3, [r7, #4]
}
 8005e24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005e26:	4b0f      	ldr	r3, [pc, #60]	; (8005e64 <vPortEnterCritical+0x58>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	4a0d      	ldr	r2, [pc, #52]	; (8005e64 <vPortEnterCritical+0x58>)
 8005e2e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005e30:	4b0c      	ldr	r3, [pc, #48]	; (8005e64 <vPortEnterCritical+0x58>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d10f      	bne.n	8005e58 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e38:	4b0b      	ldr	r3, [pc, #44]	; (8005e68 <vPortEnterCritical+0x5c>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00a      	beq.n	8005e58 <vPortEnterCritical+0x4c>
	__asm volatile
 8005e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e46:	f383 8811 	msr	BASEPRI, r3
 8005e4a:	f3bf 8f6f 	isb	sy
 8005e4e:	f3bf 8f4f 	dsb	sy
 8005e52:	603b      	str	r3, [r7, #0]
}
 8005e54:	bf00      	nop
 8005e56:	e7fe      	b.n	8005e56 <vPortEnterCritical+0x4a>
	}
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bc80      	pop	{r7}
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	20000020 	.word	0x20000020
 8005e68:	e000ed04 	.word	0xe000ed04

08005e6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e72:	4b11      	ldr	r3, [pc, #68]	; (8005eb8 <vPortExitCritical+0x4c>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10a      	bne.n	8005e90 <vPortExitCritical+0x24>
	__asm volatile
 8005e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7e:	f383 8811 	msr	BASEPRI, r3
 8005e82:	f3bf 8f6f 	isb	sy
 8005e86:	f3bf 8f4f 	dsb	sy
 8005e8a:	607b      	str	r3, [r7, #4]
}
 8005e8c:	bf00      	nop
 8005e8e:	e7fe      	b.n	8005e8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005e90:	4b09      	ldr	r3, [pc, #36]	; (8005eb8 <vPortExitCritical+0x4c>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	3b01      	subs	r3, #1
 8005e96:	4a08      	ldr	r2, [pc, #32]	; (8005eb8 <vPortExitCritical+0x4c>)
 8005e98:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e9a:	4b07      	ldr	r3, [pc, #28]	; (8005eb8 <vPortExitCritical+0x4c>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d105      	bne.n	8005eae <vPortExitCritical+0x42>
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005eac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005eae:	bf00      	nop
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bc80      	pop	{r7}
 8005eb6:	4770      	bx	lr
 8005eb8:	20000020 	.word	0x20000020
 8005ebc:	00000000 	.word	0x00000000

08005ec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ec0:	f3ef 8009 	mrs	r0, PSP
 8005ec4:	f3bf 8f6f 	isb	sy
 8005ec8:	4b0d      	ldr	r3, [pc, #52]	; (8005f00 <pxCurrentTCBConst>)
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005ed0:	6010      	str	r0, [r2, #0]
 8005ed2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005ed6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005eda:	f380 8811 	msr	BASEPRI, r0
 8005ede:	f7ff fcff 	bl	80058e0 <vTaskSwitchContext>
 8005ee2:	f04f 0000 	mov.w	r0, #0
 8005ee6:	f380 8811 	msr	BASEPRI, r0
 8005eea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005eee:	6819      	ldr	r1, [r3, #0]
 8005ef0:	6808      	ldr	r0, [r1, #0]
 8005ef2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005ef6:	f380 8809 	msr	PSP, r0
 8005efa:	f3bf 8f6f 	isb	sy
 8005efe:	4770      	bx	lr

08005f00 <pxCurrentTCBConst>:
 8005f00:	200007c4 	.word	0x200007c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005f04:	bf00      	nop
 8005f06:	bf00      	nop

08005f08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	607b      	str	r3, [r7, #4]
}
 8005f20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005f22:	f7ff fc1f 	bl	8005764 <xTaskIncrementTick>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d003      	beq.n	8005f34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f2c:	4b06      	ldr	r3, [pc, #24]	; (8005f48 <SysTick_Handler+0x40>)
 8005f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	2300      	movs	r3, #0
 8005f36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	f383 8811 	msr	BASEPRI, r3
}
 8005f3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005f40:	bf00      	nop
 8005f42:	3708      	adds	r7, #8
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	e000ed04 	.word	0xe000ed04

08005f4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f50:	4b0a      	ldr	r3, [pc, #40]	; (8005f7c <vPortSetupTimerInterrupt+0x30>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f56:	4b0a      	ldr	r3, [pc, #40]	; (8005f80 <vPortSetupTimerInterrupt+0x34>)
 8005f58:	2200      	movs	r2, #0
 8005f5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f5c:	4b09      	ldr	r3, [pc, #36]	; (8005f84 <vPortSetupTimerInterrupt+0x38>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a09      	ldr	r2, [pc, #36]	; (8005f88 <vPortSetupTimerInterrupt+0x3c>)
 8005f62:	fba2 2303 	umull	r2, r3, r2, r3
 8005f66:	099b      	lsrs	r3, r3, #6
 8005f68:	4a08      	ldr	r2, [pc, #32]	; (8005f8c <vPortSetupTimerInterrupt+0x40>)
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f6e:	4b03      	ldr	r3, [pc, #12]	; (8005f7c <vPortSetupTimerInterrupt+0x30>)
 8005f70:	2207      	movs	r2, #7
 8005f72:	601a      	str	r2, [r3, #0]
}
 8005f74:	bf00      	nop
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bc80      	pop	{r7}
 8005f7a:	4770      	bx	lr
 8005f7c:	e000e010 	.word	0xe000e010
 8005f80:	e000e018 	.word	0xe000e018
 8005f84:	20000000 	.word	0x20000000
 8005f88:	10624dd3 	.word	0x10624dd3
 8005f8c:	e000e014 	.word	0xe000e014

08005f90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b08a      	sub	sp, #40	; 0x28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005f9c:	f7ff fb38 	bl	8005610 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005fa0:	4b58      	ldr	r3, [pc, #352]	; (8006104 <pvPortMalloc+0x174>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d101      	bne.n	8005fac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005fa8:	f000 f910 	bl	80061cc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005fac:	4b56      	ldr	r3, [pc, #344]	; (8006108 <pvPortMalloc+0x178>)
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f040 808e 	bne.w	80060d6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d01d      	beq.n	8005ffc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005fc0:	2208      	movs	r2, #8
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f003 0307 	and.w	r3, r3, #7
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d014      	beq.n	8005ffc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f023 0307 	bic.w	r3, r3, #7
 8005fd8:	3308      	adds	r3, #8
 8005fda:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f003 0307 	and.w	r3, r3, #7
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00a      	beq.n	8005ffc <pvPortMalloc+0x6c>
	__asm volatile
 8005fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fea:	f383 8811 	msr	BASEPRI, r3
 8005fee:	f3bf 8f6f 	isb	sy
 8005ff2:	f3bf 8f4f 	dsb	sy
 8005ff6:	617b      	str	r3, [r7, #20]
}
 8005ff8:	bf00      	nop
 8005ffa:	e7fe      	b.n	8005ffa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d069      	beq.n	80060d6 <pvPortMalloc+0x146>
 8006002:	4b42      	ldr	r3, [pc, #264]	; (800610c <pvPortMalloc+0x17c>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	429a      	cmp	r2, r3
 800600a:	d864      	bhi.n	80060d6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800600c:	4b40      	ldr	r3, [pc, #256]	; (8006110 <pvPortMalloc+0x180>)
 800600e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006010:	4b3f      	ldr	r3, [pc, #252]	; (8006110 <pvPortMalloc+0x180>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006016:	e004      	b.n	8006022 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800601c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	429a      	cmp	r2, r3
 800602a:	d903      	bls.n	8006034 <pvPortMalloc+0xa4>
 800602c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1f1      	bne.n	8006018 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006034:	4b33      	ldr	r3, [pc, #204]	; (8006104 <pvPortMalloc+0x174>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800603a:	429a      	cmp	r2, r3
 800603c:	d04b      	beq.n	80060d6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2208      	movs	r2, #8
 8006044:	4413      	add	r3, r2
 8006046:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	6a3b      	ldr	r3, [r7, #32]
 800604e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006052:	685a      	ldr	r2, [r3, #4]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	1ad2      	subs	r2, r2, r3
 8006058:	2308      	movs	r3, #8
 800605a:	005b      	lsls	r3, r3, #1
 800605c:	429a      	cmp	r2, r3
 800605e:	d91f      	bls.n	80060a0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4413      	add	r3, r2
 8006066:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	f003 0307 	and.w	r3, r3, #7
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00a      	beq.n	8006088 <pvPortMalloc+0xf8>
	__asm volatile
 8006072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006076:	f383 8811 	msr	BASEPRI, r3
 800607a:	f3bf 8f6f 	isb	sy
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	613b      	str	r3, [r7, #16]
}
 8006084:	bf00      	nop
 8006086:	e7fe      	b.n	8006086 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	1ad2      	subs	r2, r2, r3
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800609a:	69b8      	ldr	r0, [r7, #24]
 800609c:	f000 f8f8 	bl	8006290 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80060a0:	4b1a      	ldr	r3, [pc, #104]	; (800610c <pvPortMalloc+0x17c>)
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	4a18      	ldr	r2, [pc, #96]	; (800610c <pvPortMalloc+0x17c>)
 80060ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80060ae:	4b17      	ldr	r3, [pc, #92]	; (800610c <pvPortMalloc+0x17c>)
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	4b18      	ldr	r3, [pc, #96]	; (8006114 <pvPortMalloc+0x184>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d203      	bcs.n	80060c2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80060ba:	4b14      	ldr	r3, [pc, #80]	; (800610c <pvPortMalloc+0x17c>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a15      	ldr	r2, [pc, #84]	; (8006114 <pvPortMalloc+0x184>)
 80060c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80060c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c4:	685a      	ldr	r2, [r3, #4]
 80060c6:	4b10      	ldr	r3, [pc, #64]	; (8006108 <pvPortMalloc+0x178>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	431a      	orrs	r2, r3
 80060cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80060d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d2:	2200      	movs	r2, #0
 80060d4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80060d6:	f7ff faa9 	bl	800562c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	f003 0307 	and.w	r3, r3, #7
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00a      	beq.n	80060fa <pvPortMalloc+0x16a>
	__asm volatile
 80060e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e8:	f383 8811 	msr	BASEPRI, r3
 80060ec:	f3bf 8f6f 	isb	sy
 80060f0:	f3bf 8f4f 	dsb	sy
 80060f4:	60fb      	str	r3, [r7, #12]
}
 80060f6:	bf00      	nop
 80060f8:	e7fe      	b.n	80060f8 <pvPortMalloc+0x168>
	return pvReturn;
 80060fa:	69fb      	ldr	r3, [r7, #28]
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3728      	adds	r7, #40	; 0x28
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	20001500 	.word	0x20001500
 8006108:	2000150c 	.word	0x2000150c
 800610c:	20001504 	.word	0x20001504
 8006110:	200014f8 	.word	0x200014f8
 8006114:	20001508 	.word	0x20001508

08006118 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b086      	sub	sp, #24
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d048      	beq.n	80061bc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800612a:	2308      	movs	r3, #8
 800612c:	425b      	negs	r3, r3
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	4413      	add	r3, r2
 8006132:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	685a      	ldr	r2, [r3, #4]
 800613c:	4b21      	ldr	r3, [pc, #132]	; (80061c4 <vPortFree+0xac>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4013      	ands	r3, r2
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10a      	bne.n	800615c <vPortFree+0x44>
	__asm volatile
 8006146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614a:	f383 8811 	msr	BASEPRI, r3
 800614e:	f3bf 8f6f 	isb	sy
 8006152:	f3bf 8f4f 	dsb	sy
 8006156:	60fb      	str	r3, [r7, #12]
}
 8006158:	bf00      	nop
 800615a:	e7fe      	b.n	800615a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00a      	beq.n	800617a <vPortFree+0x62>
	__asm volatile
 8006164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006168:	f383 8811 	msr	BASEPRI, r3
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	60bb      	str	r3, [r7, #8]
}
 8006176:	bf00      	nop
 8006178:	e7fe      	b.n	8006178 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	685a      	ldr	r2, [r3, #4]
 800617e:	4b11      	ldr	r3, [pc, #68]	; (80061c4 <vPortFree+0xac>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4013      	ands	r3, r2
 8006184:	2b00      	cmp	r3, #0
 8006186:	d019      	beq.n	80061bc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d115      	bne.n	80061bc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	685a      	ldr	r2, [r3, #4]
 8006194:	4b0b      	ldr	r3, [pc, #44]	; (80061c4 <vPortFree+0xac>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	43db      	mvns	r3, r3
 800619a:	401a      	ands	r2, r3
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80061a0:	f7ff fa36 	bl	8005610 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	685a      	ldr	r2, [r3, #4]
 80061a8:	4b07      	ldr	r3, [pc, #28]	; (80061c8 <vPortFree+0xb0>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4413      	add	r3, r2
 80061ae:	4a06      	ldr	r2, [pc, #24]	; (80061c8 <vPortFree+0xb0>)
 80061b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80061b2:	6938      	ldr	r0, [r7, #16]
 80061b4:	f000 f86c 	bl	8006290 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80061b8:	f7ff fa38 	bl	800562c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80061bc:	bf00      	nop
 80061be:	3718      	adds	r7, #24
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	2000150c 	.word	0x2000150c
 80061c8:	20001504 	.word	0x20001504

080061cc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80061d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80061d6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80061d8:	4b27      	ldr	r3, [pc, #156]	; (8006278 <prvHeapInit+0xac>)
 80061da:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f003 0307 	and.w	r3, r3, #7
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00c      	beq.n	8006200 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	3307      	adds	r3, #7
 80061ea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f023 0307 	bic.w	r3, r3, #7
 80061f2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	4a1f      	ldr	r2, [pc, #124]	; (8006278 <prvHeapInit+0xac>)
 80061fc:	4413      	add	r3, r2
 80061fe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006204:	4a1d      	ldr	r2, [pc, #116]	; (800627c <prvHeapInit+0xb0>)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800620a:	4b1c      	ldr	r3, [pc, #112]	; (800627c <prvHeapInit+0xb0>)
 800620c:	2200      	movs	r2, #0
 800620e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	68ba      	ldr	r2, [r7, #8]
 8006214:	4413      	add	r3, r2
 8006216:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006218:	2208      	movs	r2, #8
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	1a9b      	subs	r3, r3, r2
 800621e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f023 0307 	bic.w	r3, r3, #7
 8006226:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	4a15      	ldr	r2, [pc, #84]	; (8006280 <prvHeapInit+0xb4>)
 800622c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800622e:	4b14      	ldr	r3, [pc, #80]	; (8006280 <prvHeapInit+0xb4>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2200      	movs	r2, #0
 8006234:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006236:	4b12      	ldr	r3, [pc, #72]	; (8006280 <prvHeapInit+0xb4>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2200      	movs	r2, #0
 800623c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	1ad2      	subs	r2, r2, r3
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800624c:	4b0c      	ldr	r3, [pc, #48]	; (8006280 <prvHeapInit+0xb4>)
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	4a0a      	ldr	r2, [pc, #40]	; (8006284 <prvHeapInit+0xb8>)
 800625a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	4a09      	ldr	r2, [pc, #36]	; (8006288 <prvHeapInit+0xbc>)
 8006262:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006264:	4b09      	ldr	r3, [pc, #36]	; (800628c <prvHeapInit+0xc0>)
 8006266:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800626a:	601a      	str	r2, [r3, #0]
}
 800626c:	bf00      	nop
 800626e:	3714      	adds	r7, #20
 8006270:	46bd      	mov	sp, r7
 8006272:	bc80      	pop	{r7}
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	200008f8 	.word	0x200008f8
 800627c:	200014f8 	.word	0x200014f8
 8006280:	20001500 	.word	0x20001500
 8006284:	20001508 	.word	0x20001508
 8006288:	20001504 	.word	0x20001504
 800628c:	2000150c 	.word	0x2000150c

08006290 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006298:	4b27      	ldr	r3, [pc, #156]	; (8006338 <prvInsertBlockIntoFreeList+0xa8>)
 800629a:	60fb      	str	r3, [r7, #12]
 800629c:	e002      	b.n	80062a4 <prvInsertBlockIntoFreeList+0x14>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	60fb      	str	r3, [r7, #12]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d8f7      	bhi.n	800629e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	4413      	add	r3, r2
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d108      	bne.n	80062d2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	685a      	ldr	r2, [r3, #4]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	441a      	add	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	68ba      	ldr	r2, [r7, #8]
 80062dc:	441a      	add	r2, r3
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d118      	bne.n	8006318 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	4b14      	ldr	r3, [pc, #80]	; (800633c <prvInsertBlockIntoFreeList+0xac>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d00d      	beq.n	800630e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685a      	ldr	r2, [r3, #4]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	441a      	add	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	601a      	str	r2, [r3, #0]
 800630c:	e008      	b.n	8006320 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800630e:	4b0b      	ldr	r3, [pc, #44]	; (800633c <prvInsertBlockIntoFreeList+0xac>)
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	601a      	str	r2, [r3, #0]
 8006316:	e003      	b.n	8006320 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	429a      	cmp	r2, r3
 8006326:	d002      	beq.n	800632e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800632e:	bf00      	nop
 8006330:	3714      	adds	r7, #20
 8006332:	46bd      	mov	sp, r7
 8006334:	bc80      	pop	{r7}
 8006336:	4770      	bx	lr
 8006338:	200014f8 	.word	0x200014f8
 800633c:	20001500 	.word	0x20001500

08006340 <__errno>:
 8006340:	4b01      	ldr	r3, [pc, #4]	; (8006348 <__errno+0x8>)
 8006342:	6818      	ldr	r0, [r3, #0]
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	20000024 	.word	0x20000024

0800634c <__libc_init_array>:
 800634c:	b570      	push	{r4, r5, r6, lr}
 800634e:	2600      	movs	r6, #0
 8006350:	4d0c      	ldr	r5, [pc, #48]	; (8006384 <__libc_init_array+0x38>)
 8006352:	4c0d      	ldr	r4, [pc, #52]	; (8006388 <__libc_init_array+0x3c>)
 8006354:	1b64      	subs	r4, r4, r5
 8006356:	10a4      	asrs	r4, r4, #2
 8006358:	42a6      	cmp	r6, r4
 800635a:	d109      	bne.n	8006370 <__libc_init_array+0x24>
 800635c:	f000 fcc6 	bl	8006cec <_init>
 8006360:	2600      	movs	r6, #0
 8006362:	4d0a      	ldr	r5, [pc, #40]	; (800638c <__libc_init_array+0x40>)
 8006364:	4c0a      	ldr	r4, [pc, #40]	; (8006390 <__libc_init_array+0x44>)
 8006366:	1b64      	subs	r4, r4, r5
 8006368:	10a4      	asrs	r4, r4, #2
 800636a:	42a6      	cmp	r6, r4
 800636c:	d105      	bne.n	800637a <__libc_init_array+0x2e>
 800636e:	bd70      	pop	{r4, r5, r6, pc}
 8006370:	f855 3b04 	ldr.w	r3, [r5], #4
 8006374:	4798      	blx	r3
 8006376:	3601      	adds	r6, #1
 8006378:	e7ee      	b.n	8006358 <__libc_init_array+0xc>
 800637a:	f855 3b04 	ldr.w	r3, [r5], #4
 800637e:	4798      	blx	r3
 8006380:	3601      	adds	r6, #1
 8006382:	e7f2      	b.n	800636a <__libc_init_array+0x1e>
 8006384:	0800706c 	.word	0x0800706c
 8006388:	0800706c 	.word	0x0800706c
 800638c:	0800706c 	.word	0x0800706c
 8006390:	08007070 	.word	0x08007070

08006394 <__retarget_lock_acquire_recursive>:
 8006394:	4770      	bx	lr

08006396 <__retarget_lock_release_recursive>:
 8006396:	4770      	bx	lr

08006398 <memcpy>:
 8006398:	440a      	add	r2, r1
 800639a:	4291      	cmp	r1, r2
 800639c:	f100 33ff 	add.w	r3, r0, #4294967295
 80063a0:	d100      	bne.n	80063a4 <memcpy+0xc>
 80063a2:	4770      	bx	lr
 80063a4:	b510      	push	{r4, lr}
 80063a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063aa:	4291      	cmp	r1, r2
 80063ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063b0:	d1f9      	bne.n	80063a6 <memcpy+0xe>
 80063b2:	bd10      	pop	{r4, pc}

080063b4 <memset>:
 80063b4:	4603      	mov	r3, r0
 80063b6:	4402      	add	r2, r0
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d100      	bne.n	80063be <memset+0xa>
 80063bc:	4770      	bx	lr
 80063be:	f803 1b01 	strb.w	r1, [r3], #1
 80063c2:	e7f9      	b.n	80063b8 <memset+0x4>

080063c4 <_malloc_r>:
 80063c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063c6:	1ccd      	adds	r5, r1, #3
 80063c8:	f025 0503 	bic.w	r5, r5, #3
 80063cc:	3508      	adds	r5, #8
 80063ce:	2d0c      	cmp	r5, #12
 80063d0:	bf38      	it	cc
 80063d2:	250c      	movcc	r5, #12
 80063d4:	2d00      	cmp	r5, #0
 80063d6:	4606      	mov	r6, r0
 80063d8:	db01      	blt.n	80063de <_malloc_r+0x1a>
 80063da:	42a9      	cmp	r1, r5
 80063dc:	d903      	bls.n	80063e6 <_malloc_r+0x22>
 80063de:	230c      	movs	r3, #12
 80063e0:	6033      	str	r3, [r6, #0]
 80063e2:	2000      	movs	r0, #0
 80063e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063e6:	f000 f8e1 	bl	80065ac <__malloc_lock>
 80063ea:	4921      	ldr	r1, [pc, #132]	; (8006470 <_malloc_r+0xac>)
 80063ec:	680a      	ldr	r2, [r1, #0]
 80063ee:	4614      	mov	r4, r2
 80063f0:	b99c      	cbnz	r4, 800641a <_malloc_r+0x56>
 80063f2:	4f20      	ldr	r7, [pc, #128]	; (8006474 <_malloc_r+0xb0>)
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	b923      	cbnz	r3, 8006402 <_malloc_r+0x3e>
 80063f8:	4621      	mov	r1, r4
 80063fa:	4630      	mov	r0, r6
 80063fc:	f000 f8a6 	bl	800654c <_sbrk_r>
 8006400:	6038      	str	r0, [r7, #0]
 8006402:	4629      	mov	r1, r5
 8006404:	4630      	mov	r0, r6
 8006406:	f000 f8a1 	bl	800654c <_sbrk_r>
 800640a:	1c43      	adds	r3, r0, #1
 800640c:	d123      	bne.n	8006456 <_malloc_r+0x92>
 800640e:	230c      	movs	r3, #12
 8006410:	4630      	mov	r0, r6
 8006412:	6033      	str	r3, [r6, #0]
 8006414:	f000 f8d0 	bl	80065b8 <__malloc_unlock>
 8006418:	e7e3      	b.n	80063e2 <_malloc_r+0x1e>
 800641a:	6823      	ldr	r3, [r4, #0]
 800641c:	1b5b      	subs	r3, r3, r5
 800641e:	d417      	bmi.n	8006450 <_malloc_r+0x8c>
 8006420:	2b0b      	cmp	r3, #11
 8006422:	d903      	bls.n	800642c <_malloc_r+0x68>
 8006424:	6023      	str	r3, [r4, #0]
 8006426:	441c      	add	r4, r3
 8006428:	6025      	str	r5, [r4, #0]
 800642a:	e004      	b.n	8006436 <_malloc_r+0x72>
 800642c:	6863      	ldr	r3, [r4, #4]
 800642e:	42a2      	cmp	r2, r4
 8006430:	bf0c      	ite	eq
 8006432:	600b      	streq	r3, [r1, #0]
 8006434:	6053      	strne	r3, [r2, #4]
 8006436:	4630      	mov	r0, r6
 8006438:	f000 f8be 	bl	80065b8 <__malloc_unlock>
 800643c:	f104 000b 	add.w	r0, r4, #11
 8006440:	1d23      	adds	r3, r4, #4
 8006442:	f020 0007 	bic.w	r0, r0, #7
 8006446:	1ac2      	subs	r2, r0, r3
 8006448:	d0cc      	beq.n	80063e4 <_malloc_r+0x20>
 800644a:	1a1b      	subs	r3, r3, r0
 800644c:	50a3      	str	r3, [r4, r2]
 800644e:	e7c9      	b.n	80063e4 <_malloc_r+0x20>
 8006450:	4622      	mov	r2, r4
 8006452:	6864      	ldr	r4, [r4, #4]
 8006454:	e7cc      	b.n	80063f0 <_malloc_r+0x2c>
 8006456:	1cc4      	adds	r4, r0, #3
 8006458:	f024 0403 	bic.w	r4, r4, #3
 800645c:	42a0      	cmp	r0, r4
 800645e:	d0e3      	beq.n	8006428 <_malloc_r+0x64>
 8006460:	1a21      	subs	r1, r4, r0
 8006462:	4630      	mov	r0, r6
 8006464:	f000 f872 	bl	800654c <_sbrk_r>
 8006468:	3001      	adds	r0, #1
 800646a:	d1dd      	bne.n	8006428 <_malloc_r+0x64>
 800646c:	e7cf      	b.n	800640e <_malloc_r+0x4a>
 800646e:	bf00      	nop
 8006470:	20001510 	.word	0x20001510
 8006474:	20001514 	.word	0x20001514

08006478 <cleanup_glue>:
 8006478:	b538      	push	{r3, r4, r5, lr}
 800647a:	460c      	mov	r4, r1
 800647c:	6809      	ldr	r1, [r1, #0]
 800647e:	4605      	mov	r5, r0
 8006480:	b109      	cbz	r1, 8006486 <cleanup_glue+0xe>
 8006482:	f7ff fff9 	bl	8006478 <cleanup_glue>
 8006486:	4621      	mov	r1, r4
 8006488:	4628      	mov	r0, r5
 800648a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800648e:	f000 b899 	b.w	80065c4 <_free_r>
	...

08006494 <_reclaim_reent>:
 8006494:	4b2c      	ldr	r3, [pc, #176]	; (8006548 <_reclaim_reent+0xb4>)
 8006496:	b570      	push	{r4, r5, r6, lr}
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4604      	mov	r4, r0
 800649c:	4283      	cmp	r3, r0
 800649e:	d051      	beq.n	8006544 <_reclaim_reent+0xb0>
 80064a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80064a2:	b143      	cbz	r3, 80064b6 <_reclaim_reent+0x22>
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d14a      	bne.n	8006540 <_reclaim_reent+0xac>
 80064aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064ac:	6819      	ldr	r1, [r3, #0]
 80064ae:	b111      	cbz	r1, 80064b6 <_reclaim_reent+0x22>
 80064b0:	4620      	mov	r0, r4
 80064b2:	f000 f887 	bl	80065c4 <_free_r>
 80064b6:	6961      	ldr	r1, [r4, #20]
 80064b8:	b111      	cbz	r1, 80064c0 <_reclaim_reent+0x2c>
 80064ba:	4620      	mov	r0, r4
 80064bc:	f000 f882 	bl	80065c4 <_free_r>
 80064c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80064c2:	b111      	cbz	r1, 80064ca <_reclaim_reent+0x36>
 80064c4:	4620      	mov	r0, r4
 80064c6:	f000 f87d 	bl	80065c4 <_free_r>
 80064ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80064cc:	b111      	cbz	r1, 80064d4 <_reclaim_reent+0x40>
 80064ce:	4620      	mov	r0, r4
 80064d0:	f000 f878 	bl	80065c4 <_free_r>
 80064d4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80064d6:	b111      	cbz	r1, 80064de <_reclaim_reent+0x4a>
 80064d8:	4620      	mov	r0, r4
 80064da:	f000 f873 	bl	80065c4 <_free_r>
 80064de:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80064e0:	b111      	cbz	r1, 80064e8 <_reclaim_reent+0x54>
 80064e2:	4620      	mov	r0, r4
 80064e4:	f000 f86e 	bl	80065c4 <_free_r>
 80064e8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80064ea:	b111      	cbz	r1, 80064f2 <_reclaim_reent+0x5e>
 80064ec:	4620      	mov	r0, r4
 80064ee:	f000 f869 	bl	80065c4 <_free_r>
 80064f2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80064f4:	b111      	cbz	r1, 80064fc <_reclaim_reent+0x68>
 80064f6:	4620      	mov	r0, r4
 80064f8:	f000 f864 	bl	80065c4 <_free_r>
 80064fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064fe:	b111      	cbz	r1, 8006506 <_reclaim_reent+0x72>
 8006500:	4620      	mov	r0, r4
 8006502:	f000 f85f 	bl	80065c4 <_free_r>
 8006506:	69a3      	ldr	r3, [r4, #24]
 8006508:	b1e3      	cbz	r3, 8006544 <_reclaim_reent+0xb0>
 800650a:	4620      	mov	r0, r4
 800650c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800650e:	4798      	blx	r3
 8006510:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006512:	b1b9      	cbz	r1, 8006544 <_reclaim_reent+0xb0>
 8006514:	4620      	mov	r0, r4
 8006516:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800651a:	f7ff bfad 	b.w	8006478 <cleanup_glue>
 800651e:	5949      	ldr	r1, [r1, r5]
 8006520:	b941      	cbnz	r1, 8006534 <_reclaim_reent+0xa0>
 8006522:	3504      	adds	r5, #4
 8006524:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006526:	2d80      	cmp	r5, #128	; 0x80
 8006528:	68d9      	ldr	r1, [r3, #12]
 800652a:	d1f8      	bne.n	800651e <_reclaim_reent+0x8a>
 800652c:	4620      	mov	r0, r4
 800652e:	f000 f849 	bl	80065c4 <_free_r>
 8006532:	e7ba      	b.n	80064aa <_reclaim_reent+0x16>
 8006534:	680e      	ldr	r6, [r1, #0]
 8006536:	4620      	mov	r0, r4
 8006538:	f000 f844 	bl	80065c4 <_free_r>
 800653c:	4631      	mov	r1, r6
 800653e:	e7ef      	b.n	8006520 <_reclaim_reent+0x8c>
 8006540:	2500      	movs	r5, #0
 8006542:	e7ef      	b.n	8006524 <_reclaim_reent+0x90>
 8006544:	bd70      	pop	{r4, r5, r6, pc}
 8006546:	bf00      	nop
 8006548:	20000024 	.word	0x20000024

0800654c <_sbrk_r>:
 800654c:	b538      	push	{r3, r4, r5, lr}
 800654e:	2300      	movs	r3, #0
 8006550:	4d05      	ldr	r5, [pc, #20]	; (8006568 <_sbrk_r+0x1c>)
 8006552:	4604      	mov	r4, r0
 8006554:	4608      	mov	r0, r1
 8006556:	602b      	str	r3, [r5, #0]
 8006558:	f7fb faac 	bl	8001ab4 <_sbrk>
 800655c:	1c43      	adds	r3, r0, #1
 800655e:	d102      	bne.n	8006566 <_sbrk_r+0x1a>
 8006560:	682b      	ldr	r3, [r5, #0]
 8006562:	b103      	cbz	r3, 8006566 <_sbrk_r+0x1a>
 8006564:	6023      	str	r3, [r4, #0]
 8006566:	bd38      	pop	{r3, r4, r5, pc}
 8006568:	2000171c 	.word	0x2000171c

0800656c <siprintf>:
 800656c:	b40e      	push	{r1, r2, r3}
 800656e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006572:	b500      	push	{lr}
 8006574:	b09c      	sub	sp, #112	; 0x70
 8006576:	ab1d      	add	r3, sp, #116	; 0x74
 8006578:	9002      	str	r0, [sp, #8]
 800657a:	9006      	str	r0, [sp, #24]
 800657c:	9107      	str	r1, [sp, #28]
 800657e:	9104      	str	r1, [sp, #16]
 8006580:	4808      	ldr	r0, [pc, #32]	; (80065a4 <siprintf+0x38>)
 8006582:	4909      	ldr	r1, [pc, #36]	; (80065a8 <siprintf+0x3c>)
 8006584:	f853 2b04 	ldr.w	r2, [r3], #4
 8006588:	9105      	str	r1, [sp, #20]
 800658a:	6800      	ldr	r0, [r0, #0]
 800658c:	a902      	add	r1, sp, #8
 800658e:	9301      	str	r3, [sp, #4]
 8006590:	f000 f8c0 	bl	8006714 <_svfiprintf_r>
 8006594:	2200      	movs	r2, #0
 8006596:	9b02      	ldr	r3, [sp, #8]
 8006598:	701a      	strb	r2, [r3, #0]
 800659a:	b01c      	add	sp, #112	; 0x70
 800659c:	f85d eb04 	ldr.w	lr, [sp], #4
 80065a0:	b003      	add	sp, #12
 80065a2:	4770      	bx	lr
 80065a4:	20000024 	.word	0x20000024
 80065a8:	ffff0208 	.word	0xffff0208

080065ac <__malloc_lock>:
 80065ac:	4801      	ldr	r0, [pc, #4]	; (80065b4 <__malloc_lock+0x8>)
 80065ae:	f7ff bef1 	b.w	8006394 <__retarget_lock_acquire_recursive>
 80065b2:	bf00      	nop
 80065b4:	20001714 	.word	0x20001714

080065b8 <__malloc_unlock>:
 80065b8:	4801      	ldr	r0, [pc, #4]	; (80065c0 <__malloc_unlock+0x8>)
 80065ba:	f7ff beec 	b.w	8006396 <__retarget_lock_release_recursive>
 80065be:	bf00      	nop
 80065c0:	20001714 	.word	0x20001714

080065c4 <_free_r>:
 80065c4:	b538      	push	{r3, r4, r5, lr}
 80065c6:	4605      	mov	r5, r0
 80065c8:	2900      	cmp	r1, #0
 80065ca:	d043      	beq.n	8006654 <_free_r+0x90>
 80065cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065d0:	1f0c      	subs	r4, r1, #4
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	bfb8      	it	lt
 80065d6:	18e4      	addlt	r4, r4, r3
 80065d8:	f7ff ffe8 	bl	80065ac <__malloc_lock>
 80065dc:	4a1e      	ldr	r2, [pc, #120]	; (8006658 <_free_r+0x94>)
 80065de:	6813      	ldr	r3, [r2, #0]
 80065e0:	4610      	mov	r0, r2
 80065e2:	b933      	cbnz	r3, 80065f2 <_free_r+0x2e>
 80065e4:	6063      	str	r3, [r4, #4]
 80065e6:	6014      	str	r4, [r2, #0]
 80065e8:	4628      	mov	r0, r5
 80065ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065ee:	f7ff bfe3 	b.w	80065b8 <__malloc_unlock>
 80065f2:	42a3      	cmp	r3, r4
 80065f4:	d90a      	bls.n	800660c <_free_r+0x48>
 80065f6:	6821      	ldr	r1, [r4, #0]
 80065f8:	1862      	adds	r2, r4, r1
 80065fa:	4293      	cmp	r3, r2
 80065fc:	bf01      	itttt	eq
 80065fe:	681a      	ldreq	r2, [r3, #0]
 8006600:	685b      	ldreq	r3, [r3, #4]
 8006602:	1852      	addeq	r2, r2, r1
 8006604:	6022      	streq	r2, [r4, #0]
 8006606:	6063      	str	r3, [r4, #4]
 8006608:	6004      	str	r4, [r0, #0]
 800660a:	e7ed      	b.n	80065e8 <_free_r+0x24>
 800660c:	461a      	mov	r2, r3
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	b10b      	cbz	r3, 8006616 <_free_r+0x52>
 8006612:	42a3      	cmp	r3, r4
 8006614:	d9fa      	bls.n	800660c <_free_r+0x48>
 8006616:	6811      	ldr	r1, [r2, #0]
 8006618:	1850      	adds	r0, r2, r1
 800661a:	42a0      	cmp	r0, r4
 800661c:	d10b      	bne.n	8006636 <_free_r+0x72>
 800661e:	6820      	ldr	r0, [r4, #0]
 8006620:	4401      	add	r1, r0
 8006622:	1850      	adds	r0, r2, r1
 8006624:	4283      	cmp	r3, r0
 8006626:	6011      	str	r1, [r2, #0]
 8006628:	d1de      	bne.n	80065e8 <_free_r+0x24>
 800662a:	6818      	ldr	r0, [r3, #0]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	4401      	add	r1, r0
 8006630:	6011      	str	r1, [r2, #0]
 8006632:	6053      	str	r3, [r2, #4]
 8006634:	e7d8      	b.n	80065e8 <_free_r+0x24>
 8006636:	d902      	bls.n	800663e <_free_r+0x7a>
 8006638:	230c      	movs	r3, #12
 800663a:	602b      	str	r3, [r5, #0]
 800663c:	e7d4      	b.n	80065e8 <_free_r+0x24>
 800663e:	6820      	ldr	r0, [r4, #0]
 8006640:	1821      	adds	r1, r4, r0
 8006642:	428b      	cmp	r3, r1
 8006644:	bf01      	itttt	eq
 8006646:	6819      	ldreq	r1, [r3, #0]
 8006648:	685b      	ldreq	r3, [r3, #4]
 800664a:	1809      	addeq	r1, r1, r0
 800664c:	6021      	streq	r1, [r4, #0]
 800664e:	6063      	str	r3, [r4, #4]
 8006650:	6054      	str	r4, [r2, #4]
 8006652:	e7c9      	b.n	80065e8 <_free_r+0x24>
 8006654:	bd38      	pop	{r3, r4, r5, pc}
 8006656:	bf00      	nop
 8006658:	20001510 	.word	0x20001510

0800665c <__ssputs_r>:
 800665c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006660:	688e      	ldr	r6, [r1, #8]
 8006662:	4682      	mov	sl, r0
 8006664:	429e      	cmp	r6, r3
 8006666:	460c      	mov	r4, r1
 8006668:	4690      	mov	r8, r2
 800666a:	461f      	mov	r7, r3
 800666c:	d838      	bhi.n	80066e0 <__ssputs_r+0x84>
 800666e:	898a      	ldrh	r2, [r1, #12]
 8006670:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006674:	d032      	beq.n	80066dc <__ssputs_r+0x80>
 8006676:	6825      	ldr	r5, [r4, #0]
 8006678:	6909      	ldr	r1, [r1, #16]
 800667a:	3301      	adds	r3, #1
 800667c:	eba5 0901 	sub.w	r9, r5, r1
 8006680:	6965      	ldr	r5, [r4, #20]
 8006682:	444b      	add	r3, r9
 8006684:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006688:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800668c:	106d      	asrs	r5, r5, #1
 800668e:	429d      	cmp	r5, r3
 8006690:	bf38      	it	cc
 8006692:	461d      	movcc	r5, r3
 8006694:	0553      	lsls	r3, r2, #21
 8006696:	d531      	bpl.n	80066fc <__ssputs_r+0xa0>
 8006698:	4629      	mov	r1, r5
 800669a:	f7ff fe93 	bl	80063c4 <_malloc_r>
 800669e:	4606      	mov	r6, r0
 80066a0:	b950      	cbnz	r0, 80066b8 <__ssputs_r+0x5c>
 80066a2:	230c      	movs	r3, #12
 80066a4:	f04f 30ff 	mov.w	r0, #4294967295
 80066a8:	f8ca 3000 	str.w	r3, [sl]
 80066ac:	89a3      	ldrh	r3, [r4, #12]
 80066ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066b2:	81a3      	strh	r3, [r4, #12]
 80066b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066b8:	464a      	mov	r2, r9
 80066ba:	6921      	ldr	r1, [r4, #16]
 80066bc:	f7ff fe6c 	bl	8006398 <memcpy>
 80066c0:	89a3      	ldrh	r3, [r4, #12]
 80066c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80066c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ca:	81a3      	strh	r3, [r4, #12]
 80066cc:	6126      	str	r6, [r4, #16]
 80066ce:	444e      	add	r6, r9
 80066d0:	6026      	str	r6, [r4, #0]
 80066d2:	463e      	mov	r6, r7
 80066d4:	6165      	str	r5, [r4, #20]
 80066d6:	eba5 0509 	sub.w	r5, r5, r9
 80066da:	60a5      	str	r5, [r4, #8]
 80066dc:	42be      	cmp	r6, r7
 80066de:	d900      	bls.n	80066e2 <__ssputs_r+0x86>
 80066e0:	463e      	mov	r6, r7
 80066e2:	4632      	mov	r2, r6
 80066e4:	4641      	mov	r1, r8
 80066e6:	6820      	ldr	r0, [r4, #0]
 80066e8:	f000 fab8 	bl	8006c5c <memmove>
 80066ec:	68a3      	ldr	r3, [r4, #8]
 80066ee:	6822      	ldr	r2, [r4, #0]
 80066f0:	1b9b      	subs	r3, r3, r6
 80066f2:	4432      	add	r2, r6
 80066f4:	2000      	movs	r0, #0
 80066f6:	60a3      	str	r3, [r4, #8]
 80066f8:	6022      	str	r2, [r4, #0]
 80066fa:	e7db      	b.n	80066b4 <__ssputs_r+0x58>
 80066fc:	462a      	mov	r2, r5
 80066fe:	f000 fac7 	bl	8006c90 <_realloc_r>
 8006702:	4606      	mov	r6, r0
 8006704:	2800      	cmp	r0, #0
 8006706:	d1e1      	bne.n	80066cc <__ssputs_r+0x70>
 8006708:	4650      	mov	r0, sl
 800670a:	6921      	ldr	r1, [r4, #16]
 800670c:	f7ff ff5a 	bl	80065c4 <_free_r>
 8006710:	e7c7      	b.n	80066a2 <__ssputs_r+0x46>
	...

08006714 <_svfiprintf_r>:
 8006714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006718:	4698      	mov	r8, r3
 800671a:	898b      	ldrh	r3, [r1, #12]
 800671c:	4607      	mov	r7, r0
 800671e:	061b      	lsls	r3, r3, #24
 8006720:	460d      	mov	r5, r1
 8006722:	4614      	mov	r4, r2
 8006724:	b09d      	sub	sp, #116	; 0x74
 8006726:	d50e      	bpl.n	8006746 <_svfiprintf_r+0x32>
 8006728:	690b      	ldr	r3, [r1, #16]
 800672a:	b963      	cbnz	r3, 8006746 <_svfiprintf_r+0x32>
 800672c:	2140      	movs	r1, #64	; 0x40
 800672e:	f7ff fe49 	bl	80063c4 <_malloc_r>
 8006732:	6028      	str	r0, [r5, #0]
 8006734:	6128      	str	r0, [r5, #16]
 8006736:	b920      	cbnz	r0, 8006742 <_svfiprintf_r+0x2e>
 8006738:	230c      	movs	r3, #12
 800673a:	603b      	str	r3, [r7, #0]
 800673c:	f04f 30ff 	mov.w	r0, #4294967295
 8006740:	e0d1      	b.n	80068e6 <_svfiprintf_r+0x1d2>
 8006742:	2340      	movs	r3, #64	; 0x40
 8006744:	616b      	str	r3, [r5, #20]
 8006746:	2300      	movs	r3, #0
 8006748:	9309      	str	r3, [sp, #36]	; 0x24
 800674a:	2320      	movs	r3, #32
 800674c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006750:	2330      	movs	r3, #48	; 0x30
 8006752:	f04f 0901 	mov.w	r9, #1
 8006756:	f8cd 800c 	str.w	r8, [sp, #12]
 800675a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006900 <_svfiprintf_r+0x1ec>
 800675e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006762:	4623      	mov	r3, r4
 8006764:	469a      	mov	sl, r3
 8006766:	f813 2b01 	ldrb.w	r2, [r3], #1
 800676a:	b10a      	cbz	r2, 8006770 <_svfiprintf_r+0x5c>
 800676c:	2a25      	cmp	r2, #37	; 0x25
 800676e:	d1f9      	bne.n	8006764 <_svfiprintf_r+0x50>
 8006770:	ebba 0b04 	subs.w	fp, sl, r4
 8006774:	d00b      	beq.n	800678e <_svfiprintf_r+0x7a>
 8006776:	465b      	mov	r3, fp
 8006778:	4622      	mov	r2, r4
 800677a:	4629      	mov	r1, r5
 800677c:	4638      	mov	r0, r7
 800677e:	f7ff ff6d 	bl	800665c <__ssputs_r>
 8006782:	3001      	adds	r0, #1
 8006784:	f000 80aa 	beq.w	80068dc <_svfiprintf_r+0x1c8>
 8006788:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800678a:	445a      	add	r2, fp
 800678c:	9209      	str	r2, [sp, #36]	; 0x24
 800678e:	f89a 3000 	ldrb.w	r3, [sl]
 8006792:	2b00      	cmp	r3, #0
 8006794:	f000 80a2 	beq.w	80068dc <_svfiprintf_r+0x1c8>
 8006798:	2300      	movs	r3, #0
 800679a:	f04f 32ff 	mov.w	r2, #4294967295
 800679e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067a2:	f10a 0a01 	add.w	sl, sl, #1
 80067a6:	9304      	str	r3, [sp, #16]
 80067a8:	9307      	str	r3, [sp, #28]
 80067aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067ae:	931a      	str	r3, [sp, #104]	; 0x68
 80067b0:	4654      	mov	r4, sl
 80067b2:	2205      	movs	r2, #5
 80067b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067b8:	4851      	ldr	r0, [pc, #324]	; (8006900 <_svfiprintf_r+0x1ec>)
 80067ba:	f000 fa41 	bl	8006c40 <memchr>
 80067be:	9a04      	ldr	r2, [sp, #16]
 80067c0:	b9d8      	cbnz	r0, 80067fa <_svfiprintf_r+0xe6>
 80067c2:	06d0      	lsls	r0, r2, #27
 80067c4:	bf44      	itt	mi
 80067c6:	2320      	movmi	r3, #32
 80067c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067cc:	0711      	lsls	r1, r2, #28
 80067ce:	bf44      	itt	mi
 80067d0:	232b      	movmi	r3, #43	; 0x2b
 80067d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067d6:	f89a 3000 	ldrb.w	r3, [sl]
 80067da:	2b2a      	cmp	r3, #42	; 0x2a
 80067dc:	d015      	beq.n	800680a <_svfiprintf_r+0xf6>
 80067de:	4654      	mov	r4, sl
 80067e0:	2000      	movs	r0, #0
 80067e2:	f04f 0c0a 	mov.w	ip, #10
 80067e6:	9a07      	ldr	r2, [sp, #28]
 80067e8:	4621      	mov	r1, r4
 80067ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067ee:	3b30      	subs	r3, #48	; 0x30
 80067f0:	2b09      	cmp	r3, #9
 80067f2:	d94e      	bls.n	8006892 <_svfiprintf_r+0x17e>
 80067f4:	b1b0      	cbz	r0, 8006824 <_svfiprintf_r+0x110>
 80067f6:	9207      	str	r2, [sp, #28]
 80067f8:	e014      	b.n	8006824 <_svfiprintf_r+0x110>
 80067fa:	eba0 0308 	sub.w	r3, r0, r8
 80067fe:	fa09 f303 	lsl.w	r3, r9, r3
 8006802:	4313      	orrs	r3, r2
 8006804:	46a2      	mov	sl, r4
 8006806:	9304      	str	r3, [sp, #16]
 8006808:	e7d2      	b.n	80067b0 <_svfiprintf_r+0x9c>
 800680a:	9b03      	ldr	r3, [sp, #12]
 800680c:	1d19      	adds	r1, r3, #4
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	9103      	str	r1, [sp, #12]
 8006812:	2b00      	cmp	r3, #0
 8006814:	bfbb      	ittet	lt
 8006816:	425b      	neglt	r3, r3
 8006818:	f042 0202 	orrlt.w	r2, r2, #2
 800681c:	9307      	strge	r3, [sp, #28]
 800681e:	9307      	strlt	r3, [sp, #28]
 8006820:	bfb8      	it	lt
 8006822:	9204      	strlt	r2, [sp, #16]
 8006824:	7823      	ldrb	r3, [r4, #0]
 8006826:	2b2e      	cmp	r3, #46	; 0x2e
 8006828:	d10c      	bne.n	8006844 <_svfiprintf_r+0x130>
 800682a:	7863      	ldrb	r3, [r4, #1]
 800682c:	2b2a      	cmp	r3, #42	; 0x2a
 800682e:	d135      	bne.n	800689c <_svfiprintf_r+0x188>
 8006830:	9b03      	ldr	r3, [sp, #12]
 8006832:	3402      	adds	r4, #2
 8006834:	1d1a      	adds	r2, r3, #4
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	9203      	str	r2, [sp, #12]
 800683a:	2b00      	cmp	r3, #0
 800683c:	bfb8      	it	lt
 800683e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006842:	9305      	str	r3, [sp, #20]
 8006844:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006910 <_svfiprintf_r+0x1fc>
 8006848:	2203      	movs	r2, #3
 800684a:	4650      	mov	r0, sl
 800684c:	7821      	ldrb	r1, [r4, #0]
 800684e:	f000 f9f7 	bl	8006c40 <memchr>
 8006852:	b140      	cbz	r0, 8006866 <_svfiprintf_r+0x152>
 8006854:	2340      	movs	r3, #64	; 0x40
 8006856:	eba0 000a 	sub.w	r0, r0, sl
 800685a:	fa03 f000 	lsl.w	r0, r3, r0
 800685e:	9b04      	ldr	r3, [sp, #16]
 8006860:	3401      	adds	r4, #1
 8006862:	4303      	orrs	r3, r0
 8006864:	9304      	str	r3, [sp, #16]
 8006866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800686a:	2206      	movs	r2, #6
 800686c:	4825      	ldr	r0, [pc, #148]	; (8006904 <_svfiprintf_r+0x1f0>)
 800686e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006872:	f000 f9e5 	bl	8006c40 <memchr>
 8006876:	2800      	cmp	r0, #0
 8006878:	d038      	beq.n	80068ec <_svfiprintf_r+0x1d8>
 800687a:	4b23      	ldr	r3, [pc, #140]	; (8006908 <_svfiprintf_r+0x1f4>)
 800687c:	bb1b      	cbnz	r3, 80068c6 <_svfiprintf_r+0x1b2>
 800687e:	9b03      	ldr	r3, [sp, #12]
 8006880:	3307      	adds	r3, #7
 8006882:	f023 0307 	bic.w	r3, r3, #7
 8006886:	3308      	adds	r3, #8
 8006888:	9303      	str	r3, [sp, #12]
 800688a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800688c:	4433      	add	r3, r6
 800688e:	9309      	str	r3, [sp, #36]	; 0x24
 8006890:	e767      	b.n	8006762 <_svfiprintf_r+0x4e>
 8006892:	460c      	mov	r4, r1
 8006894:	2001      	movs	r0, #1
 8006896:	fb0c 3202 	mla	r2, ip, r2, r3
 800689a:	e7a5      	b.n	80067e8 <_svfiprintf_r+0xd4>
 800689c:	2300      	movs	r3, #0
 800689e:	f04f 0c0a 	mov.w	ip, #10
 80068a2:	4619      	mov	r1, r3
 80068a4:	3401      	adds	r4, #1
 80068a6:	9305      	str	r3, [sp, #20]
 80068a8:	4620      	mov	r0, r4
 80068aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068ae:	3a30      	subs	r2, #48	; 0x30
 80068b0:	2a09      	cmp	r2, #9
 80068b2:	d903      	bls.n	80068bc <_svfiprintf_r+0x1a8>
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d0c5      	beq.n	8006844 <_svfiprintf_r+0x130>
 80068b8:	9105      	str	r1, [sp, #20]
 80068ba:	e7c3      	b.n	8006844 <_svfiprintf_r+0x130>
 80068bc:	4604      	mov	r4, r0
 80068be:	2301      	movs	r3, #1
 80068c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80068c4:	e7f0      	b.n	80068a8 <_svfiprintf_r+0x194>
 80068c6:	ab03      	add	r3, sp, #12
 80068c8:	9300      	str	r3, [sp, #0]
 80068ca:	462a      	mov	r2, r5
 80068cc:	4638      	mov	r0, r7
 80068ce:	4b0f      	ldr	r3, [pc, #60]	; (800690c <_svfiprintf_r+0x1f8>)
 80068d0:	a904      	add	r1, sp, #16
 80068d2:	f3af 8000 	nop.w
 80068d6:	1c42      	adds	r2, r0, #1
 80068d8:	4606      	mov	r6, r0
 80068da:	d1d6      	bne.n	800688a <_svfiprintf_r+0x176>
 80068dc:	89ab      	ldrh	r3, [r5, #12]
 80068de:	065b      	lsls	r3, r3, #25
 80068e0:	f53f af2c 	bmi.w	800673c <_svfiprintf_r+0x28>
 80068e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068e6:	b01d      	add	sp, #116	; 0x74
 80068e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ec:	ab03      	add	r3, sp, #12
 80068ee:	9300      	str	r3, [sp, #0]
 80068f0:	462a      	mov	r2, r5
 80068f2:	4638      	mov	r0, r7
 80068f4:	4b05      	ldr	r3, [pc, #20]	; (800690c <_svfiprintf_r+0x1f8>)
 80068f6:	a904      	add	r1, sp, #16
 80068f8:	f000 f87c 	bl	80069f4 <_printf_i>
 80068fc:	e7eb      	b.n	80068d6 <_svfiprintf_r+0x1c2>
 80068fe:	bf00      	nop
 8006900:	08007038 	.word	0x08007038
 8006904:	08007042 	.word	0x08007042
 8006908:	00000000 	.word	0x00000000
 800690c:	0800665d 	.word	0x0800665d
 8006910:	0800703e 	.word	0x0800703e

08006914 <_printf_common>:
 8006914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006918:	4616      	mov	r6, r2
 800691a:	4699      	mov	r9, r3
 800691c:	688a      	ldr	r2, [r1, #8]
 800691e:	690b      	ldr	r3, [r1, #16]
 8006920:	4607      	mov	r7, r0
 8006922:	4293      	cmp	r3, r2
 8006924:	bfb8      	it	lt
 8006926:	4613      	movlt	r3, r2
 8006928:	6033      	str	r3, [r6, #0]
 800692a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800692e:	460c      	mov	r4, r1
 8006930:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006934:	b10a      	cbz	r2, 800693a <_printf_common+0x26>
 8006936:	3301      	adds	r3, #1
 8006938:	6033      	str	r3, [r6, #0]
 800693a:	6823      	ldr	r3, [r4, #0]
 800693c:	0699      	lsls	r1, r3, #26
 800693e:	bf42      	ittt	mi
 8006940:	6833      	ldrmi	r3, [r6, #0]
 8006942:	3302      	addmi	r3, #2
 8006944:	6033      	strmi	r3, [r6, #0]
 8006946:	6825      	ldr	r5, [r4, #0]
 8006948:	f015 0506 	ands.w	r5, r5, #6
 800694c:	d106      	bne.n	800695c <_printf_common+0x48>
 800694e:	f104 0a19 	add.w	sl, r4, #25
 8006952:	68e3      	ldr	r3, [r4, #12]
 8006954:	6832      	ldr	r2, [r6, #0]
 8006956:	1a9b      	subs	r3, r3, r2
 8006958:	42ab      	cmp	r3, r5
 800695a:	dc28      	bgt.n	80069ae <_printf_common+0x9a>
 800695c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006960:	1e13      	subs	r3, r2, #0
 8006962:	6822      	ldr	r2, [r4, #0]
 8006964:	bf18      	it	ne
 8006966:	2301      	movne	r3, #1
 8006968:	0692      	lsls	r2, r2, #26
 800696a:	d42d      	bmi.n	80069c8 <_printf_common+0xb4>
 800696c:	4649      	mov	r1, r9
 800696e:	4638      	mov	r0, r7
 8006970:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006974:	47c0      	blx	r8
 8006976:	3001      	adds	r0, #1
 8006978:	d020      	beq.n	80069bc <_printf_common+0xa8>
 800697a:	6823      	ldr	r3, [r4, #0]
 800697c:	68e5      	ldr	r5, [r4, #12]
 800697e:	f003 0306 	and.w	r3, r3, #6
 8006982:	2b04      	cmp	r3, #4
 8006984:	bf18      	it	ne
 8006986:	2500      	movne	r5, #0
 8006988:	6832      	ldr	r2, [r6, #0]
 800698a:	f04f 0600 	mov.w	r6, #0
 800698e:	68a3      	ldr	r3, [r4, #8]
 8006990:	bf08      	it	eq
 8006992:	1aad      	subeq	r5, r5, r2
 8006994:	6922      	ldr	r2, [r4, #16]
 8006996:	bf08      	it	eq
 8006998:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800699c:	4293      	cmp	r3, r2
 800699e:	bfc4      	itt	gt
 80069a0:	1a9b      	subgt	r3, r3, r2
 80069a2:	18ed      	addgt	r5, r5, r3
 80069a4:	341a      	adds	r4, #26
 80069a6:	42b5      	cmp	r5, r6
 80069a8:	d11a      	bne.n	80069e0 <_printf_common+0xcc>
 80069aa:	2000      	movs	r0, #0
 80069ac:	e008      	b.n	80069c0 <_printf_common+0xac>
 80069ae:	2301      	movs	r3, #1
 80069b0:	4652      	mov	r2, sl
 80069b2:	4649      	mov	r1, r9
 80069b4:	4638      	mov	r0, r7
 80069b6:	47c0      	blx	r8
 80069b8:	3001      	adds	r0, #1
 80069ba:	d103      	bne.n	80069c4 <_printf_common+0xb0>
 80069bc:	f04f 30ff 	mov.w	r0, #4294967295
 80069c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069c4:	3501      	adds	r5, #1
 80069c6:	e7c4      	b.n	8006952 <_printf_common+0x3e>
 80069c8:	2030      	movs	r0, #48	; 0x30
 80069ca:	18e1      	adds	r1, r4, r3
 80069cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069d0:	1c5a      	adds	r2, r3, #1
 80069d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069d6:	4422      	add	r2, r4
 80069d8:	3302      	adds	r3, #2
 80069da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069de:	e7c5      	b.n	800696c <_printf_common+0x58>
 80069e0:	2301      	movs	r3, #1
 80069e2:	4622      	mov	r2, r4
 80069e4:	4649      	mov	r1, r9
 80069e6:	4638      	mov	r0, r7
 80069e8:	47c0      	blx	r8
 80069ea:	3001      	adds	r0, #1
 80069ec:	d0e6      	beq.n	80069bc <_printf_common+0xa8>
 80069ee:	3601      	adds	r6, #1
 80069f0:	e7d9      	b.n	80069a6 <_printf_common+0x92>
	...

080069f4 <_printf_i>:
 80069f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069f8:	460c      	mov	r4, r1
 80069fa:	7e27      	ldrb	r7, [r4, #24]
 80069fc:	4691      	mov	r9, r2
 80069fe:	2f78      	cmp	r7, #120	; 0x78
 8006a00:	4680      	mov	r8, r0
 8006a02:	469a      	mov	sl, r3
 8006a04:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006a06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a0a:	d807      	bhi.n	8006a1c <_printf_i+0x28>
 8006a0c:	2f62      	cmp	r7, #98	; 0x62
 8006a0e:	d80a      	bhi.n	8006a26 <_printf_i+0x32>
 8006a10:	2f00      	cmp	r7, #0
 8006a12:	f000 80d9 	beq.w	8006bc8 <_printf_i+0x1d4>
 8006a16:	2f58      	cmp	r7, #88	; 0x58
 8006a18:	f000 80a4 	beq.w	8006b64 <_printf_i+0x170>
 8006a1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006a20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a24:	e03a      	b.n	8006a9c <_printf_i+0xa8>
 8006a26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a2a:	2b15      	cmp	r3, #21
 8006a2c:	d8f6      	bhi.n	8006a1c <_printf_i+0x28>
 8006a2e:	a001      	add	r0, pc, #4	; (adr r0, 8006a34 <_printf_i+0x40>)
 8006a30:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006a34:	08006a8d 	.word	0x08006a8d
 8006a38:	08006aa1 	.word	0x08006aa1
 8006a3c:	08006a1d 	.word	0x08006a1d
 8006a40:	08006a1d 	.word	0x08006a1d
 8006a44:	08006a1d 	.word	0x08006a1d
 8006a48:	08006a1d 	.word	0x08006a1d
 8006a4c:	08006aa1 	.word	0x08006aa1
 8006a50:	08006a1d 	.word	0x08006a1d
 8006a54:	08006a1d 	.word	0x08006a1d
 8006a58:	08006a1d 	.word	0x08006a1d
 8006a5c:	08006a1d 	.word	0x08006a1d
 8006a60:	08006baf 	.word	0x08006baf
 8006a64:	08006ad1 	.word	0x08006ad1
 8006a68:	08006b91 	.word	0x08006b91
 8006a6c:	08006a1d 	.word	0x08006a1d
 8006a70:	08006a1d 	.word	0x08006a1d
 8006a74:	08006bd1 	.word	0x08006bd1
 8006a78:	08006a1d 	.word	0x08006a1d
 8006a7c:	08006ad1 	.word	0x08006ad1
 8006a80:	08006a1d 	.word	0x08006a1d
 8006a84:	08006a1d 	.word	0x08006a1d
 8006a88:	08006b99 	.word	0x08006b99
 8006a8c:	680b      	ldr	r3, [r1, #0]
 8006a8e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006a92:	1d1a      	adds	r2, r3, #4
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	600a      	str	r2, [r1, #0]
 8006a98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e0a4      	b.n	8006bea <_printf_i+0x1f6>
 8006aa0:	6825      	ldr	r5, [r4, #0]
 8006aa2:	6808      	ldr	r0, [r1, #0]
 8006aa4:	062e      	lsls	r6, r5, #24
 8006aa6:	f100 0304 	add.w	r3, r0, #4
 8006aaa:	d50a      	bpl.n	8006ac2 <_printf_i+0xce>
 8006aac:	6805      	ldr	r5, [r0, #0]
 8006aae:	600b      	str	r3, [r1, #0]
 8006ab0:	2d00      	cmp	r5, #0
 8006ab2:	da03      	bge.n	8006abc <_printf_i+0xc8>
 8006ab4:	232d      	movs	r3, #45	; 0x2d
 8006ab6:	426d      	negs	r5, r5
 8006ab8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006abc:	230a      	movs	r3, #10
 8006abe:	485e      	ldr	r0, [pc, #376]	; (8006c38 <_printf_i+0x244>)
 8006ac0:	e019      	b.n	8006af6 <_printf_i+0x102>
 8006ac2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006ac6:	6805      	ldr	r5, [r0, #0]
 8006ac8:	600b      	str	r3, [r1, #0]
 8006aca:	bf18      	it	ne
 8006acc:	b22d      	sxthne	r5, r5
 8006ace:	e7ef      	b.n	8006ab0 <_printf_i+0xbc>
 8006ad0:	680b      	ldr	r3, [r1, #0]
 8006ad2:	6825      	ldr	r5, [r4, #0]
 8006ad4:	1d18      	adds	r0, r3, #4
 8006ad6:	6008      	str	r0, [r1, #0]
 8006ad8:	0628      	lsls	r0, r5, #24
 8006ada:	d501      	bpl.n	8006ae0 <_printf_i+0xec>
 8006adc:	681d      	ldr	r5, [r3, #0]
 8006ade:	e002      	b.n	8006ae6 <_printf_i+0xf2>
 8006ae0:	0669      	lsls	r1, r5, #25
 8006ae2:	d5fb      	bpl.n	8006adc <_printf_i+0xe8>
 8006ae4:	881d      	ldrh	r5, [r3, #0]
 8006ae6:	2f6f      	cmp	r7, #111	; 0x6f
 8006ae8:	bf0c      	ite	eq
 8006aea:	2308      	moveq	r3, #8
 8006aec:	230a      	movne	r3, #10
 8006aee:	4852      	ldr	r0, [pc, #328]	; (8006c38 <_printf_i+0x244>)
 8006af0:	2100      	movs	r1, #0
 8006af2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006af6:	6866      	ldr	r6, [r4, #4]
 8006af8:	2e00      	cmp	r6, #0
 8006afa:	bfa8      	it	ge
 8006afc:	6821      	ldrge	r1, [r4, #0]
 8006afe:	60a6      	str	r6, [r4, #8]
 8006b00:	bfa4      	itt	ge
 8006b02:	f021 0104 	bicge.w	r1, r1, #4
 8006b06:	6021      	strge	r1, [r4, #0]
 8006b08:	b90d      	cbnz	r5, 8006b0e <_printf_i+0x11a>
 8006b0a:	2e00      	cmp	r6, #0
 8006b0c:	d04d      	beq.n	8006baa <_printf_i+0x1b6>
 8006b0e:	4616      	mov	r6, r2
 8006b10:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b14:	fb03 5711 	mls	r7, r3, r1, r5
 8006b18:	5dc7      	ldrb	r7, [r0, r7]
 8006b1a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b1e:	462f      	mov	r7, r5
 8006b20:	42bb      	cmp	r3, r7
 8006b22:	460d      	mov	r5, r1
 8006b24:	d9f4      	bls.n	8006b10 <_printf_i+0x11c>
 8006b26:	2b08      	cmp	r3, #8
 8006b28:	d10b      	bne.n	8006b42 <_printf_i+0x14e>
 8006b2a:	6823      	ldr	r3, [r4, #0]
 8006b2c:	07df      	lsls	r7, r3, #31
 8006b2e:	d508      	bpl.n	8006b42 <_printf_i+0x14e>
 8006b30:	6923      	ldr	r3, [r4, #16]
 8006b32:	6861      	ldr	r1, [r4, #4]
 8006b34:	4299      	cmp	r1, r3
 8006b36:	bfde      	ittt	le
 8006b38:	2330      	movle	r3, #48	; 0x30
 8006b3a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b3e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b42:	1b92      	subs	r2, r2, r6
 8006b44:	6122      	str	r2, [r4, #16]
 8006b46:	464b      	mov	r3, r9
 8006b48:	4621      	mov	r1, r4
 8006b4a:	4640      	mov	r0, r8
 8006b4c:	f8cd a000 	str.w	sl, [sp]
 8006b50:	aa03      	add	r2, sp, #12
 8006b52:	f7ff fedf 	bl	8006914 <_printf_common>
 8006b56:	3001      	adds	r0, #1
 8006b58:	d14c      	bne.n	8006bf4 <_printf_i+0x200>
 8006b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b5e:	b004      	add	sp, #16
 8006b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b64:	4834      	ldr	r0, [pc, #208]	; (8006c38 <_printf_i+0x244>)
 8006b66:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006b6a:	680e      	ldr	r6, [r1, #0]
 8006b6c:	6823      	ldr	r3, [r4, #0]
 8006b6e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006b72:	061f      	lsls	r7, r3, #24
 8006b74:	600e      	str	r6, [r1, #0]
 8006b76:	d514      	bpl.n	8006ba2 <_printf_i+0x1ae>
 8006b78:	07d9      	lsls	r1, r3, #31
 8006b7a:	bf44      	itt	mi
 8006b7c:	f043 0320 	orrmi.w	r3, r3, #32
 8006b80:	6023      	strmi	r3, [r4, #0]
 8006b82:	b91d      	cbnz	r5, 8006b8c <_printf_i+0x198>
 8006b84:	6823      	ldr	r3, [r4, #0]
 8006b86:	f023 0320 	bic.w	r3, r3, #32
 8006b8a:	6023      	str	r3, [r4, #0]
 8006b8c:	2310      	movs	r3, #16
 8006b8e:	e7af      	b.n	8006af0 <_printf_i+0xfc>
 8006b90:	6823      	ldr	r3, [r4, #0]
 8006b92:	f043 0320 	orr.w	r3, r3, #32
 8006b96:	6023      	str	r3, [r4, #0]
 8006b98:	2378      	movs	r3, #120	; 0x78
 8006b9a:	4828      	ldr	r0, [pc, #160]	; (8006c3c <_printf_i+0x248>)
 8006b9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ba0:	e7e3      	b.n	8006b6a <_printf_i+0x176>
 8006ba2:	065e      	lsls	r6, r3, #25
 8006ba4:	bf48      	it	mi
 8006ba6:	b2ad      	uxthmi	r5, r5
 8006ba8:	e7e6      	b.n	8006b78 <_printf_i+0x184>
 8006baa:	4616      	mov	r6, r2
 8006bac:	e7bb      	b.n	8006b26 <_printf_i+0x132>
 8006bae:	680b      	ldr	r3, [r1, #0]
 8006bb0:	6826      	ldr	r6, [r4, #0]
 8006bb2:	1d1d      	adds	r5, r3, #4
 8006bb4:	6960      	ldr	r0, [r4, #20]
 8006bb6:	600d      	str	r5, [r1, #0]
 8006bb8:	0635      	lsls	r5, r6, #24
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	d501      	bpl.n	8006bc2 <_printf_i+0x1ce>
 8006bbe:	6018      	str	r0, [r3, #0]
 8006bc0:	e002      	b.n	8006bc8 <_printf_i+0x1d4>
 8006bc2:	0671      	lsls	r1, r6, #25
 8006bc4:	d5fb      	bpl.n	8006bbe <_printf_i+0x1ca>
 8006bc6:	8018      	strh	r0, [r3, #0]
 8006bc8:	2300      	movs	r3, #0
 8006bca:	4616      	mov	r6, r2
 8006bcc:	6123      	str	r3, [r4, #16]
 8006bce:	e7ba      	b.n	8006b46 <_printf_i+0x152>
 8006bd0:	680b      	ldr	r3, [r1, #0]
 8006bd2:	1d1a      	adds	r2, r3, #4
 8006bd4:	600a      	str	r2, [r1, #0]
 8006bd6:	681e      	ldr	r6, [r3, #0]
 8006bd8:	2100      	movs	r1, #0
 8006bda:	4630      	mov	r0, r6
 8006bdc:	6862      	ldr	r2, [r4, #4]
 8006bde:	f000 f82f 	bl	8006c40 <memchr>
 8006be2:	b108      	cbz	r0, 8006be8 <_printf_i+0x1f4>
 8006be4:	1b80      	subs	r0, r0, r6
 8006be6:	6060      	str	r0, [r4, #4]
 8006be8:	6863      	ldr	r3, [r4, #4]
 8006bea:	6123      	str	r3, [r4, #16]
 8006bec:	2300      	movs	r3, #0
 8006bee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bf2:	e7a8      	b.n	8006b46 <_printf_i+0x152>
 8006bf4:	4632      	mov	r2, r6
 8006bf6:	4649      	mov	r1, r9
 8006bf8:	4640      	mov	r0, r8
 8006bfa:	6923      	ldr	r3, [r4, #16]
 8006bfc:	47d0      	blx	sl
 8006bfe:	3001      	adds	r0, #1
 8006c00:	d0ab      	beq.n	8006b5a <_printf_i+0x166>
 8006c02:	6823      	ldr	r3, [r4, #0]
 8006c04:	079b      	lsls	r3, r3, #30
 8006c06:	d413      	bmi.n	8006c30 <_printf_i+0x23c>
 8006c08:	68e0      	ldr	r0, [r4, #12]
 8006c0a:	9b03      	ldr	r3, [sp, #12]
 8006c0c:	4298      	cmp	r0, r3
 8006c0e:	bfb8      	it	lt
 8006c10:	4618      	movlt	r0, r3
 8006c12:	e7a4      	b.n	8006b5e <_printf_i+0x16a>
 8006c14:	2301      	movs	r3, #1
 8006c16:	4632      	mov	r2, r6
 8006c18:	4649      	mov	r1, r9
 8006c1a:	4640      	mov	r0, r8
 8006c1c:	47d0      	blx	sl
 8006c1e:	3001      	adds	r0, #1
 8006c20:	d09b      	beq.n	8006b5a <_printf_i+0x166>
 8006c22:	3501      	adds	r5, #1
 8006c24:	68e3      	ldr	r3, [r4, #12]
 8006c26:	9903      	ldr	r1, [sp, #12]
 8006c28:	1a5b      	subs	r3, r3, r1
 8006c2a:	42ab      	cmp	r3, r5
 8006c2c:	dcf2      	bgt.n	8006c14 <_printf_i+0x220>
 8006c2e:	e7eb      	b.n	8006c08 <_printf_i+0x214>
 8006c30:	2500      	movs	r5, #0
 8006c32:	f104 0619 	add.w	r6, r4, #25
 8006c36:	e7f5      	b.n	8006c24 <_printf_i+0x230>
 8006c38:	08007049 	.word	0x08007049
 8006c3c:	0800705a 	.word	0x0800705a

08006c40 <memchr>:
 8006c40:	4603      	mov	r3, r0
 8006c42:	b510      	push	{r4, lr}
 8006c44:	b2c9      	uxtb	r1, r1
 8006c46:	4402      	add	r2, r0
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	d101      	bne.n	8006c52 <memchr+0x12>
 8006c4e:	2000      	movs	r0, #0
 8006c50:	e003      	b.n	8006c5a <memchr+0x1a>
 8006c52:	7804      	ldrb	r4, [r0, #0]
 8006c54:	3301      	adds	r3, #1
 8006c56:	428c      	cmp	r4, r1
 8006c58:	d1f6      	bne.n	8006c48 <memchr+0x8>
 8006c5a:	bd10      	pop	{r4, pc}

08006c5c <memmove>:
 8006c5c:	4288      	cmp	r0, r1
 8006c5e:	b510      	push	{r4, lr}
 8006c60:	eb01 0402 	add.w	r4, r1, r2
 8006c64:	d902      	bls.n	8006c6c <memmove+0x10>
 8006c66:	4284      	cmp	r4, r0
 8006c68:	4623      	mov	r3, r4
 8006c6a:	d807      	bhi.n	8006c7c <memmove+0x20>
 8006c6c:	1e43      	subs	r3, r0, #1
 8006c6e:	42a1      	cmp	r1, r4
 8006c70:	d008      	beq.n	8006c84 <memmove+0x28>
 8006c72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c7a:	e7f8      	b.n	8006c6e <memmove+0x12>
 8006c7c:	4601      	mov	r1, r0
 8006c7e:	4402      	add	r2, r0
 8006c80:	428a      	cmp	r2, r1
 8006c82:	d100      	bne.n	8006c86 <memmove+0x2a>
 8006c84:	bd10      	pop	{r4, pc}
 8006c86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c8e:	e7f7      	b.n	8006c80 <memmove+0x24>

08006c90 <_realloc_r>:
 8006c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c92:	4607      	mov	r7, r0
 8006c94:	4614      	mov	r4, r2
 8006c96:	460e      	mov	r6, r1
 8006c98:	b921      	cbnz	r1, 8006ca4 <_realloc_r+0x14>
 8006c9a:	4611      	mov	r1, r2
 8006c9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006ca0:	f7ff bb90 	b.w	80063c4 <_malloc_r>
 8006ca4:	b922      	cbnz	r2, 8006cb0 <_realloc_r+0x20>
 8006ca6:	f7ff fc8d 	bl	80065c4 <_free_r>
 8006caa:	4625      	mov	r5, r4
 8006cac:	4628      	mov	r0, r5
 8006cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cb0:	f000 f814 	bl	8006cdc <_malloc_usable_size_r>
 8006cb4:	42a0      	cmp	r0, r4
 8006cb6:	d20f      	bcs.n	8006cd8 <_realloc_r+0x48>
 8006cb8:	4621      	mov	r1, r4
 8006cba:	4638      	mov	r0, r7
 8006cbc:	f7ff fb82 	bl	80063c4 <_malloc_r>
 8006cc0:	4605      	mov	r5, r0
 8006cc2:	2800      	cmp	r0, #0
 8006cc4:	d0f2      	beq.n	8006cac <_realloc_r+0x1c>
 8006cc6:	4631      	mov	r1, r6
 8006cc8:	4622      	mov	r2, r4
 8006cca:	f7ff fb65 	bl	8006398 <memcpy>
 8006cce:	4631      	mov	r1, r6
 8006cd0:	4638      	mov	r0, r7
 8006cd2:	f7ff fc77 	bl	80065c4 <_free_r>
 8006cd6:	e7e9      	b.n	8006cac <_realloc_r+0x1c>
 8006cd8:	4635      	mov	r5, r6
 8006cda:	e7e7      	b.n	8006cac <_realloc_r+0x1c>

08006cdc <_malloc_usable_size_r>:
 8006cdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ce0:	1f18      	subs	r0, r3, #4
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	bfbc      	itt	lt
 8006ce6:	580b      	ldrlt	r3, [r1, r0]
 8006ce8:	18c0      	addlt	r0, r0, r3
 8006cea:	4770      	bx	lr

08006cec <_init>:
 8006cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cee:	bf00      	nop
 8006cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cf2:	bc08      	pop	{r3}
 8006cf4:	469e      	mov	lr, r3
 8006cf6:	4770      	bx	lr

08006cf8 <_fini>:
 8006cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cfa:	bf00      	nop
 8006cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cfe:	bc08      	pop	{r3}
 8006d00:	469e      	mov	lr, r3
 8006d02:	4770      	bx	lr
